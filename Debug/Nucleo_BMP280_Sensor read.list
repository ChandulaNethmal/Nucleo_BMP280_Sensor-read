
Nucleo_BMP280_Sensor read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08006888  08006888  00016888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069e8  080069e8  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  080069e8  080069e8  000169e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069f0  080069f0  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069f0  080069f0  000169f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069f4  080069f4  000169f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080069f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  200000a4  08006a9c  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08006a9c  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b146  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000187e  00000000  00000000  0002b21a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0002ca98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002d3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162d5  00000000  00000000  0002dc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb45  00000000  00000000  00043f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088acf  00000000  00000000  00050ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9581  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030f8  00000000  00000000  000d95d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006870 	.word	0x08006870

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	08006870 	.word	0x08006870

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <I2C_Read_Register>:
signed short Dig_T2, Dig_T3, Dig_P2, Dig_P3, Dig_P4, Dig_P5, Dig_P6, Dig_P7, Dig_P8, Dig_P9;
float temperature, pressure, altitude, init_height;
extern I2C_HandleTypeDef hi2c2;

uint8_t I2C_Read_Register(uint8_t device_adr, uint8_t internal_adr)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af02      	add	r7, sp, #8
 8000f62:	4603      	mov	r3, r0
 8000f64:	460a      	mov	r2, r1
 8000f66:	71fb      	strb	r3, [r7, #7]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buff[1];
	uint8_t rx_buff[1];

	tx_buff[0] = internal_adr;
 8000f6c:	79bb      	ldrb	r3, [r7, #6]
 8000f6e:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(&hi2c2, device_adr, &tx_buff[0], 1, 10000);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	b299      	uxth	r1, r3
 8000f74:	f107 020c 	add.w	r2, r7, #12
 8000f78:	f242 7310 	movw	r3, #10000	; 0x2710
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	480a      	ldr	r0, [pc, #40]	; (8000fac <I2C_Read_Register+0x50>)
 8000f82:	f001 fd47 	bl	8002a14 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, device_adr + 1, &rx_buff[0], 1, 10000);
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	b299      	uxth	r1, r3
 8000f8e:	f107 0208 	add.w	r2, r7, #8
 8000f92:	f242 7310 	movw	r3, #10000	; 0x2710
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	4804      	ldr	r0, [pc, #16]	; (8000fac <I2C_Read_Register+0x50>)
 8000f9c:	f001 fe38 	bl	8002c10 <HAL_I2C_Master_Receive>


	return rx_buff[0];
 8000fa0:	7a3b      	ldrb	r3, [r7, #8]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200000f0 	.word	0x200000f0

08000fb0 <I2C_Write_Register>:

void I2C_Write_Register(uint8_t device_adr, uint8_t internal_adr, uint8_t data)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	71bb      	strb	r3, [r7, #6]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	717b      	strb	r3, [r7, #5]
	uint8_t tx_buff[2];

	tx_buff[0] = internal_adr;
 8000fc2:	79bb      	ldrb	r3, [r7, #6]
 8000fc4:	733b      	strb	r3, [r7, #12]
	tx_buff[1] = data;
 8000fc6:	797b      	ldrb	r3, [r7, #5]
 8000fc8:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c2, device_adr, tx_buff, 2, 10000);
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	b299      	uxth	r1, r3
 8000fce:	f107 020c 	add.w	r2, r7, #12
 8000fd2:	f242 7310 	movw	r3, #10000	; 0x2710
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2302      	movs	r3, #2
 8000fda:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <I2C_Write_Register+0x38>)
 8000fdc:	f001 fd1a 	bl	8002a14 <HAL_I2C_Master_Transmit>
}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200000f0 	.word	0x200000f0

08000fec <BMP280_get_calib_values>:

void BMP280_get_calib_values(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af02      	add	r7, sp, #8
	uint8_t rx_buff[24], starting_address=0x88;
 8000ff2:	2388      	movs	r3, #136	; 0x88
 8000ff4:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Master_Transmit(&hi2c2, BMP280_dev_address, &starting_address, 1, 10000);
 8000ff6:	1dfa      	adds	r2, r7, #7
 8000ff8:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2301      	movs	r3, #1
 8001000:	21ec      	movs	r1, #236	; 0xec
 8001002:	4849      	ldr	r0, [pc, #292]	; (8001128 <BMP280_get_calib_values+0x13c>)
 8001004:	f001 fd06 	bl	8002a14 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, BMP280_dev_address + 1, &rx_buff[0], 24, 10000);
 8001008:	f107 0208 	add.w	r2, r7, #8
 800100c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2318      	movs	r3, #24
 8001014:	21ed      	movs	r1, #237	; 0xed
 8001016:	4844      	ldr	r0, [pc, #272]	; (8001128 <BMP280_get_calib_values+0x13c>)
 8001018:	f001 fdfa 	bl	8002c10 <HAL_I2C_Master_Receive>

	Dig_T1=(rx_buff[0])+(rx_buff[1]<<8);
 800101c:	7a3b      	ldrb	r3, [r7, #8]
 800101e:	b29a      	uxth	r2, r3
 8001020:	7a7b      	ldrb	r3, [r7, #9]
 8001022:	b29b      	uxth	r3, r3
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	b29b      	uxth	r3, r3
 8001028:	4413      	add	r3, r2
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b3f      	ldr	r3, [pc, #252]	; (800112c <BMP280_get_calib_values+0x140>)
 800102e:	801a      	strh	r2, [r3, #0]
	Dig_T2=(rx_buff[2])+(rx_buff[3]<<8);
 8001030:	7abb      	ldrb	r3, [r7, #10]
 8001032:	b29a      	uxth	r2, r3
 8001034:	7afb      	ldrb	r3, [r7, #11]
 8001036:	b29b      	uxth	r3, r3
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	b29b      	uxth	r3, r3
 800103c:	4413      	add	r3, r2
 800103e:	b29b      	uxth	r3, r3
 8001040:	b21a      	sxth	r2, r3
 8001042:	4b3b      	ldr	r3, [pc, #236]	; (8001130 <BMP280_get_calib_values+0x144>)
 8001044:	801a      	strh	r2, [r3, #0]
	Dig_T3=(rx_buff[4])+(rx_buff[5]<<8);
 8001046:	7b3b      	ldrb	r3, [r7, #12]
 8001048:	b29a      	uxth	r2, r3
 800104a:	7b7b      	ldrb	r3, [r7, #13]
 800104c:	b29b      	uxth	r3, r3
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b29b      	uxth	r3, r3
 8001052:	4413      	add	r3, r2
 8001054:	b29b      	uxth	r3, r3
 8001056:	b21a      	sxth	r2, r3
 8001058:	4b36      	ldr	r3, [pc, #216]	; (8001134 <BMP280_get_calib_values+0x148>)
 800105a:	801a      	strh	r2, [r3, #0]
	Dig_P1=(rx_buff[6])+(rx_buff[7]<<8);
 800105c:	7bbb      	ldrb	r3, [r7, #14]
 800105e:	b29a      	uxth	r2, r3
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	b29b      	uxth	r3, r3
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b29b      	uxth	r3, r3
 8001068:	4413      	add	r3, r2
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b32      	ldr	r3, [pc, #200]	; (8001138 <BMP280_get_calib_values+0x14c>)
 800106e:	801a      	strh	r2, [r3, #0]
	Dig_P2=(rx_buff[8])+(rx_buff[9]<<8);
 8001070:	7c3b      	ldrb	r3, [r7, #16]
 8001072:	b29a      	uxth	r2, r3
 8001074:	7c7b      	ldrb	r3, [r7, #17]
 8001076:	b29b      	uxth	r3, r3
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	b29b      	uxth	r3, r3
 800107c:	4413      	add	r3, r2
 800107e:	b29b      	uxth	r3, r3
 8001080:	b21a      	sxth	r2, r3
 8001082:	4b2e      	ldr	r3, [pc, #184]	; (800113c <BMP280_get_calib_values+0x150>)
 8001084:	801a      	strh	r2, [r3, #0]
	Dig_P3=(rx_buff[10])+(rx_buff[11]<<8);
 8001086:	7cbb      	ldrb	r3, [r7, #18]
 8001088:	b29a      	uxth	r2, r3
 800108a:	7cfb      	ldrb	r3, [r7, #19]
 800108c:	b29b      	uxth	r3, r3
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	b29b      	uxth	r3, r3
 8001092:	4413      	add	r3, r2
 8001094:	b29b      	uxth	r3, r3
 8001096:	b21a      	sxth	r2, r3
 8001098:	4b29      	ldr	r3, [pc, #164]	; (8001140 <BMP280_get_calib_values+0x154>)
 800109a:	801a      	strh	r2, [r3, #0]
	Dig_P4=(rx_buff[12])+(rx_buff[13]<<8);
 800109c:	7d3b      	ldrb	r3, [r7, #20]
 800109e:	b29a      	uxth	r2, r3
 80010a0:	7d7b      	ldrb	r3, [r7, #21]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	4413      	add	r3, r2
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	4b25      	ldr	r3, [pc, #148]	; (8001144 <BMP280_get_calib_values+0x158>)
 80010b0:	801a      	strh	r2, [r3, #0]
	Dig_P5=(rx_buff[14])+(rx_buff[15]<<8);
 80010b2:	7dbb      	ldrb	r3, [r7, #22]
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	7dfb      	ldrb	r3, [r7, #23]
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b29b      	uxth	r3, r3
 80010be:	4413      	add	r3, r2
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <BMP280_get_calib_values+0x15c>)
 80010c6:	801a      	strh	r2, [r3, #0]
	Dig_P6=(rx_buff[16])+(rx_buff[17]<<8);
 80010c8:	7e3b      	ldrb	r3, [r7, #24]
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	7e7b      	ldrb	r3, [r7, #25]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	021b      	lsls	r3, r3, #8
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	4413      	add	r3, r2
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	b21a      	sxth	r2, r3
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <BMP280_get_calib_values+0x160>)
 80010dc:	801a      	strh	r2, [r3, #0]
	Dig_P7=(rx_buff[18])+(rx_buff[19]<<8);
 80010de:	7ebb      	ldrb	r3, [r7, #26]
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	7efb      	ldrb	r3, [r7, #27]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	4413      	add	r3, r2
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <BMP280_get_calib_values+0x164>)
 80010f2:	801a      	strh	r2, [r3, #0]
	Dig_P8=(rx_buff[20])+(rx_buff[21]<<8);
 80010f4:	7f3b      	ldrb	r3, [r7, #28]
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	7f7b      	ldrb	r3, [r7, #29]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	b29b      	uxth	r3, r3
 8001100:	4413      	add	r3, r2
 8001102:	b29b      	uxth	r3, r3
 8001104:	b21a      	sxth	r2, r3
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <BMP280_get_calib_values+0x168>)
 8001108:	801a      	strh	r2, [r3, #0]
	Dig_P9=(rx_buff[22])+(rx_buff[23]<<8);
 800110a:	7fbb      	ldrb	r3, [r7, #30]
 800110c:	b29a      	uxth	r2, r3
 800110e:	7ffb      	ldrb	r3, [r7, #31]
 8001110:	b29b      	uxth	r3, r3
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b29b      	uxth	r3, r3
 8001116:	4413      	add	r3, r2
 8001118:	b29b      	uxth	r3, r3
 800111a:	b21a      	sxth	r2, r3
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <BMP280_get_calib_values+0x16c>)
 800111e:	801a      	strh	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200000f0 	.word	0x200000f0
 800112c:	200000c8 	.word	0x200000c8
 8001130:	200000cc 	.word	0x200000cc
 8001134:	200000ce 	.word	0x200000ce
 8001138:	200000ca 	.word	0x200000ca
 800113c:	200000d0 	.word	0x200000d0
 8001140:	200000d2 	.word	0x200000d2
 8001144:	200000d4 	.word	0x200000d4
 8001148:	200000d6 	.word	0x200000d6
 800114c:	200000d8 	.word	0x200000d8
 8001150:	200000da 	.word	0x200000da
 8001154:	200000dc 	.word	0x200000dc
 8001158:	200000de 	.word	0x200000de

0800115c <BMP280_init>:

void BMP280_init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	I2C_Write_Register(BMP280_dev_address, 0xF5, 0b10010000);// standby time 500ms 100, filter 16 100, SPI DIS 00
 8001160:	2290      	movs	r2, #144	; 0x90
 8001162:	21f5      	movs	r1, #245	; 0xf5
 8001164:	20ec      	movs	r0, #236	; 0xec
 8001166:	f7ff ff23 	bl	8000fb0 <I2C_Write_Register>
	I2C_Write_Register(BMP280_dev_address, 0xF4, 0b01010111);// osrs_t 010 x2, osrs_p 16 101, mode normal 11
 800116a:	2257      	movs	r2, #87	; 0x57
 800116c:	21f4      	movs	r1, #244	; 0xf4
 800116e:	20ec      	movs	r0, #236	; 0xec
 8001170:	f7ff ff1e 	bl	8000fb0 <I2C_Write_Register>

	BMP280_get_calib_values();
 8001174:	f7ff ff3a 	bl	8000fec <BMP280_get_calib_values>
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	0000      	movs	r0, r0
	...

08001180 <BMP280_calc_values>:

void BMP280_calc_values(void)
{
 8001180:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001184:	b094      	sub	sp, #80	; 0x50
 8001186:	af02      	add	r7, sp, #8
	uint8_t status, rx_buff[6], starting_address=0xF7;
 8001188:	23f7      	movs	r3, #247	; 0xf7
 800118a:	77fb      	strb	r3, [r7, #31]

	do
	{
		status=I2C_Read_Register(BMP280_dev_address, 0xF3);
 800118c:	21f3      	movs	r1, #243	; 0xf3
 800118e:	20ec      	movs	r0, #236	; 0xec
 8001190:	f7ff fee4 	bl	8000f5c <I2C_Read_Register>
 8001194:	4603      	mov	r3, r0
 8001196:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	} while(((status&0b00001000)==8)||((status&0b00000001)==1));
 800119a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f2      	bne.n	800118c <BMP280_calc_values+0xc>
 80011a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1ec      	bne.n	800118c <BMP280_calc_values+0xc>

	HAL_I2C_Master_Transmit(&hi2c2, BMP280_dev_address, &starting_address, 1, 10000);
 80011b2:	f107 021f 	add.w	r2, r7, #31
 80011b6:	f242 7310 	movw	r3, #10000	; 0x2710
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	21ec      	movs	r1, #236	; 0xec
 80011c0:	48ce      	ldr	r0, [pc, #824]	; (80014fc <BMP280_calc_values+0x37c>)
 80011c2:	f001 fc27 	bl	8002a14 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, BMP280_dev_address + 1, &rx_buff[0], 6, 10000);
 80011c6:	f107 0220 	add.w	r2, r7, #32
 80011ca:	f242 7310 	movw	r3, #10000	; 0x2710
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2306      	movs	r3, #6
 80011d2:	21ed      	movs	r1, #237	; 0xed
 80011d4:	48c9      	ldr	r0, [pc, #804]	; (80014fc <BMP280_calc_values+0x37c>)
 80011d6:	f001 fd1b 	bl	8002c10 <HAL_I2C_Master_Receive>

	volatile uint32_t temp[3];
	temp[2]=rx_buff[3];
 80011da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011de:	61bb      	str	r3, [r7, #24]
	temp[1]=rx_buff[4];
 80011e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011e4:	617b      	str	r3, [r7, #20]
	temp[0]=rx_buff[5];
 80011e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80011ea:	613b      	str	r3, [r7, #16]
	temperature_raw=(temp[2]<<12)+(temp[1]<<4)+(temp[0]>>4);
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	031a      	lsls	r2, r3, #12
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	441a      	add	r2, r3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	4413      	add	r3, r2
 80011fc:	461a      	mov	r2, r3
 80011fe:	4bc0      	ldr	r3, [pc, #768]	; (8001500 <BMP280_calc_values+0x380>)
 8001200:	601a      	str	r2, [r3, #0]

	temp[2]=rx_buff[0];
 8001202:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001206:	61bb      	str	r3, [r7, #24]
	temp[1]=rx_buff[1];
 8001208:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800120c:	617b      	str	r3, [r7, #20]
	temp[0]=rx_buff[2];
 800120e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001212:	613b      	str	r3, [r7, #16]
	pressure_raw=(temp[2]<<12)+(temp[1]<<4)+(temp[0]>>4);
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	031a      	lsls	r2, r3, #12
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	441a      	add	r2, r3
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	091b      	lsrs	r3, r3, #4
 8001222:	4413      	add	r3, r2
 8001224:	461a      	mov	r2, r3
 8001226:	4bb7      	ldr	r3, [pc, #732]	; (8001504 <BMP280_calc_values+0x384>)
 8001228:	601a      	str	r2, [r3, #0]

	double var1, var2;
	var1=(((double)temperature_raw)/16384.0-((double)Dig_T1)/1024.0)*((double)Dig_T2);
 800122a:	4bb5      	ldr	r3, [pc, #724]	; (8001500 <BMP280_calc_values+0x380>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f980 	bl	8000534 <__aeabi_i2d>
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	4bb3      	ldr	r3, [pc, #716]	; (8001508 <BMP280_calc_values+0x388>)
 800123a:	f7ff fb0f 	bl	800085c <__aeabi_ddiv>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4614      	mov	r4, r2
 8001244:	461d      	mov	r5, r3
 8001246:	4bb1      	ldr	r3, [pc, #708]	; (800150c <BMP280_calc_values+0x38c>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f962 	bl	8000514 <__aeabi_ui2d>
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	4bae      	ldr	r3, [pc, #696]	; (8001510 <BMP280_calc_values+0x390>)
 8001256:	f7ff fb01 	bl	800085c <__aeabi_ddiv>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4620      	mov	r0, r4
 8001260:	4629      	mov	r1, r5
 8001262:	f7ff f819 	bl	8000298 <__aeabi_dsub>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4614      	mov	r4, r2
 800126c:	461d      	mov	r5, r3
 800126e:	4ba9      	ldr	r3, [pc, #676]	; (8001514 <BMP280_calc_values+0x394>)
 8001270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f95d 	bl	8000534 <__aeabi_i2d>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4620      	mov	r0, r4
 8001280:	4629      	mov	r1, r5
 8001282:	f7ff f9c1 	bl	8000608 <__aeabi_dmul>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var2=((((double)temperature_raw)/131072.0-((double)Dig_T1)/8192.0)*(((double)temperature_raw)/131072.0-((double)Dig_T1)/8192.0))*((double)Dig_T3);
 800128e:	4b9c      	ldr	r3, [pc, #624]	; (8001500 <BMP280_calc_values+0x380>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f94e 	bl	8000534 <__aeabi_i2d>
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80012a0:	f7ff fadc 	bl	800085c <__aeabi_ddiv>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4614      	mov	r4, r2
 80012aa:	461d      	mov	r5, r3
 80012ac:	4b97      	ldr	r3, [pc, #604]	; (800150c <BMP280_calc_values+0x38c>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f92f 	bl	8000514 <__aeabi_ui2d>
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	4b97      	ldr	r3, [pc, #604]	; (8001518 <BMP280_calc_values+0x398>)
 80012bc:	f7ff face 	bl	800085c <__aeabi_ddiv>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4620      	mov	r0, r4
 80012c6:	4629      	mov	r1, r5
 80012c8:	f7fe ffe6 	bl	8000298 <__aeabi_dsub>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4614      	mov	r4, r2
 80012d2:	461d      	mov	r5, r3
 80012d4:	4b8a      	ldr	r3, [pc, #552]	; (8001500 <BMP280_calc_values+0x380>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f92b 	bl	8000534 <__aeabi_i2d>
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80012e6:	f7ff fab9 	bl	800085c <__aeabi_ddiv>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4690      	mov	r8, r2
 80012f0:	4699      	mov	r9, r3
 80012f2:	4b86      	ldr	r3, [pc, #536]	; (800150c <BMP280_calc_values+0x38c>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f90c 	bl	8000514 <__aeabi_ui2d>
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	4b85      	ldr	r3, [pc, #532]	; (8001518 <BMP280_calc_values+0x398>)
 8001302:	f7ff faab 	bl	800085c <__aeabi_ddiv>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4640      	mov	r0, r8
 800130c:	4649      	mov	r1, r9
 800130e:	f7fe ffc3 	bl	8000298 <__aeabi_dsub>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4620      	mov	r0, r4
 8001318:	4629      	mov	r1, r5
 800131a:	f7ff f975 	bl	8000608 <__aeabi_dmul>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4614      	mov	r4, r2
 8001324:	461d      	mov	r5, r3
 8001326:	4b7d      	ldr	r3, [pc, #500]	; (800151c <BMP280_calc_values+0x39c>)
 8001328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f901 	bl	8000534 <__aeabi_i2d>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4620      	mov	r0, r4
 8001338:	4629      	mov	r1, r5
 800133a:	f7ff f965 	bl	8000608 <__aeabi_dmul>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double t_fine = (int32_t)(var1+var2);
 8001346:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800134a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800134e:	f7fe ffa5 	bl	800029c <__adddf3>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	f7ff fc05 	bl	8000b68 <__aeabi_d2iz>
 800135e:	4603      	mov	r3, r0
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f8e7 	bl	8000534 <__aeabi_i2d>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
volatile	float T = (var1+var2)/5120.0;
 800136e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001372:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001376:	f7fe ff91 	bl	800029c <__adddf3>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	4b66      	ldr	r3, [pc, #408]	; (8001520 <BMP280_calc_values+0x3a0>)
 8001388:	f7ff fa68 	bl	800085c <__aeabi_ddiv>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fc10 	bl	8000bb8 <__aeabi_d2f>
 8001398:	4603      	mov	r3, r0
 800139a:	60fb      	str	r3, [r7, #12]

	var1=((double)t_fine/2.0)-64000.0;
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013a8:	f7ff fa58 	bl	800085c <__aeabi_ddiv>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4b5a      	ldr	r3, [pc, #360]	; (8001524 <BMP280_calc_values+0x3a4>)
 80013ba:	f7fe ff6d 	bl	8000298 <__aeabi_dsub>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var2=var1*var1*((double)Dig_P6)/32768.0;
 80013c6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80013ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80013ce:	f7ff f91b 	bl	8000608 <__aeabi_dmul>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4614      	mov	r4, r2
 80013d8:	461d      	mov	r5, r3
 80013da:	4b53      	ldr	r3, [pc, #332]	; (8001528 <BMP280_calc_values+0x3a8>)
 80013dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f8a7 	bl	8000534 <__aeabi_i2d>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4620      	mov	r0, r4
 80013ec:	4629      	mov	r1, r5
 80013ee:	f7ff f90b 	bl	8000608 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	4b4b      	ldr	r3, [pc, #300]	; (800152c <BMP280_calc_values+0x3ac>)
 8001400:	f7ff fa2c 	bl	800085c <__aeabi_ddiv>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2=var2+var1*((double)Dig_P5)*2.0;
 800140c:	4b48      	ldr	r3, [pc, #288]	; (8001530 <BMP280_calc_values+0x3b0>)
 800140e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f88e 	bl	8000534 <__aeabi_i2d>
 8001418:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800141c:	f7ff f8f4 	bl	8000608 <__aeabi_dmul>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	f7fe ff36 	bl	800029c <__adddf3>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001438:	f7fe ff30 	bl	800029c <__adddf3>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2=(var2/4.0)+(((double)Dig_P4)*65536.0);
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <BMP280_calc_values+0x3b4>)
 800144a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800144e:	f7ff fa05 	bl	800085c <__aeabi_ddiv>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4614      	mov	r4, r2
 8001458:	461d      	mov	r5, r3
 800145a:	4b37      	ldr	r3, [pc, #220]	; (8001538 <BMP280_calc_values+0x3b8>)
 800145c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff f867 	bl	8000534 <__aeabi_i2d>
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b34      	ldr	r3, [pc, #208]	; (800153c <BMP280_calc_values+0x3bc>)
 800146c:	f7ff f8cc 	bl	8000608 <__aeabi_dmul>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4620      	mov	r0, r4
 8001476:	4629      	mov	r1, r5
 8001478:	f7fe ff10 	bl	800029c <__adddf3>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var1=(((double)Dig_P3)*var1*var1/524288.0+((double)Dig_P2)*var1)/524288.0;
 8001484:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <BMP280_calc_values+0x3c0>)
 8001486:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f852 	bl	8000534 <__aeabi_i2d>
 8001490:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001494:	f7ff f8b8 	bl	8000608 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80014a4:	f7ff f8b0 	bl	8000608 <__aeabi_dmul>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	4b23      	ldr	r3, [pc, #140]	; (8001544 <BMP280_calc_values+0x3c4>)
 80014b6:	f7ff f9d1 	bl	800085c <__aeabi_ddiv>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4614      	mov	r4, r2
 80014c0:	461d      	mov	r5, r3
 80014c2:	4b21      	ldr	r3, [pc, #132]	; (8001548 <BMP280_calc_values+0x3c8>)
 80014c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f833 	bl	8000534 <__aeabi_i2d>
 80014ce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80014d2:	f7ff f899 	bl	8000608 <__aeabi_dmul>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4620      	mov	r0, r4
 80014dc:	4629      	mov	r1, r5
 80014de:	f7fe fedd 	bl	800029c <__adddf3>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <BMP280_calc_values+0x3c4>)
 80014f0:	f7ff f9b4 	bl	800085c <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	e028      	b.n	800154c <BMP280_calc_values+0x3cc>
 80014fa:	bf00      	nop
 80014fc:	200000f0 	.word	0x200000f0
 8001500:	200000c0 	.word	0x200000c0
 8001504:	200000c4 	.word	0x200000c4
 8001508:	40d00000 	.word	0x40d00000
 800150c:	200000c8 	.word	0x200000c8
 8001510:	40900000 	.word	0x40900000
 8001514:	200000cc 	.word	0x200000cc
 8001518:	40c00000 	.word	0x40c00000
 800151c:	200000ce 	.word	0x200000ce
 8001520:	40b40000 	.word	0x40b40000
 8001524:	40ef4000 	.word	0x40ef4000
 8001528:	200000d8 	.word	0x200000d8
 800152c:	40e00000 	.word	0x40e00000
 8001530:	200000d6 	.word	0x200000d6
 8001534:	40100000 	.word	0x40100000
 8001538:	200000d4 	.word	0x200000d4
 800153c:	40f00000 	.word	0x40f00000
 8001540:	200000d2 	.word	0x200000d2
 8001544:	41200000 	.word	0x41200000
 8001548:	200000d0 	.word	0x200000d0
 800154c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var1=(1.0+var1/32768.0)*((double)Dig_P1);
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	4b72      	ldr	r3, [pc, #456]	; (8001720 <BMP280_calc_values+0x5a0>)
 8001556:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800155a:	f7ff f97f 	bl	800085c <__aeabi_ddiv>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	4b6e      	ldr	r3, [pc, #440]	; (8001724 <BMP280_calc_values+0x5a4>)
 800156c:	f7fe fe96 	bl	800029c <__adddf3>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4614      	mov	r4, r2
 8001576:	461d      	mov	r5, r3
 8001578:	4b6b      	ldr	r3, [pc, #428]	; (8001728 <BMP280_calc_values+0x5a8>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ffc9 	bl	8000514 <__aeabi_ui2d>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4620      	mov	r0, r4
 8001588:	4629      	mov	r1, r5
 800158a:	f7ff f83d 	bl	8000608 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
volatile	double p=1048576.0-(double)pressure_raw;
 8001596:	4b65      	ldr	r3, [pc, #404]	; (800172c <BMP280_calc_values+0x5ac>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ffca 	bl	8000534 <__aeabi_i2d>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	f04f 0000 	mov.w	r0, #0
 80015a8:	4961      	ldr	r1, [pc, #388]	; (8001730 <BMP280_calc_values+0x5b0>)
 80015aa:	f7fe fe75 	bl	8000298 <__aeabi_dsub>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	e9c7 2300 	strd	r2, r3, [r7]
	p=(p-(var2/4096.0))*6250.0/var1;
 80015b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	4b5d      	ldr	r3, [pc, #372]	; (8001734 <BMP280_calc_values+0x5b4>)
 80015c0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80015c4:	f7ff f94a 	bl	800085c <__aeabi_ddiv>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4620      	mov	r0, r4
 80015ce:	4629      	mov	r1, r5
 80015d0:	f7fe fe62 	bl	8000298 <__aeabi_dsub>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	a34e      	add	r3, pc, #312	; (adr r3, 8001718 <BMP280_calc_values+0x598>)
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	f7ff f811 	bl	8000608 <__aeabi_dmul>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015f2:	f7ff f933 	bl	800085c <__aeabi_ddiv>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	e9c7 2300 	strd	r2, r3, [r7]
	var1=((double)Dig_P9)*p*p/2147483648.0;
 80015fe:	4b4e      	ldr	r3, [pc, #312]	; (8001738 <BMP280_calc_values+0x5b8>)
 8001600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ff95 	bl	8000534 <__aeabi_i2d>
 800160a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800160e:	f7fe fffb 	bl	8000608 <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800161e:	f7fe fff3 	bl	8000608 <__aeabi_dmul>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	4b43      	ldr	r3, [pc, #268]	; (800173c <BMP280_calc_values+0x5bc>)
 8001630:	f7ff f914 	bl	800085c <__aeabi_ddiv>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var2=p*((double)Dig_P8)/32768.0;
 800163c:	4b40      	ldr	r3, [pc, #256]	; (8001740 <BMP280_calc_values+0x5c0>)
 800163e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ff76 	bl	8000534 <__aeabi_i2d>
 8001648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800164c:	f7fe ffdc 	bl	8000608 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	4b30      	ldr	r3, [pc, #192]	; (8001720 <BMP280_calc_values+0x5a0>)
 800165e:	f7ff f8fd 	bl	800085c <__aeabi_ddiv>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	p=p+(var1+var2+((double)Dig_P7))/16.0;
 800166a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800166e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001672:	f7fe fe13 	bl	800029c <__adddf3>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4614      	mov	r4, r2
 800167c:	461d      	mov	r5, r3
 800167e:	4b31      	ldr	r3, [pc, #196]	; (8001744 <BMP280_calc_values+0x5c4>)
 8001680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe ff55 	bl	8000534 <__aeabi_i2d>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4620      	mov	r0, r4
 8001690:	4629      	mov	r1, r5
 8001692:	f7fe fe03 	bl	800029c <__adddf3>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	4b29      	ldr	r3, [pc, #164]	; (8001748 <BMP280_calc_values+0x5c8>)
 80016a4:	f7ff f8da 	bl	800085c <__aeabi_ddiv>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016b4:	f7fe fdf2 	bl	800029c <__adddf3>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	e9c7 2300 	strd	r2, r3, [r7]

	temperature=T;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	4a22      	ldr	r2, [pc, #136]	; (800174c <BMP280_calc_values+0x5cc>)
 80016c4:	6013      	str	r3, [r2, #0]
	pressure=p;
 80016c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	f7ff fa73 	bl	8000bb8 <__aeabi_d2f>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4a1e      	ldr	r2, [pc, #120]	; (8001750 <BMP280_calc_values+0x5d0>)
 80016d6:	6013      	str	r3, [r2, #0]
	altitude=44330.0f*(1-powf(pressure/101325.0f,1.0f/5.255f));//altitude=((powf(101325.0/pressure, 1/5.257f)-1)*(temperature+273.15f))/0.0065f;
 80016d8:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <BMP280_calc_values+0x5d0>)
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001754 <BMP280_calc_values+0x5d4>
 80016e2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016e6:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8001758 <BMP280_calc_values+0x5d8>
 80016ea:	eeb0 0a47 	vmov.f32	s0, s14
 80016ee:	f003 fe43 	bl	8005378 <powf>
 80016f2:	eef0 7a40 	vmov.f32	s15, s0
 80016f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016fe:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800175c <BMP280_calc_values+0x5dc>
 8001702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001706:	4b16      	ldr	r3, [pc, #88]	; (8001760 <BMP280_calc_values+0x5e0>)
 8001708:	edc3 7a00 	vstr	s15, [r3]
}
 800170c:	bf00      	nop
 800170e:	3748      	adds	r7, #72	; 0x48
 8001710:	46bd      	mov	sp, r7
 8001712:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001716:	bf00      	nop
 8001718:	00000000 	.word	0x00000000
 800171c:	40b86a00 	.word	0x40b86a00
 8001720:	40e00000 	.word	0x40e00000
 8001724:	3ff00000 	.word	0x3ff00000
 8001728:	200000ca 	.word	0x200000ca
 800172c:	200000c4 	.word	0x200000c4
 8001730:	41300000 	.word	0x41300000
 8001734:	40b00000 	.word	0x40b00000
 8001738:	200000de 	.word	0x200000de
 800173c:	41e00000 	.word	0x41e00000
 8001740:	200000dc 	.word	0x200000dc
 8001744:	200000da 	.word	0x200000da
 8001748:	40300000 	.word	0x40300000
 800174c:	200000e0 	.word	0x200000e0
 8001750:	200000e4 	.word	0x200000e4
 8001754:	47c5e680 	.word	0x47c5e680
 8001758:	3e42dcae 	.word	0x3e42dcae
 800175c:	472d2a00 	.word	0x472d2a00
 8001760:	200000e8 	.word	0x200000e8

08001764 <reverse>:
	 else 	return 0;
}

// reverses a string 'str' of length 'len'
void reverse(char *str, int len)
{
 8001764:	b480      	push	{r7}
 8001766:	b087      	sub	sp, #28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	3b01      	subs	r3, #1
 8001776:	613b      	str	r3, [r7, #16]
    while (i<j)
 8001778:	e018      	b.n	80017ac <reverse+0x48>
    {
        temp = str[i];
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	4413      	add	r3, r2
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	441a      	add	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	440b      	add	r3, r1
 8001790:	7812      	ldrb	r2, [r2, #0]
 8001792:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	701a      	strb	r2, [r3, #0]
        i++; j--;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	3301      	adds	r3, #1
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	613b      	str	r3, [r7, #16]
    while (i<j)
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbe2      	blt.n	800177a <reverse+0x16>
    }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	371c      	adds	r7, #28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <intToStr>:

 // Converts a given integer x to string str[].  d is the number
 // of digits required in output. If d is more than the number
 // of digits in x, then 0s are added at the beginning.
int intToStr(int x, char str[], int d)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
    int i = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
    while (x)
 80017d4:	e01d      	b.n	8001812 <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <intToStr+0x8c>)
 80017da:	fb83 1302 	smull	r1, r3, r3, r2
 80017de:	1099      	asrs	r1, r3, #2
 80017e0:	17d3      	asrs	r3, r2, #31
 80017e2:	1ac9      	subs	r1, r1, r3
 80017e4:	460b      	mov	r3, r1
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	1ad1      	subs	r1, r2, r3
 80017ee:	b2ca      	uxtb	r2, r1
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	1c59      	adds	r1, r3, #1
 80017f4:	6179      	str	r1, [r7, #20]
 80017f6:	4619      	mov	r1, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	440b      	add	r3, r1
 80017fc:	3230      	adds	r2, #48	; 0x30
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	701a      	strb	r2, [r3, #0]
        x = x/10;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4a12      	ldr	r2, [pc, #72]	; (8001850 <intToStr+0x8c>)
 8001806:	fb82 1203 	smull	r1, r2, r2, r3
 800180a:	1092      	asrs	r2, r2, #2
 800180c:	17db      	asrs	r3, r3, #31
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	60fb      	str	r3, [r7, #12]
    while (x)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1de      	bne.n	80017d6 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8001818:	e007      	b.n	800182a <intToStr+0x66>
        str[i++] = '0';
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	617a      	str	r2, [r7, #20]
 8001820:	461a      	mov	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	4413      	add	r3, r2
 8001826:	2230      	movs	r2, #48	; 0x30
 8001828:	701a      	strb	r2, [r3, #0]
    while (i < d)
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	429a      	cmp	r2, r3
 8001830:	dbf3      	blt.n	800181a <intToStr+0x56>

    reverse(str, i);
 8001832:	6979      	ldr	r1, [r7, #20]
 8001834:	68b8      	ldr	r0, [r7, #8]
 8001836:	f7ff ff95 	bl	8001764 <reverse>
    str[i] = '\0';
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	4413      	add	r3, r2
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
    return i;
 8001844:	697b      	ldr	r3, [r7, #20]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	66666667 	.word	0x66666667
 8001854:	00000000 	.word	0x00000000

08001858 <ftoa>:

// Converts a floating point number to string.
void ftoa(float n, char *res, int afterpoint)
{
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b090      	sub	sp, #64	; 0x40
 800185c:	af00      	add	r7, sp, #0
 800185e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001862:	60b8      	str	r0, [r7, #8]
 8001864:	6079      	str	r1, [r7, #4]
	unsigned char minus_flag = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(n<0)
 800186c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001870:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001878:	d508      	bpl.n	800188c <ftoa+0x34>
	{
		minus_flag = 1;
 800187a:	2301      	movs	r3, #1
 800187c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		n = -n;
 8001880:	edd7 7a03 	vldr	s15, [r7, #12]
 8001884:	eef1 7a67 	vneg.f32	s15, s15
 8001888:	edc7 7a03 	vstr	s15, [r7, #12]
	}

    // Extract integer part
    int ipart = (int)n;
 800188c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001894:	ee17 3a90 	vmov	r3, s15
 8001898:	63bb      	str	r3, [r7, #56]	; 0x38

    // Extract floating part
    float fpart = n - (float)ipart;
 800189a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800189c:	ee07 3a90 	vmov	s15, r3
 80018a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80018a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ac:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	68b9      	ldr	r1, [r7, #8]
 80018b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80018b6:	f7ff ff85 	bl	80017c4 <intToStr>
 80018ba:	6338      	str	r0, [r7, #48]	; 0x30

    // check for display option after point
    if (afterpoint != 0)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d030      	beq.n	8001924 <ftoa+0xcc>
    {
        res[i] = '.';  // add dot
 80018c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	4413      	add	r3, r2
 80018c8:	222e      	movs	r2, #46	; 0x2e
 80018ca:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 80018cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80018ce:	f7fe fe43 	bl	8000558 <__aeabi_f2d>
 80018d2:	4604      	mov	r4, r0
 80018d4:	460d      	mov	r5, r1
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7fe fe2c 	bl	8000534 <__aeabi_i2d>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	ec43 2b11 	vmov	d1, r2, r3
 80018e4:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 80019e0 <ftoa+0x188>
 80018e8:	f003 fcd6 	bl	8005298 <pow>
 80018ec:	ec53 2b10 	vmov	r2, r3, d0
 80018f0:	4620      	mov	r0, r4
 80018f2:	4629      	mov	r1, r5
 80018f4:	f7fe fe88 	bl	8000608 <__aeabi_dmul>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	f7ff f95a 	bl	8000bb8 <__aeabi_d2f>
 8001904:	4603      	mov	r3, r0
 8001906:	637b      	str	r3, [r7, #52]	; 0x34

        intToStr((int)fpart, res + i + 1, afterpoint);
 8001908:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800190c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001912:	3301      	adds	r3, #1
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	4413      	add	r3, r2
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	4619      	mov	r1, r3
 800191c:	ee17 0a90 	vmov	r0, s15
 8001920:	f7ff ff50 	bl	80017c4 <intToStr>
    }

    char string[30];
    if(minus_flag==1)
 8001924:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001928:	2b01      	cmp	r3, #1
 800192a:	d132      	bne.n	8001992 <ftoa+0x13a>
    {
        memset(string, 0, 30);
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	221e      	movs	r2, #30
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f003 f831 	bl	800499c <memset>
        string[0]='-';
 800193a:	232d      	movs	r3, #45	; 0x2d
 800193c:	743b      	strb	r3, [r7, #16]
        if(n<1.0f)
 800193e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001942:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800194a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194e:	d509      	bpl.n	8001964 <ftoa+0x10c>
        {
        	string[1]='0';
 8001950:	2330      	movs	r3, #48	; 0x30
 8001952:	747b      	strb	r3, [r7, #17]
        	strcpy(&string[2], res);
 8001954:	f107 0310 	add.w	r3, r7, #16
 8001958:	3302      	adds	r3, #2
 800195a:	68b9      	ldr	r1, [r7, #8]
 800195c:	4618      	mov	r0, r3
 800195e:	f003 f845 	bl	80049ec <strcpy>
 8001962:	e006      	b.n	8001972 <ftoa+0x11a>
        }else
        	strcpy(&string[1], res);
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	3301      	adds	r3, #1
 800196a:	68b9      	ldr	r1, [r7, #8]
 800196c:	4618      	mov	r0, r3
 800196e:	f003 f83d 	bl	80049ec <strcpy>

        memset(res, 0, strlen(res));
 8001972:	68b8      	ldr	r0, [r7, #8]
 8001974:	f7fe fc34 	bl	80001e0 <strlen>
 8001978:	4603      	mov	r3, r0
 800197a:	461a      	mov	r2, r3
 800197c:	2100      	movs	r1, #0
 800197e:	68b8      	ldr	r0, [r7, #8]
 8001980:	f003 f80c 	bl	800499c <memset>
        strcpy(res, string);
 8001984:	f107 0310 	add.w	r3, r7, #16
 8001988:	4619      	mov	r1, r3
 800198a:	68b8      	ldr	r0, [r7, #8]
 800198c:	f003 f82e 	bl	80049ec <strcpy>
		string[0]='0';
		strcpy(&string[1], res);
		memset(res, 0, strlen(res));
		strcpy(res, string);
	}
}
 8001990:	e021      	b.n	80019d6 <ftoa+0x17e>
    if(n<1.0f)
 8001992:	edd7 7a03 	vldr	s15, [r7, #12]
 8001996:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800199a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a2:	d400      	bmi.n	80019a6 <ftoa+0x14e>
}
 80019a4:	e017      	b.n	80019d6 <ftoa+0x17e>
		string[0]='0';
 80019a6:	2330      	movs	r3, #48	; 0x30
 80019a8:	743b      	strb	r3, [r7, #16]
		strcpy(&string[1], res);
 80019aa:	f107 0310 	add.w	r3, r7, #16
 80019ae:	3301      	adds	r3, #1
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f003 f81a 	bl	80049ec <strcpy>
		memset(res, 0, strlen(res));
 80019b8:	68b8      	ldr	r0, [r7, #8]
 80019ba:	f7fe fc11 	bl	80001e0 <strlen>
 80019be:	4603      	mov	r3, r0
 80019c0:	461a      	mov	r2, r3
 80019c2:	2100      	movs	r1, #0
 80019c4:	68b8      	ldr	r0, [r7, #8]
 80019c6:	f002 ffe9 	bl	800499c <memset>
		strcpy(res, string);
 80019ca:	f107 0310 	add.w	r3, r7, #16
 80019ce:	4619      	mov	r1, r3
 80019d0:	68b8      	ldr	r0, [r7, #8]
 80019d2:	f003 f80b 	bl	80049ec <strcpy>
}
 80019d6:	bf00      	nop
 80019d8:	3740      	adds	r7, #64	; 0x40
 80019da:	46bd      	mov	sp, r7
 80019dc:	bdb0      	pop	{r4, r5, r7, pc}
 80019de:	bf00      	nop
 80019e0:	00000000 	.word	0x00000000
 80019e4:	40240000 	.word	0x40240000

080019e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	ed2d 8b02 	vpush	{d8}
 80019ee:	b0b4      	sub	sp, #208	; 0xd0
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f2:	f000 fbb3 	bl	800215c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f6:	f000 f969 	bl	8001ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019fa:	f000 fa1d 	bl	8001e38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019fe:	f000 f9f1 	bl	8001de4 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001a02:	f000 f9c1 	bl	8001d88 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  sprintf((char*)txt1, "<<<<< BME280 READER INIT .. >>>>>");
 8001a06:	499d      	ldr	r1, [pc, #628]	; (8001c7c <main+0x294>)
 8001a08:	489d      	ldr	r0, [pc, #628]	; (8001c80 <main+0x298>)
 8001a0a:	f002 ffcf 	bl	80049ac <siprintf>
  HAL_UART_Transmit(&huart2, txt1, strlen((char*)txt1), 0xffff);
 8001a0e:	489c      	ldr	r0, [pc, #624]	; (8001c80 <main+0x298>)
 8001a10:	f7fe fbe6 	bl	80001e0 <strlen>
 8001a14:	4603      	mov	r3, r0
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a1c:	4998      	ldr	r1, [pc, #608]	; (8001c80 <main+0x298>)
 8001a1e:	4899      	ldr	r0, [pc, #612]	; (8001c84 <main+0x29c>)
 8001a20:	f002 fc1d 	bl	800425e <HAL_UART_Transmit>

	for(uint8_t address=0; address <128;address++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 8001a2a:	e029      	b.n	8001a80 <main+0x98>
	{
	  ack = HAL_I2C_IsDeviceReady(&hi2c2, address<<1, 3, 6);
 8001a2c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	b299      	uxth	r1, r3
 8001a36:	2306      	movs	r3, #6
 8001a38:	2203      	movs	r2, #3
 8001a3a:	4893      	ldr	r0, [pc, #588]	; (8001c88 <main+0x2a0>)
 8001a3c:	f001 fb0e 	bl	800305c <HAL_I2C_IsDeviceReady>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b91      	ldr	r3, [pc, #580]	; (8001c8c <main+0x2a4>)
 8001a46:	701a      	strb	r2, [r3, #0]
	  if(ack == HAL_OK)
 8001a48:	4b90      	ldr	r3, [pc, #576]	; (8001c8c <main+0x2a4>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d112      	bne.n	8001a76 <main+0x8e>
	  {
		  sprintf((char*)txt1, " I2C device address found : 0x%X\n\r", address<<1 );
 8001a50:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	461a      	mov	r2, r3
 8001a58:	498d      	ldr	r1, [pc, #564]	; (8001c90 <main+0x2a8>)
 8001a5a:	4889      	ldr	r0, [pc, #548]	; (8001c80 <main+0x298>)
 8001a5c:	f002 ffa6 	bl	80049ac <siprintf>
		  HAL_UART_Transmit(&huart2, txt1, strlen((char*)txt1), 0xffff);
 8001a60:	4887      	ldr	r0, [pc, #540]	; (8001c80 <main+0x298>)
 8001a62:	f7fe fbbd 	bl	80001e0 <strlen>
 8001a66:	4603      	mov	r3, r0
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a6e:	4984      	ldr	r1, [pc, #528]	; (8001c80 <main+0x298>)
 8001a70:	4884      	ldr	r0, [pc, #528]	; (8001c84 <main+0x29c>)
 8001a72:	f002 fbf4 	bl	800425e <HAL_UART_Transmit>
	for(uint8_t address=0; address <128;address++)
 8001a76:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 8001a80:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	dad1      	bge.n	8001a2c <main+0x44>
	  }
	}

  sprintf((char*)txt1, "<<<<< BME280 Configurations .. >>>>>");
 8001a88:	4982      	ldr	r1, [pc, #520]	; (8001c94 <main+0x2ac>)
 8001a8a:	487d      	ldr	r0, [pc, #500]	; (8001c80 <main+0x298>)
 8001a8c:	f002 ff8e 	bl	80049ac <siprintf>
  HAL_UART_Transmit(&huart2, txt1, strlen((char*)txt1), 0xffff);
 8001a90:	487b      	ldr	r0, [pc, #492]	; (8001c80 <main+0x298>)
 8001a92:	f7fe fba5 	bl	80001e0 <strlen>
 8001a96:	4603      	mov	r3, r0
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a9e:	4978      	ldr	r1, [pc, #480]	; (8001c80 <main+0x298>)
 8001aa0:	4878      	ldr	r0, [pc, #480]	; (8001c84 <main+0x29c>)
 8001aa2:	f002 fbdc 	bl	800425e <HAL_UART_Transmit>

  BMP280_init();
 8001aa6:	f7ff fb59 	bl	800115c <BMP280_init>

  char string[200];
        	while(1)
        	{
        	    BMP280_calc_values();
 8001aaa:	f7ff fb69 	bl	8001180 <BMP280_calc_values>

        	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8001aae:	2101      	movs	r1, #1
 8001ab0:	4879      	ldr	r0, [pc, #484]	; (8001c98 <main+0x2b0>)
 8001ab2:	f000 fe53 	bl	800275c <HAL_GPIO_ReadPin>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <main+0xdc>
        	  init_height=altitude;
 8001abc:	4b77      	ldr	r3, [pc, #476]	; (8001c9c <main+0x2b4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a77      	ldr	r2, [pc, #476]	; (8001ca0 <main+0x2b8>)
 8001ac2:	6013      	str	r3, [r2, #0]
        	  memset(&string, 0, strlen(string));
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fb8a 	bl	80001e0 <strlen>
 8001acc:	4602      	mov	r2, r0
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f002 ff62 	bl	800499c <memset>

        	  strcat(string, "Temperature:: ");
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fb80 	bl	80001e0 <strlen>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	4413      	add	r3, r2
 8001ae8:	4a6e      	ldr	r2, [pc, #440]	; (8001ca4 <main+0x2bc>)
 8001aea:	461c      	mov	r4, r3
 8001aec:	4613      	mov	r3, r2
 8001aee:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001af0:	6020      	str	r0, [r4, #0]
 8001af2:	6061      	str	r1, [r4, #4]
 8001af4:	60a2      	str	r2, [r4, #8]
 8001af6:	881a      	ldrh	r2, [r3, #0]
 8001af8:	789b      	ldrb	r3, [r3, #2]
 8001afa:	81a2      	strh	r2, [r4, #12]
 8001afc:	73a3      	strb	r3, [r4, #14]
        	  ftoa(temperature, &string[strlen(string)], 3);
 8001afe:	4b6a      	ldr	r3, [pc, #424]	; (8001ca8 <main+0x2c0>)
 8001b00:	ed93 8a00 	vldr	s16, [r3]
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fb6a 	bl	80001e0 <strlen>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	4413      	add	r3, r2
 8001b12:	2103      	movs	r1, #3
 8001b14:	4618      	mov	r0, r3
 8001b16:	eeb0 0a48 	vmov.f32	s0, s16
 8001b1a:	f7ff fe9d 	bl	8001858 <ftoa>
        	  strcat(string, " C\n");
 8001b1e:	1d3b      	adds	r3, r7, #4
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fb5d 	bl	80001e0 <strlen>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a5f      	ldr	r2, [pc, #380]	; (8001cac <main+0x2c4>)
 8001b30:	6810      	ldr	r0, [r2, #0]
 8001b32:	6018      	str	r0, [r3, #0]

        	  strcat(string, "Pressure: ");
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fb52 	bl	80001e0 <strlen>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	4413      	add	r3, r2
 8001b44:	495a      	ldr	r1, [pc, #360]	; (8001cb0 <main+0x2c8>)
 8001b46:	461a      	mov	r2, r3
 8001b48:	460b      	mov	r3, r1
 8001b4a:	cb03      	ldmia	r3!, {r0, r1}
 8001b4c:	6010      	str	r0, [r2, #0]
 8001b4e:	6051      	str	r1, [r2, #4]
 8001b50:	8819      	ldrh	r1, [r3, #0]
 8001b52:	789b      	ldrb	r3, [r3, #2]
 8001b54:	8111      	strh	r1, [r2, #8]
 8001b56:	7293      	strb	r3, [r2, #10]
        	  ftoa(pressure, &string[strlen(string)], 3);
 8001b58:	4b56      	ldr	r3, [pc, #344]	; (8001cb4 <main+0x2cc>)
 8001b5a:	ed93 8a00 	vldr	s16, [r3]
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fb3d 	bl	80001e0 <strlen>
 8001b66:	4602      	mov	r2, r0
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	4413      	add	r3, r2
 8001b6c:	2103      	movs	r1, #3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	eeb0 0a48 	vmov.f32	s0, s16
 8001b74:	f7ff fe70 	bl	8001858 <ftoa>
        	  strcat(string, " Pa\n");
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fb30 	bl	80001e0 <strlen>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461a      	mov	r2, r3
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	4413      	add	r3, r2
 8001b88:	4a4b      	ldr	r2, [pc, #300]	; (8001cb8 <main+0x2d0>)
 8001b8a:	6810      	ldr	r0, [r2, #0]
 8001b8c:	6018      	str	r0, [r3, #0]
 8001b8e:	7912      	ldrb	r2, [r2, #4]
 8001b90:	711a      	strb	r2, [r3, #4]

        	  strcat(string, "Altitude: ");
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fb23 	bl	80001e0 <strlen>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4946      	ldr	r1, [pc, #280]	; (8001cbc <main+0x2d4>)
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	cb03      	ldmia	r3!, {r0, r1}
 8001baa:	6010      	str	r0, [r2, #0]
 8001bac:	6051      	str	r1, [r2, #4]
 8001bae:	8819      	ldrh	r1, [r3, #0]
 8001bb0:	789b      	ldrb	r3, [r3, #2]
 8001bb2:	8111      	strh	r1, [r2, #8]
 8001bb4:	7293      	strb	r3, [r2, #10]
        	  ftoa(altitude, &string[strlen(string)], 3);
 8001bb6:	4b39      	ldr	r3, [pc, #228]	; (8001c9c <main+0x2b4>)
 8001bb8:	ed93 8a00 	vldr	s16, [r3]
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fb0e 	bl	80001e0 <strlen>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	4413      	add	r3, r2
 8001bca:	2103      	movs	r1, #3
 8001bcc:	4618      	mov	r0, r3
 8001bce:	eeb0 0a48 	vmov.f32	s0, s16
 8001bd2:	f7ff fe41 	bl	8001858 <ftoa>
        	  strcat(string, " m\n");
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fb01 	bl	80001e0 <strlen>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461a      	mov	r2, r3
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	4413      	add	r3, r2
 8001be6:	4a36      	ldr	r2, [pc, #216]	; (8001cc0 <main+0x2d8>)
 8001be8:	6810      	ldr	r0, [r2, #0]
 8001bea:	6018      	str	r0, [r3, #0]

        	  strcat(string, "Relative altitude:: ");
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe faf6 	bl	80001e0 <strlen>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4a31      	ldr	r2, [pc, #196]	; (8001cc4 <main+0x2dc>)
 8001bfe:	461d      	mov	r5, r3
 8001c00:	4614      	mov	r4, r2
 8001c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c04:	6028      	str	r0, [r5, #0]
 8001c06:	6069      	str	r1, [r5, #4]
 8001c08:	60aa      	str	r2, [r5, #8]
 8001c0a:	60eb      	str	r3, [r5, #12]
 8001c0c:	6820      	ldr	r0, [r4, #0]
 8001c0e:	6128      	str	r0, [r5, #16]
 8001c10:	7923      	ldrb	r3, [r4, #4]
 8001c12:	752b      	strb	r3, [r5, #20]
        	  ftoa(altitude-init_height, &string[strlen(string)], 3);
 8001c14:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <main+0x2b4>)
 8001c16:	ed93 7a00 	vldr	s14, [r3]
 8001c1a:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <main+0x2b8>)
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	ee37 8a67 	vsub.f32	s16, s14, s15
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fada 	bl	80001e0 <strlen>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	4413      	add	r3, r2
 8001c32:	2103      	movs	r1, #3
 8001c34:	4618      	mov	r0, r3
 8001c36:	eeb0 0a48 	vmov.f32	s0, s16
 8001c3a:	f7ff fe0d 	bl	8001858 <ftoa>
        	  strcat(string, " m\n\n\n");
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe facd 	bl	80001e0 <strlen>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	4413      	add	r3, r2
 8001c4e:	4a1e      	ldr	r2, [pc, #120]	; (8001cc8 <main+0x2e0>)
 8001c50:	6810      	ldr	r0, [r2, #0]
 8001c52:	6018      	str	r0, [r3, #0]
 8001c54:	8892      	ldrh	r2, [r2, #4]
 8001c56:	809a      	strh	r2, [r3, #4]

        	  HAL_UART_Transmit(&huart2, string, strlen((char*)string), 0xffff);
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fac0 	bl	80001e0 <strlen>
 8001c60:	4603      	mov	r3, r0
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	1d39      	adds	r1, r7, #4
 8001c66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c6a:	4806      	ldr	r0, [pc, #24]	; (8001c84 <main+0x29c>)
 8001c6c:	f002 faf7 	bl	800425e <HAL_UART_Transmit>
        	  HAL_Delay(1500);
 8001c70:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001c74:	f000 fae4 	bl	8002240 <HAL_Delay>
        	    BMP280_calc_values();
 8001c78:	e717      	b.n	8001aaa <main+0xc2>
 8001c7a:	bf00      	nop
 8001c7c:	08006888 	.word	0x08006888
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000144 	.word	0x20000144
 8001c88:	200000f0 	.word	0x200000f0
 8001c8c:	20000188 	.word	0x20000188
 8001c90:	080068ac 	.word	0x080068ac
 8001c94:	080068d0 	.word	0x080068d0
 8001c98:	40020000 	.word	0x40020000
 8001c9c:	200000e8 	.word	0x200000e8
 8001ca0:	200000ec 	.word	0x200000ec
 8001ca4:	080068f8 	.word	0x080068f8
 8001ca8:	200000e0 	.word	0x200000e0
 8001cac:	08006908 	.word	0x08006908
 8001cb0:	0800690c 	.word	0x0800690c
 8001cb4:	200000e4 	.word	0x200000e4
 8001cb8:	08006918 	.word	0x08006918
 8001cbc:	08006920 	.word	0x08006920
 8001cc0:	0800692c 	.word	0x0800692c
 8001cc4:	08006930 	.word	0x08006930
 8001cc8:	08006948 	.word	0x08006948

08001ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b094      	sub	sp, #80	; 0x50
 8001cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cd2:	f107 0320 	add.w	r3, r7, #32
 8001cd6:	2230      	movs	r2, #48	; 0x30
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f002 fe5e 	bl	800499c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <SystemClock_Config+0xb4>)
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	4a21      	ldr	r2, [pc, #132]	; (8001d80 <SystemClock_Config+0xb4>)
 8001cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8001d00:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <SystemClock_Config+0xb4>)
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <SystemClock_Config+0xb8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1b      	ldr	r2, [pc, #108]	; (8001d84 <SystemClock_Config+0xb8>)
 8001d16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <SystemClock_Config+0xb8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d30:	2310      	movs	r3, #16
 8001d32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d38:	f107 0320 	add.w	r3, r7, #32
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f001 fde9 	bl	8003914 <HAL_RCC_OscConfig>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001d48:	f000 f89e 	bl	8001e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d4c:	230f      	movs	r3, #15
 8001d4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d50:	2300      	movs	r3, #0
 8001d52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f002 f84c 	bl	8003e04 <HAL_RCC_ClockConfig>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001d72:	f000 f889 	bl	8001e88 <Error_Handler>
  }
}
 8001d76:	bf00      	nop
 8001d78:	3750      	adds	r7, #80	; 0x50
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40007000 	.word	0x40007000

08001d88 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <MX_I2C2_Init+0x50>)
 8001d8e:	4a13      	ldr	r2, [pc, #76]	; (8001ddc <MX_I2C2_Init+0x54>)
 8001d90:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_I2C2_Init+0x50>)
 8001d94:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <MX_I2C2_Init+0x58>)
 8001d96:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MX_I2C2_Init+0x50>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <MX_I2C2_Init+0x50>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <MX_I2C2_Init+0x50>)
 8001da6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001daa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <MX_I2C2_Init+0x50>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_I2C2_Init+0x50>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001db8:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <MX_I2C2_Init+0x50>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <MX_I2C2_Init+0x50>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001dc4:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <MX_I2C2_Init+0x50>)
 8001dc6:	f000 fce1 	bl	800278c <HAL_I2C_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001dd0:	f000 f85a 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	200000f0 	.word	0x200000f0
 8001ddc:	40005800 	.word	0x40005800
 8001de0:	000186a0 	.word	0x000186a0

08001de4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <MX_USART2_UART_Init+0x4c>)
 8001dea:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <MX_USART2_UART_Init+0x50>)
 8001dec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <MX_USART2_UART_Init+0x4c>)
 8001df0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001df4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <MX_USART2_UART_Init+0x4c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <MX_USART2_UART_Init+0x4c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <MX_USART2_UART_Init+0x4c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <MX_USART2_UART_Init+0x4c>)
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <MX_USART2_UART_Init+0x4c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <MX_USART2_UART_Init+0x4c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e1a:	4805      	ldr	r0, [pc, #20]	; (8001e30 <MX_USART2_UART_Init+0x4c>)
 8001e1c:	f002 f9d2 	bl	80041c4 <HAL_UART_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e26:	f000 f82f 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000144 	.word	0x20000144
 8001e34:	40004400 	.word	0x40004400

08001e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <MX_GPIO_Init+0x4c>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a0f      	ldr	r2, [pc, #60]	; (8001e84 <MX_GPIO_Init+0x4c>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <MX_GPIO_Init+0x4c>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	603b      	str	r3, [r7, #0]
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <MX_GPIO_Init+0x4c>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a08      	ldr	r2, [pc, #32]	; (8001e84 <MX_GPIO_Init+0x4c>)
 8001e64:	f043 0302 	orr.w	r3, r3, #2
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <MX_GPIO_Init+0x4c>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]

}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800

08001e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e8c:	b672      	cpsid	i
}
 8001e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <Error_Handler+0x8>
	...

08001e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	4a0f      	ldr	r2, [pc, #60]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	603b      	str	r3, [r7, #0]
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_MspInit+0x4c>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800

08001ee4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a21      	ldr	r2, [pc, #132]	; (8001f88 <HAL_I2C_MspInit+0xa4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d13c      	bne.n	8001f80 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <HAL_I2C_MspInit+0xa8>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a1f      	ldr	r2, [pc, #124]	; (8001f8c <HAL_I2C_MspInit+0xa8>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <HAL_I2C_MspInit+0xa8>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f28:	2312      	movs	r3, #18
 8001f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f34:	2304      	movs	r3, #4
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4814      	ldr	r0, [pc, #80]	; (8001f90 <HAL_I2C_MspInit+0xac>)
 8001f40:	f000 fa88 	bl	8002454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f44:	2308      	movs	r3, #8
 8001f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f48:	2312      	movs	r3, #18
 8001f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f50:	2303      	movs	r3, #3
 8001f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001f54:	2309      	movs	r3, #9
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	480c      	ldr	r0, [pc, #48]	; (8001f90 <HAL_I2C_MspInit+0xac>)
 8001f60:	f000 fa78 	bl	8002454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <HAL_I2C_MspInit+0xa8>)
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <HAL_I2C_MspInit+0xa8>)
 8001f6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f72:	6413      	str	r3, [r2, #64]	; 0x40
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_I2C_MspInit+0xa8>)
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f80:	bf00      	nop
 8001f82:	3728      	adds	r7, #40	; 0x28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40005800 	.word	0x40005800
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020400 	.word	0x40020400

08001f94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	; 0x28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a19      	ldr	r2, [pc, #100]	; (8002018 <HAL_UART_MspInit+0x84>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d12b      	bne.n	800200e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	4b18      	ldr	r3, [pc, #96]	; (800201c <HAL_UART_MspInit+0x88>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	4a17      	ldr	r2, [pc, #92]	; (800201c <HAL_UART_MspInit+0x88>)
 8001fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <HAL_UART_MspInit+0x88>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <HAL_UART_MspInit+0x88>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a10      	ldr	r2, [pc, #64]	; (800201c <HAL_UART_MspInit+0x88>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <HAL_UART_MspInit+0x88>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fee:	230c      	movs	r3, #12
 8001ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ffe:	2307      	movs	r3, #7
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002002:	f107 0314 	add.w	r3, r7, #20
 8002006:	4619      	mov	r1, r3
 8002008:	4805      	ldr	r0, [pc, #20]	; (8002020 <HAL_UART_MspInit+0x8c>)
 800200a:	f000 fa23 	bl	8002454 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800200e:	bf00      	nop
 8002010:	3728      	adds	r7, #40	; 0x28
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40004400 	.word	0x40004400
 800201c:	40023800 	.word	0x40023800
 8002020:	40020000 	.word	0x40020000

08002024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002028:	e7fe      	b.n	8002028 <NMI_Handler+0x4>

0800202a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800202e:	e7fe      	b.n	800202e <HardFault_Handler+0x4>

08002030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002034:	e7fe      	b.n	8002034 <MemManage_Handler+0x4>

08002036 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800203a:	e7fe      	b.n	800203a <BusFault_Handler+0x4>

0800203c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <UsageFault_Handler+0x4>

08002042 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002070:	f000 f8c6 	bl	8002200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}

08002078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002080:	4a14      	ldr	r2, [pc, #80]	; (80020d4 <_sbrk+0x5c>)
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <_sbrk+0x60>)
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800208c:	4b13      	ldr	r3, [pc, #76]	; (80020dc <_sbrk+0x64>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d102      	bne.n	800209a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <_sbrk+0x64>)
 8002096:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <_sbrk+0x68>)
 8002098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <_sbrk+0x64>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d207      	bcs.n	80020b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a8:	f002 fc4e 	bl	8004948 <__errno>
 80020ac:	4603      	mov	r3, r0
 80020ae:	220c      	movs	r2, #12
 80020b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295
 80020b6:	e009      	b.n	80020cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <_sbrk+0x64>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	4a05      	ldr	r2, [pc, #20]	; (80020dc <_sbrk+0x64>)
 80020c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ca:	68fb      	ldr	r3, [r7, #12]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20020000 	.word	0x20020000
 80020d8:	00000400 	.word	0x00000400
 80020dc:	2000018c 	.word	0x2000018c
 80020e0:	200001a8 	.word	0x200001a8

080020e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <SystemInit+0x20>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ee:	4a05      	ldr	r2, [pc, #20]	; (8002104 <SystemInit+0x20>)
 80020f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002140 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800210c:	480d      	ldr	r0, [pc, #52]	; (8002144 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800210e:	490e      	ldr	r1, [pc, #56]	; (8002148 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002110:	4a0e      	ldr	r2, [pc, #56]	; (800214c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002114:	e002      	b.n	800211c <LoopCopyDataInit>

08002116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211a:	3304      	adds	r3, #4

0800211c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800211c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002120:	d3f9      	bcc.n	8002116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002122:	4a0b      	ldr	r2, [pc, #44]	; (8002150 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002124:	4c0b      	ldr	r4, [pc, #44]	; (8002154 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002128:	e001      	b.n	800212e <LoopFillZerobss>

0800212a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800212c:	3204      	adds	r2, #4

0800212e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002130:	d3fb      	bcc.n	800212a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002132:	f7ff ffd7 	bl	80020e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002136:	f002 fc0d 	bl	8004954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800213a:	f7ff fc55 	bl	80019e8 <main>
  bx  lr    
 800213e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002140:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002148:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 800214c:	080069f8 	.word	0x080069f8
  ldr r2, =_sbss
 8002150:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8002154:	200001a4 	.word	0x200001a4

08002158 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002158:	e7fe      	b.n	8002158 <ADC_IRQHandler>
	...

0800215c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002160:	4b0e      	ldr	r3, [pc, #56]	; (800219c <HAL_Init+0x40>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0d      	ldr	r2, [pc, #52]	; (800219c <HAL_Init+0x40>)
 8002166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800216a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_Init+0x40>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0a      	ldr	r2, [pc, #40]	; (800219c <HAL_Init+0x40>)
 8002172:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002176:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_Init+0x40>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a07      	ldr	r2, [pc, #28]	; (800219c <HAL_Init+0x40>)
 800217e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002182:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002184:	2003      	movs	r0, #3
 8002186:	f000 f931 	bl	80023ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800218a:	200f      	movs	r0, #15
 800218c:	f000 f808 	bl	80021a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002190:	f7ff fe80 	bl	8001e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40023c00 	.word	0x40023c00

080021a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_InitTick+0x54>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_InitTick+0x58>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	4619      	mov	r1, r3
 80021b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 f93b 	bl	800243a <HAL_SYSTICK_Config>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00e      	b.n	80021ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b0f      	cmp	r3, #15
 80021d2:	d80a      	bhi.n	80021ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d4:	2200      	movs	r2, #0
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295
 80021dc:	f000 f911 	bl	8002402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e0:	4a06      	ldr	r2, [pc, #24]	; (80021fc <HAL_InitTick+0x5c>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	e000      	b.n	80021ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000034 	.word	0x20000034
 80021f8:	2000003c 	.word	0x2000003c
 80021fc:	20000038 	.word	0x20000038

08002200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_IncTick+0x20>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_IncTick+0x24>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4413      	add	r3, r2
 8002210:	4a04      	ldr	r2, [pc, #16]	; (8002224 <HAL_IncTick+0x24>)
 8002212:	6013      	str	r3, [r2, #0]
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	2000003c 	.word	0x2000003c
 8002224:	20000190 	.word	0x20000190

08002228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return uwTick;
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <HAL_GetTick+0x14>)
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20000190 	.word	0x20000190

08002240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002248:	f7ff ffee 	bl	8002228 <HAL_GetTick>
 800224c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002258:	d005      	beq.n	8002266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <HAL_Delay+0x44>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002266:	bf00      	nop
 8002268:	f7ff ffde 	bl	8002228 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	429a      	cmp	r2, r3
 8002276:	d8f7      	bhi.n	8002268 <HAL_Delay+0x28>
  {
  }
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	2000003c 	.word	0x2000003c

08002288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a4:	4013      	ands	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ba:	4a04      	ldr	r2, [pc, #16]	; (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	60d3      	str	r3, [r2, #12]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d4:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <__NVIC_GetPriorityGrouping+0x18>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	f003 0307 	and.w	r3, r3, #7
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	6039      	str	r1, [r7, #0]
 80022f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	db0a      	blt.n	8002316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	b2da      	uxtb	r2, r3
 8002304:	490c      	ldr	r1, [pc, #48]	; (8002338 <__NVIC_SetPriority+0x4c>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	0112      	lsls	r2, r2, #4
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	440b      	add	r3, r1
 8002310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002314:	e00a      	b.n	800232c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4908      	ldr	r1, [pc, #32]	; (800233c <__NVIC_SetPriority+0x50>)
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	3b04      	subs	r3, #4
 8002324:	0112      	lsls	r2, r2, #4
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	440b      	add	r3, r1
 800232a:	761a      	strb	r2, [r3, #24]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000e100 	.word	0xe000e100
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002340:	b480      	push	{r7}
 8002342:	b089      	sub	sp, #36	; 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f1c3 0307 	rsb	r3, r3, #7
 800235a:	2b04      	cmp	r3, #4
 800235c:	bf28      	it	cs
 800235e:	2304      	movcs	r3, #4
 8002360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3304      	adds	r3, #4
 8002366:	2b06      	cmp	r3, #6
 8002368:	d902      	bls.n	8002370 <NVIC_EncodePriority+0x30>
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3b03      	subs	r3, #3
 800236e:	e000      	b.n	8002372 <NVIC_EncodePriority+0x32>
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	f04f 32ff 	mov.w	r2, #4294967295
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43da      	mvns	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	401a      	ands	r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002388:	f04f 31ff 	mov.w	r1, #4294967295
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	43d9      	mvns	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	4313      	orrs	r3, r2
         );
}
 800239a:	4618      	mov	r0, r3
 800239c:	3724      	adds	r7, #36	; 0x24
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b8:	d301      	bcc.n	80023be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00f      	b.n	80023de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023be:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <SysTick_Config+0x40>)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c6:	210f      	movs	r1, #15
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f7ff ff8e 	bl	80022ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <SysTick_Config+0x40>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d6:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <SysTick_Config+0x40>)
 80023d8:	2207      	movs	r2, #7
 80023da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	e000e010 	.word	0xe000e010

080023ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff47 	bl	8002288 <__NVIC_SetPriorityGrouping>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002414:	f7ff ff5c 	bl	80022d0 <__NVIC_GetPriorityGrouping>
 8002418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	6978      	ldr	r0, [r7, #20]
 8002420:	f7ff ff8e 	bl	8002340 <NVIC_EncodePriority>
 8002424:	4602      	mov	r2, r0
 8002426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff5d 	bl	80022ec <__NVIC_SetPriority>
}
 8002432:	bf00      	nop
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ffb0 	bl	80023a8 <SysTick_Config>
 8002448:	4603      	mov	r3, r0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	e159      	b.n	8002724 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002470:	2201      	movs	r2, #1
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4013      	ands	r3, r2
 8002482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	429a      	cmp	r2, r3
 800248a:	f040 8148 	bne.w	800271e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b01      	cmp	r3, #1
 8002498:	d005      	beq.n	80024a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d130      	bne.n	8002508 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	2203      	movs	r2, #3
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024dc:	2201      	movs	r2, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 0201 	and.w	r2, r3, #1
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	2b03      	cmp	r3, #3
 8002512:	d017      	beq.n	8002544 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	2203      	movs	r2, #3
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d123      	bne.n	8002598 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	08da      	lsrs	r2, r3, #3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3208      	adds	r2, #8
 8002558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800255c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	220f      	movs	r2, #15
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	08da      	lsrs	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3208      	adds	r2, #8
 8002592:	69b9      	ldr	r1, [r7, #24]
 8002594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	2203      	movs	r2, #3
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0203 	and.w	r2, r3, #3
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80a2 	beq.w	800271e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	4b57      	ldr	r3, [pc, #348]	; (800273c <HAL_GPIO_Init+0x2e8>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	4a56      	ldr	r2, [pc, #344]	; (800273c <HAL_GPIO_Init+0x2e8>)
 80025e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ea:	4b54      	ldr	r3, [pc, #336]	; (800273c <HAL_GPIO_Init+0x2e8>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025f6:	4a52      	ldr	r2, [pc, #328]	; (8002740 <HAL_GPIO_Init+0x2ec>)
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	3302      	adds	r3, #2
 80025fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	220f      	movs	r2, #15
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a49      	ldr	r2, [pc, #292]	; (8002744 <HAL_GPIO_Init+0x2f0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d019      	beq.n	8002656 <HAL_GPIO_Init+0x202>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a48      	ldr	r2, [pc, #288]	; (8002748 <HAL_GPIO_Init+0x2f4>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d013      	beq.n	8002652 <HAL_GPIO_Init+0x1fe>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a47      	ldr	r2, [pc, #284]	; (800274c <HAL_GPIO_Init+0x2f8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00d      	beq.n	800264e <HAL_GPIO_Init+0x1fa>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a46      	ldr	r2, [pc, #280]	; (8002750 <HAL_GPIO_Init+0x2fc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d007      	beq.n	800264a <HAL_GPIO_Init+0x1f6>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a45      	ldr	r2, [pc, #276]	; (8002754 <HAL_GPIO_Init+0x300>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d101      	bne.n	8002646 <HAL_GPIO_Init+0x1f2>
 8002642:	2304      	movs	r3, #4
 8002644:	e008      	b.n	8002658 <HAL_GPIO_Init+0x204>
 8002646:	2307      	movs	r3, #7
 8002648:	e006      	b.n	8002658 <HAL_GPIO_Init+0x204>
 800264a:	2303      	movs	r3, #3
 800264c:	e004      	b.n	8002658 <HAL_GPIO_Init+0x204>
 800264e:	2302      	movs	r3, #2
 8002650:	e002      	b.n	8002658 <HAL_GPIO_Init+0x204>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_GPIO_Init+0x204>
 8002656:	2300      	movs	r3, #0
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	f002 0203 	and.w	r2, r2, #3
 800265e:	0092      	lsls	r2, r2, #2
 8002660:	4093      	lsls	r3, r2
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002668:	4935      	ldr	r1, [pc, #212]	; (8002740 <HAL_GPIO_Init+0x2ec>)
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	089b      	lsrs	r3, r3, #2
 800266e:	3302      	adds	r3, #2
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002676:	4b38      	ldr	r3, [pc, #224]	; (8002758 <HAL_GPIO_Init+0x304>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800269a:	4a2f      	ldr	r2, [pc, #188]	; (8002758 <HAL_GPIO_Init+0x304>)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026a0:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <HAL_GPIO_Init+0x304>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c4:	4a24      	ldr	r2, [pc, #144]	; (8002758 <HAL_GPIO_Init+0x304>)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ca:	4b23      	ldr	r3, [pc, #140]	; (8002758 <HAL_GPIO_Init+0x304>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ee:	4a1a      	ldr	r2, [pc, #104]	; (8002758 <HAL_GPIO_Init+0x304>)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026f4:	4b18      	ldr	r3, [pc, #96]	; (8002758 <HAL_GPIO_Init+0x304>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002718:	4a0f      	ldr	r2, [pc, #60]	; (8002758 <HAL_GPIO_Init+0x304>)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3301      	adds	r3, #1
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	2b0f      	cmp	r3, #15
 8002728:	f67f aea2 	bls.w	8002470 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	3724      	adds	r7, #36	; 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800
 8002740:	40013800 	.word	0x40013800
 8002744:	40020000 	.word	0x40020000
 8002748:	40020400 	.word	0x40020400
 800274c:	40020800 	.word	0x40020800
 8002750:	40020c00 	.word	0x40020c00
 8002754:	40021000 	.word	0x40021000
 8002758:	40013c00 	.word	0x40013c00

0800275c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	887b      	ldrh	r3, [r7, #2]
 800276e:	4013      	ands	r3, r2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002774:	2301      	movs	r3, #1
 8002776:	73fb      	strb	r3, [r7, #15]
 8002778:	e001      	b.n	800277e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800277a:	2300      	movs	r3, #0
 800277c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800277e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e12b      	b.n	80029f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7ff fb96 	bl	8001ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2224      	movs	r2, #36	; 0x24
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0201 	bic.w	r2, r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027f0:	f001 fcc0 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
 80027f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4a81      	ldr	r2, [pc, #516]	; (8002a00 <HAL_I2C_Init+0x274>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d807      	bhi.n	8002810 <HAL_I2C_Init+0x84>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4a80      	ldr	r2, [pc, #512]	; (8002a04 <HAL_I2C_Init+0x278>)
 8002804:	4293      	cmp	r3, r2
 8002806:	bf94      	ite	ls
 8002808:	2301      	movls	r3, #1
 800280a:	2300      	movhi	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	e006      	b.n	800281e <HAL_I2C_Init+0x92>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4a7d      	ldr	r2, [pc, #500]	; (8002a08 <HAL_I2C_Init+0x27c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	bf94      	ite	ls
 8002818:	2301      	movls	r3, #1
 800281a:	2300      	movhi	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e0e7      	b.n	80029f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4a78      	ldr	r2, [pc, #480]	; (8002a0c <HAL_I2C_Init+0x280>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	0c9b      	lsrs	r3, r3, #18
 8002830:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	430a      	orrs	r2, r1
 8002844:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4a6a      	ldr	r2, [pc, #424]	; (8002a00 <HAL_I2C_Init+0x274>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d802      	bhi.n	8002860 <HAL_I2C_Init+0xd4>
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	3301      	adds	r3, #1
 800285e:	e009      	b.n	8002874 <HAL_I2C_Init+0xe8>
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002866:	fb02 f303 	mul.w	r3, r2, r3
 800286a:	4a69      	ldr	r2, [pc, #420]	; (8002a10 <HAL_I2C_Init+0x284>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	099b      	lsrs	r3, r3, #6
 8002872:	3301      	adds	r3, #1
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6812      	ldr	r2, [r2, #0]
 8002878:	430b      	orrs	r3, r1
 800287a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002886:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	495c      	ldr	r1, [pc, #368]	; (8002a00 <HAL_I2C_Init+0x274>)
 8002890:	428b      	cmp	r3, r1
 8002892:	d819      	bhi.n	80028c8 <HAL_I2C_Init+0x13c>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1e59      	subs	r1, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fbb1 f3f3 	udiv	r3, r1, r3
 80028a2:	1c59      	adds	r1, r3, #1
 80028a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028a8:	400b      	ands	r3, r1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <HAL_I2C_Init+0x138>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1e59      	subs	r1, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80028bc:	3301      	adds	r3, #1
 80028be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c2:	e051      	b.n	8002968 <HAL_I2C_Init+0x1dc>
 80028c4:	2304      	movs	r3, #4
 80028c6:	e04f      	b.n	8002968 <HAL_I2C_Init+0x1dc>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d111      	bne.n	80028f4 <HAL_I2C_Init+0x168>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1e58      	subs	r0, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6859      	ldr	r1, [r3, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	440b      	add	r3, r1
 80028de:	fbb0 f3f3 	udiv	r3, r0, r3
 80028e2:	3301      	adds	r3, #1
 80028e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	e012      	b.n	800291a <HAL_I2C_Init+0x18e>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	1e58      	subs	r0, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6859      	ldr	r1, [r3, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	0099      	lsls	r1, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	fbb0 f3f3 	udiv	r3, r0, r3
 800290a:	3301      	adds	r3, #1
 800290c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002910:	2b00      	cmp	r3, #0
 8002912:	bf0c      	ite	eq
 8002914:	2301      	moveq	r3, #1
 8002916:	2300      	movne	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_I2C_Init+0x196>
 800291e:	2301      	movs	r3, #1
 8002920:	e022      	b.n	8002968 <HAL_I2C_Init+0x1dc>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10e      	bne.n	8002948 <HAL_I2C_Init+0x1bc>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1e58      	subs	r0, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6859      	ldr	r1, [r3, #4]
 8002932:	460b      	mov	r3, r1
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	440b      	add	r3, r1
 8002938:	fbb0 f3f3 	udiv	r3, r0, r3
 800293c:	3301      	adds	r3, #1
 800293e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002946:	e00f      	b.n	8002968 <HAL_I2C_Init+0x1dc>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1e58      	subs	r0, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	0099      	lsls	r1, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	fbb0 f3f3 	udiv	r3, r0, r3
 800295e:	3301      	adds	r3, #1
 8002960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002964:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	6809      	ldr	r1, [r1, #0]
 800296c:	4313      	orrs	r3, r2
 800296e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69da      	ldr	r2, [r3, #28]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002996:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6911      	ldr	r1, [r2, #16]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68d2      	ldr	r2, [r2, #12]
 80029a2:	4311      	orrs	r1, r2
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	430b      	orrs	r3, r1
 80029aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	000186a0 	.word	0x000186a0
 8002a04:	001e847f 	.word	0x001e847f
 8002a08:	003d08ff 	.word	0x003d08ff
 8002a0c:	431bde83 	.word	0x431bde83
 8002a10:	10624dd3 	.word	0x10624dd3

08002a14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	607a      	str	r2, [r7, #4]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	460b      	mov	r3, r1
 8002a22:	817b      	strh	r3, [r7, #10]
 8002a24:	4613      	mov	r3, r2
 8002a26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a28:	f7ff fbfe 	bl	8002228 <HAL_GetTick>
 8002a2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b20      	cmp	r3, #32
 8002a38:	f040 80e0 	bne.w	8002bfc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2319      	movs	r3, #25
 8002a42:	2201      	movs	r2, #1
 8002a44:	4970      	ldr	r1, [pc, #448]	; (8002c08 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 fd86 	bl	8003558 <I2C_WaitOnFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a52:	2302      	movs	r3, #2
 8002a54:	e0d3      	b.n	8002bfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_I2C_Master_Transmit+0x50>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e0cc      	b.n	8002bfe <HAL_I2C_Master_Transmit+0x1ea>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d007      	beq.n	8002a8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0201 	orr.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2221      	movs	r2, #33	; 0x21
 8002a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2210      	movs	r2, #16
 8002aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	893a      	ldrh	r2, [r7, #8]
 8002aba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4a50      	ldr	r2, [pc, #320]	; (8002c0c <HAL_I2C_Master_Transmit+0x1f8>)
 8002aca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002acc:	8979      	ldrh	r1, [r7, #10]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	6a3a      	ldr	r2, [r7, #32]
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 fbf0 	bl	80032b8 <I2C_MasterRequestWrite>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e08d      	b.n	8002bfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002af8:	e066      	b.n	8002bc8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	6a39      	ldr	r1, [r7, #32]
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 fe00 	bl	8003704 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00d      	beq.n	8002b26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d107      	bne.n	8002b22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e06b      	b.n	8002bfe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	781a      	ldrb	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d11b      	bne.n	8002b9c <HAL_I2C_Master_Transmit+0x188>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d017      	beq.n	8002b9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	781a      	ldrb	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	6a39      	ldr	r1, [r7, #32]
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 fdf0 	bl	8003786 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00d      	beq.n	8002bc8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d107      	bne.n	8002bc4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e01a      	b.n	8002bfe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d194      	bne.n	8002afa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e000      	b.n	8002bfe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bfc:	2302      	movs	r3, #2
  }
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	00100002 	.word	0x00100002
 8002c0c:	ffff0000 	.word	0xffff0000

08002c10 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08c      	sub	sp, #48	; 0x30
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	607a      	str	r2, [r7, #4]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	817b      	strh	r3, [r7, #10]
 8002c20:	4613      	mov	r3, r2
 8002c22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c24:	f7ff fb00 	bl	8002228 <HAL_GetTick>
 8002c28:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	f040 820b 	bne.w	800304e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	2319      	movs	r3, #25
 8002c3e:	2201      	movs	r2, #1
 8002c40:	497c      	ldr	r1, [pc, #496]	; (8002e34 <HAL_I2C_Master_Receive+0x224>)
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 fc88 	bl	8003558 <I2C_WaitOnFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e1fe      	b.n	8003050 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_I2C_Master_Receive+0x50>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e1f7      	b.n	8003050 <HAL_I2C_Master_Receive+0x440>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d007      	beq.n	8002c86 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0201 	orr.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2222      	movs	r2, #34	; 0x22
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2210      	movs	r2, #16
 8002ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	893a      	ldrh	r2, [r7, #8]
 8002cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4a5c      	ldr	r2, [pc, #368]	; (8002e38 <HAL_I2C_Master_Receive+0x228>)
 8002cc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cc8:	8979      	ldrh	r1, [r7, #10]
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 fb74 	bl	80033bc <I2C_MasterRequestRead>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e1b8      	b.n	8003050 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d113      	bne.n	8002d0e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	623b      	str	r3, [r7, #32]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	623b      	str	r3, [r7, #32]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	623b      	str	r3, [r7, #32]
 8002cfa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e18c      	b.n	8003028 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d11b      	bne.n	8002d4e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	e16c      	b.n	8003028 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d11b      	bne.n	8002d8e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d76:	2300      	movs	r3, #0
 8002d78:	61bb      	str	r3, [r7, #24]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	61bb      	str	r3, [r7, #24]
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	e14c      	b.n	8003028 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002db4:	e138      	b.n	8003028 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	f200 80f1 	bhi.w	8002fa2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d123      	bne.n	8002e10 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 fd1b 	bl	8003808 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e139      	b.n	8003050 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e0e:	e10b      	b.n	8003028 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d14e      	bne.n	8002eb6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	2200      	movs	r2, #0
 8002e20:	4906      	ldr	r1, [pc, #24]	; (8002e3c <HAL_I2C_Master_Receive+0x22c>)
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fb98 	bl	8003558 <I2C_WaitOnFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d008      	beq.n	8002e40 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e10e      	b.n	8003050 <HAL_I2C_Master_Receive+0x440>
 8002e32:	bf00      	nop
 8002e34:	00100002 	.word	0x00100002
 8002e38:	ffff0000 	.word	0xffff0000
 8002e3c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	691a      	ldr	r2, [r3, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002eb4:	e0b8      	b.n	8003028 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	4966      	ldr	r1, [pc, #408]	; (8003058 <HAL_I2C_Master_Receive+0x448>)
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 fb49 	bl	8003558 <I2C_WaitOnFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0bf      	b.n	8003050 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ede:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f18:	2200      	movs	r2, #0
 8002f1a:	494f      	ldr	r1, [pc, #316]	; (8003058 <HAL_I2C_Master_Receive+0x448>)
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 fb1b 	bl	8003558 <I2C_WaitOnFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e091      	b.n	8003050 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fa0:	e042      	b.n	8003028 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 fc2e 	bl	8003808 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e04c      	b.n	8003050 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d118      	bne.n	8003028 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302c:	2b00      	cmp	r3, #0
 800302e:	f47f aec2 	bne.w	8002db6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800304a:	2300      	movs	r3, #0
 800304c:	e000      	b.n	8003050 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800304e:	2302      	movs	r3, #2
  }
}
 8003050:	4618      	mov	r0, r3
 8003052:	3728      	adds	r7, #40	; 0x28
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	00010004 	.word	0x00010004

0800305c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af02      	add	r7, sp, #8
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	460b      	mov	r3, r1
 800306a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800306c:	f7ff f8dc 	bl	8002228 <HAL_GetTick>
 8003070:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b20      	cmp	r3, #32
 8003080:	f040 8111 	bne.w	80032a6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	2319      	movs	r3, #25
 800308a:	2201      	movs	r2, #1
 800308c:	4988      	ldr	r1, [pc, #544]	; (80032b0 <HAL_I2C_IsDeviceReady+0x254>)
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 fa62 	bl	8003558 <I2C_WaitOnFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800309a:	2302      	movs	r3, #2
 800309c:	e104      	b.n	80032a8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_I2C_IsDeviceReady+0x50>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e0fd      	b.n	80032a8 <HAL_I2C_IsDeviceReady+0x24c>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d007      	beq.n	80030d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0201 	orr.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2224      	movs	r2, #36	; 0x24
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4a70      	ldr	r2, [pc, #448]	; (80032b4 <HAL_I2C_IsDeviceReady+0x258>)
 80030f4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003104:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2200      	movs	r2, #0
 800310e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 fa20 	bl	8003558 <I2C_WaitOnFlagUntilTimeout>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00d      	beq.n	800313a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800312c:	d103      	bne.n	8003136 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003134:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e0b6      	b.n	80032a8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800313a:	897b      	ldrh	r3, [r7, #10]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	461a      	mov	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003148:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800314a:	f7ff f86d 	bl	8002228 <HAL_GetTick>
 800314e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b02      	cmp	r3, #2
 800315c:	bf0c      	ite	eq
 800315e:	2301      	moveq	r3, #1
 8003160:	2300      	movne	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003174:	bf0c      	ite	eq
 8003176:	2301      	moveq	r3, #1
 8003178:	2300      	movne	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800317e:	e025      	b.n	80031cc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003180:	f7ff f852 	bl	8002228 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d302      	bcc.n	8003196 <HAL_I2C_IsDeviceReady+0x13a>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d103      	bne.n	800319e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	22a0      	movs	r2, #160	; 0xa0
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	bf0c      	ite	eq
 80031ac:	2301      	moveq	r3, #1
 80031ae:	2300      	movne	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c2:	bf0c      	ite	eq
 80031c4:	2301      	moveq	r3, #1
 80031c6:	2300      	movne	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2ba0      	cmp	r3, #160	; 0xa0
 80031d6:	d005      	beq.n	80031e4 <HAL_I2C_IsDeviceReady+0x188>
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d102      	bne.n	80031e4 <HAL_I2C_IsDeviceReady+0x188>
 80031de:	7dbb      	ldrb	r3, [r7, #22]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0cd      	beq.n	8003180 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d129      	bne.n	800324e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003208:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	2319      	movs	r3, #25
 8003226:	2201      	movs	r2, #1
 8003228:	4921      	ldr	r1, [pc, #132]	; (80032b0 <HAL_I2C_IsDeviceReady+0x254>)
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f994 	bl	8003558 <I2C_WaitOnFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e036      	b.n	80032a8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	e02c      	b.n	80032a8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003266:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	2319      	movs	r3, #25
 800326e:	2201      	movs	r2, #1
 8003270:	490f      	ldr	r1, [pc, #60]	; (80032b0 <HAL_I2C_IsDeviceReady+0x254>)
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f970 	bl	8003558 <I2C_WaitOnFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e012      	b.n	80032a8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	3301      	adds	r3, #1
 8003286:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	429a      	cmp	r2, r3
 800328e:	f4ff af32 	bcc.w	80030f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e000      	b.n	80032a8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80032a6:	2302      	movs	r3, #2
  }
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3720      	adds	r7, #32
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	00100002 	.word	0x00100002
 80032b4:	ffff0000 	.word	0xffff0000

080032b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af02      	add	r7, sp, #8
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	607a      	str	r2, [r7, #4]
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	460b      	mov	r3, r1
 80032c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d006      	beq.n	80032e2 <I2C_MasterRequestWrite+0x2a>
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d003      	beq.n	80032e2 <I2C_MasterRequestWrite+0x2a>
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032e0:	d108      	bne.n	80032f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	e00b      	b.n	800330c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	2b12      	cmp	r3, #18
 80032fa:	d107      	bne.n	800330c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800330a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f91d 	bl	8003558 <I2C_WaitOnFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00d      	beq.n	8003340 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003332:	d103      	bne.n	800333c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800333a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e035      	b.n	80033ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003348:	d108      	bne.n	800335c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800334a:	897b      	ldrh	r3, [r7, #10]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	461a      	mov	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003358:	611a      	str	r2, [r3, #16]
 800335a:	e01b      	b.n	8003394 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800335c:	897b      	ldrh	r3, [r7, #10]
 800335e:	11db      	asrs	r3, r3, #7
 8003360:	b2db      	uxtb	r3, r3
 8003362:	f003 0306 	and.w	r3, r3, #6
 8003366:	b2db      	uxtb	r3, r3
 8003368:	f063 030f 	orn	r3, r3, #15
 800336c:	b2da      	uxtb	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	490e      	ldr	r1, [pc, #56]	; (80033b4 <I2C_MasterRequestWrite+0xfc>)
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f943 	bl	8003606 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e010      	b.n	80033ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800338a:	897b      	ldrh	r3, [r7, #10]
 800338c:	b2da      	uxtb	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	4907      	ldr	r1, [pc, #28]	; (80033b8 <I2C_MasterRequestWrite+0x100>)
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f933 	bl	8003606 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	00010008 	.word	0x00010008
 80033b8:	00010002 	.word	0x00010002

080033bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af02      	add	r7, sp, #8
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	460b      	mov	r3, r1
 80033ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d006      	beq.n	80033f6 <I2C_MasterRequestRead+0x3a>
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d003      	beq.n	80033f6 <I2C_MasterRequestRead+0x3a>
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033f4:	d108      	bne.n	8003408 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	e00b      	b.n	8003420 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	2b11      	cmp	r3, #17
 800340e:	d107      	bne.n	8003420 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800341e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f893 	bl	8003558 <I2C_WaitOnFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00d      	beq.n	8003454 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003446:	d103      	bne.n	8003450 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800344e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e079      	b.n	8003548 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800345c:	d108      	bne.n	8003470 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800345e:	897b      	ldrh	r3, [r7, #10]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	b2da      	uxtb	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	611a      	str	r2, [r3, #16]
 800346e:	e05f      	b.n	8003530 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003470:	897b      	ldrh	r3, [r7, #10]
 8003472:	11db      	asrs	r3, r3, #7
 8003474:	b2db      	uxtb	r3, r3
 8003476:	f003 0306 	and.w	r3, r3, #6
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f063 030f 	orn	r3, r3, #15
 8003480:	b2da      	uxtb	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	4930      	ldr	r1, [pc, #192]	; (8003550 <I2C_MasterRequestRead+0x194>)
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 f8b9 	bl	8003606 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e054      	b.n	8003548 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800349e:	897b      	ldrh	r3, [r7, #10]
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	4929      	ldr	r1, [pc, #164]	; (8003554 <I2C_MasterRequestRead+0x198>)
 80034ae:	68f8      	ldr	r0, [r7, #12]
 80034b0:	f000 f8a9 	bl	8003606 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e044      	b.n	8003548 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 f831 	bl	8003558 <I2C_WaitOnFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00d      	beq.n	8003518 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800350a:	d103      	bne.n	8003514 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003512:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e017      	b.n	8003548 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003518:	897b      	ldrh	r3, [r7, #10]
 800351a:	11db      	asrs	r3, r3, #7
 800351c:	b2db      	uxtb	r3, r3
 800351e:	f003 0306 	and.w	r3, r3, #6
 8003522:	b2db      	uxtb	r3, r3
 8003524:	f063 030e 	orn	r3, r3, #14
 8003528:	b2da      	uxtb	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	4907      	ldr	r1, [pc, #28]	; (8003554 <I2C_MasterRequestRead+0x198>)
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f865 	bl	8003606 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e000      	b.n	8003548 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	00010008 	.word	0x00010008
 8003554:	00010002 	.word	0x00010002

08003558 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003568:	e025      	b.n	80035b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003570:	d021      	beq.n	80035b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003572:	f7fe fe59 	bl	8002228 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d302      	bcc.n	8003588 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d116      	bne.n	80035b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f043 0220 	orr.w	r2, r3, #32
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e023      	b.n	80035fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	0c1b      	lsrs	r3, r3, #16
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d10d      	bne.n	80035dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	43da      	mvns	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4013      	ands	r3, r2
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	bf0c      	ite	eq
 80035d2:	2301      	moveq	r3, #1
 80035d4:	2300      	movne	r3, #0
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	461a      	mov	r2, r3
 80035da:	e00c      	b.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	43da      	mvns	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4013      	ands	r3, r2
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bf0c      	ite	eq
 80035ee:	2301      	moveq	r3, #1
 80035f0:	2300      	movne	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d0b6      	beq.n	800356a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
 800360c:	60f8      	str	r0, [r7, #12]
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	607a      	str	r2, [r7, #4]
 8003612:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003614:	e051      	b.n	80036ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003624:	d123      	bne.n	800366e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003634:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800363e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f043 0204 	orr.w	r2, r3, #4
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e046      	b.n	80036fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003674:	d021      	beq.n	80036ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003676:	f7fe fdd7 	bl	8002228 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	429a      	cmp	r2, r3
 8003684:	d302      	bcc.n	800368c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d116      	bne.n	80036ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f043 0220 	orr.w	r2, r3, #32
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e020      	b.n	80036fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	0c1b      	lsrs	r3, r3, #16
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d10c      	bne.n	80036de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	43da      	mvns	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4013      	ands	r3, r2
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	bf14      	ite	ne
 80036d6:	2301      	movne	r3, #1
 80036d8:	2300      	moveq	r3, #0
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	e00b      	b.n	80036f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	43da      	mvns	r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	4013      	ands	r3, r2
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bf14      	ite	ne
 80036f0:	2301      	movne	r3, #1
 80036f2:	2300      	moveq	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d18d      	bne.n	8003616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003710:	e02d      	b.n	800376e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 f8ce 	bl	80038b4 <I2C_IsAcknowledgeFailed>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e02d      	b.n	800377e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003728:	d021      	beq.n	800376e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372a:	f7fe fd7d 	bl	8002228 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	429a      	cmp	r2, r3
 8003738:	d302      	bcc.n	8003740 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d116      	bne.n	800376e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	f043 0220 	orr.w	r2, r3, #32
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e007      	b.n	800377e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003778:	2b80      	cmp	r3, #128	; 0x80
 800377a:	d1ca      	bne.n	8003712 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003792:	e02d      	b.n	80037f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 f88d 	bl	80038b4 <I2C_IsAcknowledgeFailed>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e02d      	b.n	8003800 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037aa:	d021      	beq.n	80037f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ac:	f7fe fd3c 	bl	8002228 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d302      	bcc.n	80037c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d116      	bne.n	80037f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	f043 0220 	orr.w	r2, r3, #32
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e007      	b.n	8003800 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d1ca      	bne.n	8003794 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003814:	e042      	b.n	800389c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b10      	cmp	r3, #16
 8003822:	d119      	bne.n	8003858 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0210 	mvn.w	r2, #16
 800382c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e029      	b.n	80038ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003858:	f7fe fce6 	bl	8002228 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	429a      	cmp	r2, r3
 8003866:	d302      	bcc.n	800386e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d116      	bne.n	800389c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	f043 0220 	orr.w	r2, r3, #32
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e007      	b.n	80038ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a6:	2b40      	cmp	r3, #64	; 0x40
 80038a8:	d1b5      	bne.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ca:	d11b      	bne.n	8003904 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	f043 0204 	orr.w	r2, r3, #4
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e000      	b.n	8003906 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e267      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d075      	beq.n	8003a1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003932:	4b88      	ldr	r3, [pc, #544]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 030c 	and.w	r3, r3, #12
 800393a:	2b04      	cmp	r3, #4
 800393c:	d00c      	beq.n	8003958 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800393e:	4b85      	ldr	r3, [pc, #532]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003946:	2b08      	cmp	r3, #8
 8003948:	d112      	bne.n	8003970 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800394a:	4b82      	ldr	r3, [pc, #520]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003956:	d10b      	bne.n	8003970 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003958:	4b7e      	ldr	r3, [pc, #504]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d05b      	beq.n	8003a1c <HAL_RCC_OscConfig+0x108>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d157      	bne.n	8003a1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e242      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003978:	d106      	bne.n	8003988 <HAL_RCC_OscConfig+0x74>
 800397a:	4b76      	ldr	r3, [pc, #472]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a75      	ldr	r2, [pc, #468]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e01d      	b.n	80039c4 <HAL_RCC_OscConfig+0xb0>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003990:	d10c      	bne.n	80039ac <HAL_RCC_OscConfig+0x98>
 8003992:	4b70      	ldr	r3, [pc, #448]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a6f      	ldr	r2, [pc, #444]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	4b6d      	ldr	r3, [pc, #436]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a6c      	ldr	r2, [pc, #432]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 80039a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	e00b      	b.n	80039c4 <HAL_RCC_OscConfig+0xb0>
 80039ac:	4b69      	ldr	r3, [pc, #420]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a68      	ldr	r2, [pc, #416]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 80039b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	4b66      	ldr	r3, [pc, #408]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a65      	ldr	r2, [pc, #404]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 80039be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d013      	beq.n	80039f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039cc:	f7fe fc2c 	bl	8002228 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039d4:	f7fe fc28 	bl	8002228 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b64      	cmp	r3, #100	; 0x64
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e207      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e6:	4b5b      	ldr	r3, [pc, #364]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0f0      	beq.n	80039d4 <HAL_RCC_OscConfig+0xc0>
 80039f2:	e014      	b.n	8003a1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f4:	f7fe fc18 	bl	8002228 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039fc:	f7fe fc14 	bl	8002228 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b64      	cmp	r3, #100	; 0x64
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e1f3      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a0e:	4b51      	ldr	r3, [pc, #324]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f0      	bne.n	80039fc <HAL_RCC_OscConfig+0xe8>
 8003a1a:	e000      	b.n	8003a1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d063      	beq.n	8003af2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a2a:	4b4a      	ldr	r3, [pc, #296]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00b      	beq.n	8003a4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a36:	4b47      	ldr	r3, [pc, #284]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a3e:	2b08      	cmp	r3, #8
 8003a40:	d11c      	bne.n	8003a7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a42:	4b44      	ldr	r3, [pc, #272]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d116      	bne.n	8003a7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a4e:	4b41      	ldr	r3, [pc, #260]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d005      	beq.n	8003a66 <HAL_RCC_OscConfig+0x152>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d001      	beq.n	8003a66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e1c7      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a66:	4b3b      	ldr	r3, [pc, #236]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4937      	ldr	r1, [pc, #220]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7a:	e03a      	b.n	8003af2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d020      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a84:	4b34      	ldr	r3, [pc, #208]	; (8003b58 <HAL_RCC_OscConfig+0x244>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8a:	f7fe fbcd 	bl	8002228 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a92:	f7fe fbc9 	bl	8002228 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e1a8      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa4:	4b2b      	ldr	r3, [pc, #172]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab0:	4b28      	ldr	r3, [pc, #160]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4925      	ldr	r1, [pc, #148]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	600b      	str	r3, [r1, #0]
 8003ac4:	e015      	b.n	8003af2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ac6:	4b24      	ldr	r3, [pc, #144]	; (8003b58 <HAL_RCC_OscConfig+0x244>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003acc:	f7fe fbac 	bl	8002228 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad4:	f7fe fba8 	bl	8002228 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e187      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ae6:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d036      	beq.n	8003b6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d016      	beq.n	8003b34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b06:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <HAL_RCC_OscConfig+0x248>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0c:	f7fe fb8c 	bl	8002228 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b14:	f7fe fb88 	bl	8002228 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e167      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b26:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <HAL_RCC_OscConfig+0x240>)
 8003b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0x200>
 8003b32:	e01b      	b.n	8003b6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b34:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <HAL_RCC_OscConfig+0x248>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3a:	f7fe fb75 	bl	8002228 <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b40:	e00e      	b.n	8003b60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b42:	f7fe fb71 	bl	8002228 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d907      	bls.n	8003b60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e150      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
 8003b54:	40023800 	.word	0x40023800
 8003b58:	42470000 	.word	0x42470000
 8003b5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b60:	4b88      	ldr	r3, [pc, #544]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1ea      	bne.n	8003b42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 8097 	beq.w	8003ca8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b7e:	4b81      	ldr	r3, [pc, #516]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10f      	bne.n	8003baa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	4b7d      	ldr	r3, [pc, #500]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	4a7c      	ldr	r2, [pc, #496]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b98:	6413      	str	r3, [r2, #64]	; 0x40
 8003b9a:	4b7a      	ldr	r3, [pc, #488]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	60bb      	str	r3, [r7, #8]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003baa:	4b77      	ldr	r3, [pc, #476]	; (8003d88 <HAL_RCC_OscConfig+0x474>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d118      	bne.n	8003be8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bb6:	4b74      	ldr	r3, [pc, #464]	; (8003d88 <HAL_RCC_OscConfig+0x474>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a73      	ldr	r2, [pc, #460]	; (8003d88 <HAL_RCC_OscConfig+0x474>)
 8003bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc2:	f7fe fb31 	bl	8002228 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bca:	f7fe fb2d 	bl	8002228 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e10c      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bdc:	4b6a      	ldr	r3, [pc, #424]	; (8003d88 <HAL_RCC_OscConfig+0x474>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0f0      	beq.n	8003bca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d106      	bne.n	8003bfe <HAL_RCC_OscConfig+0x2ea>
 8003bf0:	4b64      	ldr	r3, [pc, #400]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf4:	4a63      	ldr	r2, [pc, #396]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfc:	e01c      	b.n	8003c38 <HAL_RCC_OscConfig+0x324>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b05      	cmp	r3, #5
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x30c>
 8003c06:	4b5f      	ldr	r3, [pc, #380]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	4a5e      	ldr	r2, [pc, #376]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	f043 0304 	orr.w	r3, r3, #4
 8003c10:	6713      	str	r3, [r2, #112]	; 0x70
 8003c12:	4b5c      	ldr	r3, [pc, #368]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	4a5b      	ldr	r2, [pc, #364]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1e:	e00b      	b.n	8003c38 <HAL_RCC_OscConfig+0x324>
 8003c20:	4b58      	ldr	r3, [pc, #352]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c24:	4a57      	ldr	r2, [pc, #348]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c26:	f023 0301 	bic.w	r3, r3, #1
 8003c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c2c:	4b55      	ldr	r3, [pc, #340]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c30:	4a54      	ldr	r2, [pc, #336]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c32:	f023 0304 	bic.w	r3, r3, #4
 8003c36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d015      	beq.n	8003c6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c40:	f7fe faf2 	bl	8002228 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c46:	e00a      	b.n	8003c5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c48:	f7fe faee 	bl	8002228 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e0cb      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5e:	4b49      	ldr	r3, [pc, #292]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0ee      	beq.n	8003c48 <HAL_RCC_OscConfig+0x334>
 8003c6a:	e014      	b.n	8003c96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6c:	f7fe fadc 	bl	8002228 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c72:	e00a      	b.n	8003c8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c74:	f7fe fad8 	bl	8002228 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e0b5      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c8a:	4b3e      	ldr	r3, [pc, #248]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1ee      	bne.n	8003c74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c96:	7dfb      	ldrb	r3, [r7, #23]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d105      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c9c:	4b39      	ldr	r3, [pc, #228]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	4a38      	ldr	r2, [pc, #224]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80a1 	beq.w	8003df4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cb2:	4b34      	ldr	r3, [pc, #208]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d05c      	beq.n	8003d78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d141      	bne.n	8003d4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc6:	4b31      	ldr	r3, [pc, #196]	; (8003d8c <HAL_RCC_OscConfig+0x478>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ccc:	f7fe faac 	bl	8002228 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd4:	f7fe faa8 	bl	8002228 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e087      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce6:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1f0      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	69da      	ldr	r2, [r3, #28]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	019b      	lsls	r3, r3, #6
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	085b      	lsrs	r3, r3, #1
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	041b      	lsls	r3, r3, #16
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	061b      	lsls	r3, r3, #24
 8003d16:	491b      	ldr	r1, [pc, #108]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d1c:	4b1b      	ldr	r3, [pc, #108]	; (8003d8c <HAL_RCC_OscConfig+0x478>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d22:	f7fe fa81 	bl	8002228 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d2a:	f7fe fa7d 	bl	8002228 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e05c      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3c:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCC_OscConfig+0x416>
 8003d48:	e054      	b.n	8003df4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4a:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <HAL_RCC_OscConfig+0x478>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d50:	f7fe fa6a 	bl	8002228 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d58:	f7fe fa66 	bl	8002228 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e045      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6a:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <HAL_RCC_OscConfig+0x470>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x444>
 8003d76:	e03d      	b.n	8003df4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d107      	bne.n	8003d90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e038      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
 8003d84:	40023800 	.word	0x40023800
 8003d88:	40007000 	.word	0x40007000
 8003d8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d90:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <HAL_RCC_OscConfig+0x4ec>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d028      	beq.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d121      	bne.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d11a      	bne.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d111      	bne.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd6:	085b      	lsrs	r3, r3, #1
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d107      	bne.n	8003df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e000      	b.n	8003df6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800

08003e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0cc      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e18:	4b68      	ldr	r3, [pc, #416]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d90c      	bls.n	8003e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e26:	4b65      	ldr	r3, [pc, #404]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2e:	4b63      	ldr	r3, [pc, #396]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0b8      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d020      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e58:	4b59      	ldr	r3, [pc, #356]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	4a58      	ldr	r2, [pc, #352]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e70:	4b53      	ldr	r3, [pc, #332]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	4a52      	ldr	r2, [pc, #328]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e7c:	4b50      	ldr	r3, [pc, #320]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	494d      	ldr	r1, [pc, #308]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d044      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d107      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea2:	4b47      	ldr	r3, [pc, #284]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d119      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e07f      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d003      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	d107      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec2:	4b3f      	ldr	r3, [pc, #252]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e06f      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed2:	4b3b      	ldr	r3, [pc, #236]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e067      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ee2:	4b37      	ldr	r3, [pc, #220]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f023 0203 	bic.w	r2, r3, #3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4934      	ldr	r1, [pc, #208]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ef4:	f7fe f998 	bl	8002228 <HAL_GetTick>
 8003ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efa:	e00a      	b.n	8003f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003efc:	f7fe f994 	bl	8002228 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e04f      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f12:	4b2b      	ldr	r3, [pc, #172]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 020c 	and.w	r2, r3, #12
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d1eb      	bne.n	8003efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f24:	4b25      	ldr	r3, [pc, #148]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d20c      	bcs.n	8003f4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f32:	4b22      	ldr	r3, [pc, #136]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3a:	4b20      	ldr	r3, [pc, #128]	; (8003fbc <HAL_RCC_ClockConfig+0x1b8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d001      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e032      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d008      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f58:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	4916      	ldr	r1, [pc, #88]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f76:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	490e      	ldr	r1, [pc, #56]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f8a:	f000 f821 	bl	8003fd0 <HAL_RCC_GetSysClockFreq>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	091b      	lsrs	r3, r3, #4
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	490a      	ldr	r1, [pc, #40]	; (8003fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f9c:	5ccb      	ldrb	r3, [r1, r3]
 8003f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa2:	4a09      	ldr	r2, [pc, #36]	; (8003fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fa6:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <HAL_RCC_ClockConfig+0x1c8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fe f8f8 	bl	80021a0 <HAL_InitTick>

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40023c00 	.word	0x40023c00
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	08006950 	.word	0x08006950
 8003fc8:	20000034 	.word	0x20000034
 8003fcc:	20000038 	.word	0x20000038

08003fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd4:	b090      	sub	sp, #64	; 0x40
 8003fd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	637b      	str	r3, [r7, #52]	; 0x34
 8003fdc:	2300      	movs	r3, #0
 8003fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fe8:	4b59      	ldr	r3, [pc, #356]	; (8004150 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 030c 	and.w	r3, r3, #12
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d00d      	beq.n	8004010 <HAL_RCC_GetSysClockFreq+0x40>
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	f200 80a1 	bhi.w	800413c <HAL_RCC_GetSysClockFreq+0x16c>
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <HAL_RCC_GetSysClockFreq+0x34>
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d003      	beq.n	800400a <HAL_RCC_GetSysClockFreq+0x3a>
 8004002:	e09b      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004004:	4b53      	ldr	r3, [pc, #332]	; (8004154 <HAL_RCC_GetSysClockFreq+0x184>)
 8004006:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004008:	e09b      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800400a:	4b53      	ldr	r3, [pc, #332]	; (8004158 <HAL_RCC_GetSysClockFreq+0x188>)
 800400c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800400e:	e098      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004010:	4b4f      	ldr	r3, [pc, #316]	; (8004150 <HAL_RCC_GetSysClockFreq+0x180>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004018:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800401a:	4b4d      	ldr	r3, [pc, #308]	; (8004150 <HAL_RCC_GetSysClockFreq+0x180>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d028      	beq.n	8004078 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004026:	4b4a      	ldr	r3, [pc, #296]	; (8004150 <HAL_RCC_GetSysClockFreq+0x180>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	099b      	lsrs	r3, r3, #6
 800402c:	2200      	movs	r2, #0
 800402e:	623b      	str	r3, [r7, #32]
 8004030:	627a      	str	r2, [r7, #36]	; 0x24
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004038:	2100      	movs	r1, #0
 800403a:	4b47      	ldr	r3, [pc, #284]	; (8004158 <HAL_RCC_GetSysClockFreq+0x188>)
 800403c:	fb03 f201 	mul.w	r2, r3, r1
 8004040:	2300      	movs	r3, #0
 8004042:	fb00 f303 	mul.w	r3, r0, r3
 8004046:	4413      	add	r3, r2
 8004048:	4a43      	ldr	r2, [pc, #268]	; (8004158 <HAL_RCC_GetSysClockFreq+0x188>)
 800404a:	fba0 1202 	umull	r1, r2, r0, r2
 800404e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004050:	460a      	mov	r2, r1
 8004052:	62ba      	str	r2, [r7, #40]	; 0x28
 8004054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004056:	4413      	add	r3, r2
 8004058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800405a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405c:	2200      	movs	r2, #0
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	61fa      	str	r2, [r7, #28]
 8004062:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004066:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800406a:	f7fc fdf5 	bl	8000c58 <__aeabi_uldivmod>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	4613      	mov	r3, r2
 8004074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004076:	e053      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004078:	4b35      	ldr	r3, [pc, #212]	; (8004150 <HAL_RCC_GetSysClockFreq+0x180>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	099b      	lsrs	r3, r3, #6
 800407e:	2200      	movs	r2, #0
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	617a      	str	r2, [r7, #20]
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800408a:	f04f 0b00 	mov.w	fp, #0
 800408e:	4652      	mov	r2, sl
 8004090:	465b      	mov	r3, fp
 8004092:	f04f 0000 	mov.w	r0, #0
 8004096:	f04f 0100 	mov.w	r1, #0
 800409a:	0159      	lsls	r1, r3, #5
 800409c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040a0:	0150      	lsls	r0, r2, #5
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	ebb2 080a 	subs.w	r8, r2, sl
 80040aa:	eb63 090b 	sbc.w	r9, r3, fp
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	f04f 0300 	mov.w	r3, #0
 80040b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80040ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80040be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80040c2:	ebb2 0408 	subs.w	r4, r2, r8
 80040c6:	eb63 0509 	sbc.w	r5, r3, r9
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	00eb      	lsls	r3, r5, #3
 80040d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040d8:	00e2      	lsls	r2, r4, #3
 80040da:	4614      	mov	r4, r2
 80040dc:	461d      	mov	r5, r3
 80040de:	eb14 030a 	adds.w	r3, r4, sl
 80040e2:	603b      	str	r3, [r7, #0]
 80040e4:	eb45 030b 	adc.w	r3, r5, fp
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040f6:	4629      	mov	r1, r5
 80040f8:	028b      	lsls	r3, r1, #10
 80040fa:	4621      	mov	r1, r4
 80040fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004100:	4621      	mov	r1, r4
 8004102:	028a      	lsls	r2, r1, #10
 8004104:	4610      	mov	r0, r2
 8004106:	4619      	mov	r1, r3
 8004108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800410a:	2200      	movs	r2, #0
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	60fa      	str	r2, [r7, #12]
 8004110:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004114:	f7fc fda0 	bl	8000c58 <__aeabi_uldivmod>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4613      	mov	r3, r2
 800411e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <HAL_RCC_GetSysClockFreq+0x180>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	0c1b      	lsrs	r3, r3, #16
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	3301      	adds	r3, #1
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004130:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004134:	fbb2 f3f3 	udiv	r3, r2, r3
 8004138:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800413a:	e002      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <HAL_RCC_GetSysClockFreq+0x184>)
 800413e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004144:	4618      	mov	r0, r3
 8004146:	3740      	adds	r7, #64	; 0x40
 8004148:	46bd      	mov	sp, r7
 800414a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800414e:	bf00      	nop
 8004150:	40023800 	.word	0x40023800
 8004154:	00f42400 	.word	0x00f42400
 8004158:	017d7840 	.word	0x017d7840

0800415c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004160:	4b03      	ldr	r3, [pc, #12]	; (8004170 <HAL_RCC_GetHCLKFreq+0x14>)
 8004162:	681b      	ldr	r3, [r3, #0]
}
 8004164:	4618      	mov	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000034 	.word	0x20000034

08004174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004178:	f7ff fff0 	bl	800415c <HAL_RCC_GetHCLKFreq>
 800417c:	4602      	mov	r2, r0
 800417e:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	0a9b      	lsrs	r3, r3, #10
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	4903      	ldr	r1, [pc, #12]	; (8004198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800418a:	5ccb      	ldrb	r3, [r1, r3]
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004190:	4618      	mov	r0, r3
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40023800 	.word	0x40023800
 8004198:	08006960 	.word	0x08006960

0800419c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041a0:	f7ff ffdc 	bl	800415c <HAL_RCC_GetHCLKFreq>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	0b5b      	lsrs	r3, r3, #13
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	4903      	ldr	r1, [pc, #12]	; (80041c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041b2:	5ccb      	ldrb	r3, [r1, r3]
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40023800 	.word	0x40023800
 80041c0:	08006960 	.word	0x08006960

080041c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e03f      	b.n	8004256 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fd fed2 	bl	8001f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2224      	movs	r2, #36	; 0x24
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004206:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f929 	bl	8004460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800421c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695a      	ldr	r2, [r3, #20]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800422c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800423c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b08a      	sub	sp, #40	; 0x28
 8004262:	af02      	add	r7, sp, #8
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	603b      	str	r3, [r7, #0]
 800426a:	4613      	mov	r3, r2
 800426c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b20      	cmp	r3, #32
 800427c:	d17c      	bne.n	8004378 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_UART_Transmit+0x2c>
 8004284:	88fb      	ldrh	r3, [r7, #6]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e075      	b.n	800437a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_UART_Transmit+0x3e>
 8004298:	2302      	movs	r3, #2
 800429a:	e06e      	b.n	800437a <HAL_UART_Transmit+0x11c>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2221      	movs	r2, #33	; 0x21
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042b2:	f7fd ffb9 	bl	8002228 <HAL_GetTick>
 80042b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	88fa      	ldrh	r2, [r7, #6]
 80042bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	88fa      	ldrh	r2, [r7, #6]
 80042c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042cc:	d108      	bne.n	80042e0 <HAL_UART_Transmit+0x82>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d104      	bne.n	80042e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042d6:	2300      	movs	r3, #0
 80042d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	61bb      	str	r3, [r7, #24]
 80042de:	e003      	b.n	80042e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80042f0:	e02a      	b.n	8004348 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	9300      	str	r3, [sp, #0]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2200      	movs	r2, #0
 80042fa:	2180      	movs	r1, #128	; 0x80
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f840 	bl	8004382 <UART_WaitOnFlagUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e036      	b.n	800437a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10b      	bne.n	800432a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004320:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	3302      	adds	r3, #2
 8004326:	61bb      	str	r3, [r7, #24]
 8004328:	e007      	b.n	800433a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	781a      	ldrb	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	3301      	adds	r3, #1
 8004338:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800433e:	b29b      	uxth	r3, r3
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1cf      	bne.n	80042f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2200      	movs	r2, #0
 800435a:	2140      	movs	r1, #64	; 0x40
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 f810 	bl	8004382 <UART_WaitOnFlagUntilTimeout>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e006      	b.n	800437a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004374:	2300      	movs	r3, #0
 8004376:	e000      	b.n	800437a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004378:	2302      	movs	r3, #2
  }
}
 800437a:	4618      	mov	r0, r3
 800437c:	3720      	adds	r7, #32
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b090      	sub	sp, #64	; 0x40
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	603b      	str	r3, [r7, #0]
 800438e:	4613      	mov	r3, r2
 8004390:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004392:	e050      	b.n	8004436 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439a:	d04c      	beq.n	8004436 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800439c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d007      	beq.n	80043b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80043a2:	f7fd ff41 	bl	8002228 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d241      	bcs.n	8004436 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	330c      	adds	r3, #12
 80043b8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043bc:	e853 3f00 	ldrex	r3, [r3]
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	330c      	adds	r3, #12
 80043d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043d2:	637a      	str	r2, [r7, #52]	; 0x34
 80043d4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043da:	e841 2300 	strex	r3, r2, [r1]
 80043de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1e5      	bne.n	80043b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3314      	adds	r3, #20
 80043ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	613b      	str	r3, [r7, #16]
   return(result);
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f023 0301 	bic.w	r3, r3, #1
 80043fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3314      	adds	r3, #20
 8004404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004406:	623a      	str	r2, [r7, #32]
 8004408:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	69f9      	ldr	r1, [r7, #28]
 800440c:	6a3a      	ldr	r2, [r7, #32]
 800440e:	e841 2300 	strex	r3, r2, [r1]
 8004412:	61bb      	str	r3, [r7, #24]
   return(result);
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1e5      	bne.n	80043e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2220      	movs	r2, #32
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e00f      	b.n	8004456 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4013      	ands	r3, r2
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	429a      	cmp	r2, r3
 8004444:	bf0c      	ite	eq
 8004446:	2301      	moveq	r3, #1
 8004448:	2300      	movne	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	461a      	mov	r2, r3
 800444e:	79fb      	ldrb	r3, [r7, #7]
 8004450:	429a      	cmp	r2, r3
 8004452:	d09f      	beq.n	8004394 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3740      	adds	r7, #64	; 0x40
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004464:	b0c0      	sub	sp, #256	; 0x100
 8004466:	af00      	add	r7, sp, #0
 8004468:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447c:	68d9      	ldr	r1, [r3, #12]
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	ea40 0301 	orr.w	r3, r0, r1
 8004488:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800448a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	431a      	orrs	r2, r3
 8004498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	431a      	orrs	r2, r3
 80044a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80044b8:	f021 010c 	bic.w	r1, r1, #12
 80044bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80044c6:	430b      	orrs	r3, r1
 80044c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80044d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044da:	6999      	ldr	r1, [r3, #24]
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	ea40 0301 	orr.w	r3, r0, r1
 80044e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	4b8f      	ldr	r3, [pc, #572]	; (800472c <UART_SetConfig+0x2cc>)
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d005      	beq.n	8004500 <UART_SetConfig+0xa0>
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	4b8d      	ldr	r3, [pc, #564]	; (8004730 <UART_SetConfig+0x2d0>)
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d104      	bne.n	800450a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004500:	f7ff fe4c 	bl	800419c <HAL_RCC_GetPCLK2Freq>
 8004504:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004508:	e003      	b.n	8004512 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800450a:	f7ff fe33 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
 800450e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800451c:	f040 810c 	bne.w	8004738 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004524:	2200      	movs	r2, #0
 8004526:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800452a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800452e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004532:	4622      	mov	r2, r4
 8004534:	462b      	mov	r3, r5
 8004536:	1891      	adds	r1, r2, r2
 8004538:	65b9      	str	r1, [r7, #88]	; 0x58
 800453a:	415b      	adcs	r3, r3
 800453c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800453e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004542:	4621      	mov	r1, r4
 8004544:	eb12 0801 	adds.w	r8, r2, r1
 8004548:	4629      	mov	r1, r5
 800454a:	eb43 0901 	adc.w	r9, r3, r1
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800455a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800455e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004562:	4690      	mov	r8, r2
 8004564:	4699      	mov	r9, r3
 8004566:	4623      	mov	r3, r4
 8004568:	eb18 0303 	adds.w	r3, r8, r3
 800456c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004570:	462b      	mov	r3, r5
 8004572:	eb49 0303 	adc.w	r3, r9, r3
 8004576:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800457a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004586:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800458a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800458e:	460b      	mov	r3, r1
 8004590:	18db      	adds	r3, r3, r3
 8004592:	653b      	str	r3, [r7, #80]	; 0x50
 8004594:	4613      	mov	r3, r2
 8004596:	eb42 0303 	adc.w	r3, r2, r3
 800459a:	657b      	str	r3, [r7, #84]	; 0x54
 800459c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80045a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80045a4:	f7fc fb58 	bl	8000c58 <__aeabi_uldivmod>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4b61      	ldr	r3, [pc, #388]	; (8004734 <UART_SetConfig+0x2d4>)
 80045ae:	fba3 2302 	umull	r2, r3, r3, r2
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	011c      	lsls	r4, r3, #4
 80045b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80045c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80045c8:	4642      	mov	r2, r8
 80045ca:	464b      	mov	r3, r9
 80045cc:	1891      	adds	r1, r2, r2
 80045ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80045d0:	415b      	adcs	r3, r3
 80045d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045d8:	4641      	mov	r1, r8
 80045da:	eb12 0a01 	adds.w	sl, r2, r1
 80045de:	4649      	mov	r1, r9
 80045e0:	eb43 0b01 	adc.w	fp, r3, r1
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045f8:	4692      	mov	sl, r2
 80045fa:	469b      	mov	fp, r3
 80045fc:	4643      	mov	r3, r8
 80045fe:	eb1a 0303 	adds.w	r3, sl, r3
 8004602:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004606:	464b      	mov	r3, r9
 8004608:	eb4b 0303 	adc.w	r3, fp, r3
 800460c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800461c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004620:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004624:	460b      	mov	r3, r1
 8004626:	18db      	adds	r3, r3, r3
 8004628:	643b      	str	r3, [r7, #64]	; 0x40
 800462a:	4613      	mov	r3, r2
 800462c:	eb42 0303 	adc.w	r3, r2, r3
 8004630:	647b      	str	r3, [r7, #68]	; 0x44
 8004632:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004636:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800463a:	f7fc fb0d 	bl	8000c58 <__aeabi_uldivmod>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	4611      	mov	r1, r2
 8004644:	4b3b      	ldr	r3, [pc, #236]	; (8004734 <UART_SetConfig+0x2d4>)
 8004646:	fba3 2301 	umull	r2, r3, r3, r1
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	2264      	movs	r2, #100	; 0x64
 800464e:	fb02 f303 	mul.w	r3, r2, r3
 8004652:	1acb      	subs	r3, r1, r3
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800465a:	4b36      	ldr	r3, [pc, #216]	; (8004734 <UART_SetConfig+0x2d4>)
 800465c:	fba3 2302 	umull	r2, r3, r3, r2
 8004660:	095b      	lsrs	r3, r3, #5
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004668:	441c      	add	r4, r3
 800466a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800466e:	2200      	movs	r2, #0
 8004670:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004674:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004678:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800467c:	4642      	mov	r2, r8
 800467e:	464b      	mov	r3, r9
 8004680:	1891      	adds	r1, r2, r2
 8004682:	63b9      	str	r1, [r7, #56]	; 0x38
 8004684:	415b      	adcs	r3, r3
 8004686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004688:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800468c:	4641      	mov	r1, r8
 800468e:	1851      	adds	r1, r2, r1
 8004690:	6339      	str	r1, [r7, #48]	; 0x30
 8004692:	4649      	mov	r1, r9
 8004694:	414b      	adcs	r3, r1
 8004696:	637b      	str	r3, [r7, #52]	; 0x34
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80046a4:	4659      	mov	r1, fp
 80046a6:	00cb      	lsls	r3, r1, #3
 80046a8:	4651      	mov	r1, sl
 80046aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ae:	4651      	mov	r1, sl
 80046b0:	00ca      	lsls	r2, r1, #3
 80046b2:	4610      	mov	r0, r2
 80046b4:	4619      	mov	r1, r3
 80046b6:	4603      	mov	r3, r0
 80046b8:	4642      	mov	r2, r8
 80046ba:	189b      	adds	r3, r3, r2
 80046bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046c0:	464b      	mov	r3, r9
 80046c2:	460a      	mov	r2, r1
 80046c4:	eb42 0303 	adc.w	r3, r2, r3
 80046c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80046d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80046dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80046e0:	460b      	mov	r3, r1
 80046e2:	18db      	adds	r3, r3, r3
 80046e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80046e6:	4613      	mov	r3, r2
 80046e8:	eb42 0303 	adc.w	r3, r2, r3
 80046ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80046f6:	f7fc faaf 	bl	8000c58 <__aeabi_uldivmod>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4b0d      	ldr	r3, [pc, #52]	; (8004734 <UART_SetConfig+0x2d4>)
 8004700:	fba3 1302 	umull	r1, r3, r3, r2
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	2164      	movs	r1, #100	; 0x64
 8004708:	fb01 f303 	mul.w	r3, r1, r3
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	3332      	adds	r3, #50	; 0x32
 8004712:	4a08      	ldr	r2, [pc, #32]	; (8004734 <UART_SetConfig+0x2d4>)
 8004714:	fba2 2303 	umull	r2, r3, r2, r3
 8004718:	095b      	lsrs	r3, r3, #5
 800471a:	f003 0207 	and.w	r2, r3, #7
 800471e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4422      	add	r2, r4
 8004726:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004728:	e105      	b.n	8004936 <UART_SetConfig+0x4d6>
 800472a:	bf00      	nop
 800472c:	40011000 	.word	0x40011000
 8004730:	40011400 	.word	0x40011400
 8004734:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800473c:	2200      	movs	r2, #0
 800473e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004742:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004746:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800474a:	4642      	mov	r2, r8
 800474c:	464b      	mov	r3, r9
 800474e:	1891      	adds	r1, r2, r2
 8004750:	6239      	str	r1, [r7, #32]
 8004752:	415b      	adcs	r3, r3
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
 8004756:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800475a:	4641      	mov	r1, r8
 800475c:	1854      	adds	r4, r2, r1
 800475e:	4649      	mov	r1, r9
 8004760:	eb43 0501 	adc.w	r5, r3, r1
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	00eb      	lsls	r3, r5, #3
 800476e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004772:	00e2      	lsls	r2, r4, #3
 8004774:	4614      	mov	r4, r2
 8004776:	461d      	mov	r5, r3
 8004778:	4643      	mov	r3, r8
 800477a:	18e3      	adds	r3, r4, r3
 800477c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004780:	464b      	mov	r3, r9
 8004782:	eb45 0303 	adc.w	r3, r5, r3
 8004786:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800478a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004796:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047a6:	4629      	mov	r1, r5
 80047a8:	008b      	lsls	r3, r1, #2
 80047aa:	4621      	mov	r1, r4
 80047ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047b0:	4621      	mov	r1, r4
 80047b2:	008a      	lsls	r2, r1, #2
 80047b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80047b8:	f7fc fa4e 	bl	8000c58 <__aeabi_uldivmod>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4b60      	ldr	r3, [pc, #384]	; (8004944 <UART_SetConfig+0x4e4>)
 80047c2:	fba3 2302 	umull	r2, r3, r3, r2
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	011c      	lsls	r4, r3, #4
 80047ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047ce:	2200      	movs	r2, #0
 80047d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80047d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80047dc:	4642      	mov	r2, r8
 80047de:	464b      	mov	r3, r9
 80047e0:	1891      	adds	r1, r2, r2
 80047e2:	61b9      	str	r1, [r7, #24]
 80047e4:	415b      	adcs	r3, r3
 80047e6:	61fb      	str	r3, [r7, #28]
 80047e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047ec:	4641      	mov	r1, r8
 80047ee:	1851      	adds	r1, r2, r1
 80047f0:	6139      	str	r1, [r7, #16]
 80047f2:	4649      	mov	r1, r9
 80047f4:	414b      	adcs	r3, r1
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004804:	4659      	mov	r1, fp
 8004806:	00cb      	lsls	r3, r1, #3
 8004808:	4651      	mov	r1, sl
 800480a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800480e:	4651      	mov	r1, sl
 8004810:	00ca      	lsls	r2, r1, #3
 8004812:	4610      	mov	r0, r2
 8004814:	4619      	mov	r1, r3
 8004816:	4603      	mov	r3, r0
 8004818:	4642      	mov	r2, r8
 800481a:	189b      	adds	r3, r3, r2
 800481c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004820:	464b      	mov	r3, r9
 8004822:	460a      	mov	r2, r1
 8004824:	eb42 0303 	adc.w	r3, r2, r3
 8004828:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800482c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	67bb      	str	r3, [r7, #120]	; 0x78
 8004836:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004844:	4649      	mov	r1, r9
 8004846:	008b      	lsls	r3, r1, #2
 8004848:	4641      	mov	r1, r8
 800484a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800484e:	4641      	mov	r1, r8
 8004850:	008a      	lsls	r2, r1, #2
 8004852:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004856:	f7fc f9ff 	bl	8000c58 <__aeabi_uldivmod>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4b39      	ldr	r3, [pc, #228]	; (8004944 <UART_SetConfig+0x4e4>)
 8004860:	fba3 1302 	umull	r1, r3, r3, r2
 8004864:	095b      	lsrs	r3, r3, #5
 8004866:	2164      	movs	r1, #100	; 0x64
 8004868:	fb01 f303 	mul.w	r3, r1, r3
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	3332      	adds	r3, #50	; 0x32
 8004872:	4a34      	ldr	r2, [pc, #208]	; (8004944 <UART_SetConfig+0x4e4>)
 8004874:	fba2 2303 	umull	r2, r3, r2, r3
 8004878:	095b      	lsrs	r3, r3, #5
 800487a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800487e:	441c      	add	r4, r3
 8004880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004884:	2200      	movs	r2, #0
 8004886:	673b      	str	r3, [r7, #112]	; 0x70
 8004888:	677a      	str	r2, [r7, #116]	; 0x74
 800488a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800488e:	4642      	mov	r2, r8
 8004890:	464b      	mov	r3, r9
 8004892:	1891      	adds	r1, r2, r2
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	415b      	adcs	r3, r3
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800489e:	4641      	mov	r1, r8
 80048a0:	1851      	adds	r1, r2, r1
 80048a2:	6039      	str	r1, [r7, #0]
 80048a4:	4649      	mov	r1, r9
 80048a6:	414b      	adcs	r3, r1
 80048a8:	607b      	str	r3, [r7, #4]
 80048aa:	f04f 0200 	mov.w	r2, #0
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048b6:	4659      	mov	r1, fp
 80048b8:	00cb      	lsls	r3, r1, #3
 80048ba:	4651      	mov	r1, sl
 80048bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048c0:	4651      	mov	r1, sl
 80048c2:	00ca      	lsls	r2, r1, #3
 80048c4:	4610      	mov	r0, r2
 80048c6:	4619      	mov	r1, r3
 80048c8:	4603      	mov	r3, r0
 80048ca:	4642      	mov	r2, r8
 80048cc:	189b      	adds	r3, r3, r2
 80048ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80048d0:	464b      	mov	r3, r9
 80048d2:	460a      	mov	r2, r1
 80048d4:	eb42 0303 	adc.w	r3, r2, r3
 80048d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	663b      	str	r3, [r7, #96]	; 0x60
 80048e4:	667a      	str	r2, [r7, #100]	; 0x64
 80048e6:	f04f 0200 	mov.w	r2, #0
 80048ea:	f04f 0300 	mov.w	r3, #0
 80048ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80048f2:	4649      	mov	r1, r9
 80048f4:	008b      	lsls	r3, r1, #2
 80048f6:	4641      	mov	r1, r8
 80048f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048fc:	4641      	mov	r1, r8
 80048fe:	008a      	lsls	r2, r1, #2
 8004900:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004904:	f7fc f9a8 	bl	8000c58 <__aeabi_uldivmod>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4b0d      	ldr	r3, [pc, #52]	; (8004944 <UART_SetConfig+0x4e4>)
 800490e:	fba3 1302 	umull	r1, r3, r3, r2
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	2164      	movs	r1, #100	; 0x64
 8004916:	fb01 f303 	mul.w	r3, r1, r3
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	3332      	adds	r3, #50	; 0x32
 8004920:	4a08      	ldr	r2, [pc, #32]	; (8004944 <UART_SetConfig+0x4e4>)
 8004922:	fba2 2303 	umull	r2, r3, r2, r3
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	f003 020f 	and.w	r2, r3, #15
 800492c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4422      	add	r2, r4
 8004934:	609a      	str	r2, [r3, #8]
}
 8004936:	bf00      	nop
 8004938:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800493c:	46bd      	mov	sp, r7
 800493e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004942:	bf00      	nop
 8004944:	51eb851f 	.word	0x51eb851f

08004948 <__errno>:
 8004948:	4b01      	ldr	r3, [pc, #4]	; (8004950 <__errno+0x8>)
 800494a:	6818      	ldr	r0, [r3, #0]
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	20000040 	.word	0x20000040

08004954 <__libc_init_array>:
 8004954:	b570      	push	{r4, r5, r6, lr}
 8004956:	4d0d      	ldr	r5, [pc, #52]	; (800498c <__libc_init_array+0x38>)
 8004958:	4c0d      	ldr	r4, [pc, #52]	; (8004990 <__libc_init_array+0x3c>)
 800495a:	1b64      	subs	r4, r4, r5
 800495c:	10a4      	asrs	r4, r4, #2
 800495e:	2600      	movs	r6, #0
 8004960:	42a6      	cmp	r6, r4
 8004962:	d109      	bne.n	8004978 <__libc_init_array+0x24>
 8004964:	4d0b      	ldr	r5, [pc, #44]	; (8004994 <__libc_init_array+0x40>)
 8004966:	4c0c      	ldr	r4, [pc, #48]	; (8004998 <__libc_init_array+0x44>)
 8004968:	f001 ff82 	bl	8006870 <_init>
 800496c:	1b64      	subs	r4, r4, r5
 800496e:	10a4      	asrs	r4, r4, #2
 8004970:	2600      	movs	r6, #0
 8004972:	42a6      	cmp	r6, r4
 8004974:	d105      	bne.n	8004982 <__libc_init_array+0x2e>
 8004976:	bd70      	pop	{r4, r5, r6, pc}
 8004978:	f855 3b04 	ldr.w	r3, [r5], #4
 800497c:	4798      	blx	r3
 800497e:	3601      	adds	r6, #1
 8004980:	e7ee      	b.n	8004960 <__libc_init_array+0xc>
 8004982:	f855 3b04 	ldr.w	r3, [r5], #4
 8004986:	4798      	blx	r3
 8004988:	3601      	adds	r6, #1
 800498a:	e7f2      	b.n	8004972 <__libc_init_array+0x1e>
 800498c:	080069f0 	.word	0x080069f0
 8004990:	080069f0 	.word	0x080069f0
 8004994:	080069f0 	.word	0x080069f0
 8004998:	080069f4 	.word	0x080069f4

0800499c <memset>:
 800499c:	4402      	add	r2, r0
 800499e:	4603      	mov	r3, r0
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d100      	bne.n	80049a6 <memset+0xa>
 80049a4:	4770      	bx	lr
 80049a6:	f803 1b01 	strb.w	r1, [r3], #1
 80049aa:	e7f9      	b.n	80049a0 <memset+0x4>

080049ac <siprintf>:
 80049ac:	b40e      	push	{r1, r2, r3}
 80049ae:	b500      	push	{lr}
 80049b0:	b09c      	sub	sp, #112	; 0x70
 80049b2:	ab1d      	add	r3, sp, #116	; 0x74
 80049b4:	9002      	str	r0, [sp, #8]
 80049b6:	9006      	str	r0, [sp, #24]
 80049b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049bc:	4809      	ldr	r0, [pc, #36]	; (80049e4 <siprintf+0x38>)
 80049be:	9107      	str	r1, [sp, #28]
 80049c0:	9104      	str	r1, [sp, #16]
 80049c2:	4909      	ldr	r1, [pc, #36]	; (80049e8 <siprintf+0x3c>)
 80049c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80049c8:	9105      	str	r1, [sp, #20]
 80049ca:	6800      	ldr	r0, [r0, #0]
 80049cc:	9301      	str	r3, [sp, #4]
 80049ce:	a902      	add	r1, sp, #8
 80049d0:	f000 f870 	bl	8004ab4 <_svfiprintf_r>
 80049d4:	9b02      	ldr	r3, [sp, #8]
 80049d6:	2200      	movs	r2, #0
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	b01c      	add	sp, #112	; 0x70
 80049dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80049e0:	b003      	add	sp, #12
 80049e2:	4770      	bx	lr
 80049e4:	20000040 	.word	0x20000040
 80049e8:	ffff0208 	.word	0xffff0208

080049ec <strcpy>:
 80049ec:	4603      	mov	r3, r0
 80049ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049f2:	f803 2b01 	strb.w	r2, [r3], #1
 80049f6:	2a00      	cmp	r2, #0
 80049f8:	d1f9      	bne.n	80049ee <strcpy+0x2>
 80049fa:	4770      	bx	lr

080049fc <__ssputs_r>:
 80049fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a00:	688e      	ldr	r6, [r1, #8]
 8004a02:	429e      	cmp	r6, r3
 8004a04:	4682      	mov	sl, r0
 8004a06:	460c      	mov	r4, r1
 8004a08:	4690      	mov	r8, r2
 8004a0a:	461f      	mov	r7, r3
 8004a0c:	d838      	bhi.n	8004a80 <__ssputs_r+0x84>
 8004a0e:	898a      	ldrh	r2, [r1, #12]
 8004a10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a14:	d032      	beq.n	8004a7c <__ssputs_r+0x80>
 8004a16:	6825      	ldr	r5, [r4, #0]
 8004a18:	6909      	ldr	r1, [r1, #16]
 8004a1a:	eba5 0901 	sub.w	r9, r5, r1
 8004a1e:	6965      	ldr	r5, [r4, #20]
 8004a20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a28:	3301      	adds	r3, #1
 8004a2a:	444b      	add	r3, r9
 8004a2c:	106d      	asrs	r5, r5, #1
 8004a2e:	429d      	cmp	r5, r3
 8004a30:	bf38      	it	cc
 8004a32:	461d      	movcc	r5, r3
 8004a34:	0553      	lsls	r3, r2, #21
 8004a36:	d531      	bpl.n	8004a9c <__ssputs_r+0xa0>
 8004a38:	4629      	mov	r1, r5
 8004a3a:	f000 fb63 	bl	8005104 <_malloc_r>
 8004a3e:	4606      	mov	r6, r0
 8004a40:	b950      	cbnz	r0, 8004a58 <__ssputs_r+0x5c>
 8004a42:	230c      	movs	r3, #12
 8004a44:	f8ca 3000 	str.w	r3, [sl]
 8004a48:	89a3      	ldrh	r3, [r4, #12]
 8004a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a4e:	81a3      	strh	r3, [r4, #12]
 8004a50:	f04f 30ff 	mov.w	r0, #4294967295
 8004a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a58:	6921      	ldr	r1, [r4, #16]
 8004a5a:	464a      	mov	r2, r9
 8004a5c:	f000 fabe 	bl	8004fdc <memcpy>
 8004a60:	89a3      	ldrh	r3, [r4, #12]
 8004a62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a6a:	81a3      	strh	r3, [r4, #12]
 8004a6c:	6126      	str	r6, [r4, #16]
 8004a6e:	6165      	str	r5, [r4, #20]
 8004a70:	444e      	add	r6, r9
 8004a72:	eba5 0509 	sub.w	r5, r5, r9
 8004a76:	6026      	str	r6, [r4, #0]
 8004a78:	60a5      	str	r5, [r4, #8]
 8004a7a:	463e      	mov	r6, r7
 8004a7c:	42be      	cmp	r6, r7
 8004a7e:	d900      	bls.n	8004a82 <__ssputs_r+0x86>
 8004a80:	463e      	mov	r6, r7
 8004a82:	6820      	ldr	r0, [r4, #0]
 8004a84:	4632      	mov	r2, r6
 8004a86:	4641      	mov	r1, r8
 8004a88:	f000 fab6 	bl	8004ff8 <memmove>
 8004a8c:	68a3      	ldr	r3, [r4, #8]
 8004a8e:	1b9b      	subs	r3, r3, r6
 8004a90:	60a3      	str	r3, [r4, #8]
 8004a92:	6823      	ldr	r3, [r4, #0]
 8004a94:	4433      	add	r3, r6
 8004a96:	6023      	str	r3, [r4, #0]
 8004a98:	2000      	movs	r0, #0
 8004a9a:	e7db      	b.n	8004a54 <__ssputs_r+0x58>
 8004a9c:	462a      	mov	r2, r5
 8004a9e:	f000 fba5 	bl	80051ec <_realloc_r>
 8004aa2:	4606      	mov	r6, r0
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	d1e1      	bne.n	8004a6c <__ssputs_r+0x70>
 8004aa8:	6921      	ldr	r1, [r4, #16]
 8004aaa:	4650      	mov	r0, sl
 8004aac:	f000 fabe 	bl	800502c <_free_r>
 8004ab0:	e7c7      	b.n	8004a42 <__ssputs_r+0x46>
	...

08004ab4 <_svfiprintf_r>:
 8004ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab8:	4698      	mov	r8, r3
 8004aba:	898b      	ldrh	r3, [r1, #12]
 8004abc:	061b      	lsls	r3, r3, #24
 8004abe:	b09d      	sub	sp, #116	; 0x74
 8004ac0:	4607      	mov	r7, r0
 8004ac2:	460d      	mov	r5, r1
 8004ac4:	4614      	mov	r4, r2
 8004ac6:	d50e      	bpl.n	8004ae6 <_svfiprintf_r+0x32>
 8004ac8:	690b      	ldr	r3, [r1, #16]
 8004aca:	b963      	cbnz	r3, 8004ae6 <_svfiprintf_r+0x32>
 8004acc:	2140      	movs	r1, #64	; 0x40
 8004ace:	f000 fb19 	bl	8005104 <_malloc_r>
 8004ad2:	6028      	str	r0, [r5, #0]
 8004ad4:	6128      	str	r0, [r5, #16]
 8004ad6:	b920      	cbnz	r0, 8004ae2 <_svfiprintf_r+0x2e>
 8004ad8:	230c      	movs	r3, #12
 8004ada:	603b      	str	r3, [r7, #0]
 8004adc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae0:	e0d1      	b.n	8004c86 <_svfiprintf_r+0x1d2>
 8004ae2:	2340      	movs	r3, #64	; 0x40
 8004ae4:	616b      	str	r3, [r5, #20]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8004aea:	2320      	movs	r3, #32
 8004aec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004af0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004af4:	2330      	movs	r3, #48	; 0x30
 8004af6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ca0 <_svfiprintf_r+0x1ec>
 8004afa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004afe:	f04f 0901 	mov.w	r9, #1
 8004b02:	4623      	mov	r3, r4
 8004b04:	469a      	mov	sl, r3
 8004b06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b0a:	b10a      	cbz	r2, 8004b10 <_svfiprintf_r+0x5c>
 8004b0c:	2a25      	cmp	r2, #37	; 0x25
 8004b0e:	d1f9      	bne.n	8004b04 <_svfiprintf_r+0x50>
 8004b10:	ebba 0b04 	subs.w	fp, sl, r4
 8004b14:	d00b      	beq.n	8004b2e <_svfiprintf_r+0x7a>
 8004b16:	465b      	mov	r3, fp
 8004b18:	4622      	mov	r2, r4
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	4638      	mov	r0, r7
 8004b1e:	f7ff ff6d 	bl	80049fc <__ssputs_r>
 8004b22:	3001      	adds	r0, #1
 8004b24:	f000 80aa 	beq.w	8004c7c <_svfiprintf_r+0x1c8>
 8004b28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b2a:	445a      	add	r2, fp
 8004b2c:	9209      	str	r2, [sp, #36]	; 0x24
 8004b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 80a2 	beq.w	8004c7c <_svfiprintf_r+0x1c8>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b42:	f10a 0a01 	add.w	sl, sl, #1
 8004b46:	9304      	str	r3, [sp, #16]
 8004b48:	9307      	str	r3, [sp, #28]
 8004b4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b4e:	931a      	str	r3, [sp, #104]	; 0x68
 8004b50:	4654      	mov	r4, sl
 8004b52:	2205      	movs	r2, #5
 8004b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b58:	4851      	ldr	r0, [pc, #324]	; (8004ca0 <_svfiprintf_r+0x1ec>)
 8004b5a:	f7fb fb49 	bl	80001f0 <memchr>
 8004b5e:	9a04      	ldr	r2, [sp, #16]
 8004b60:	b9d8      	cbnz	r0, 8004b9a <_svfiprintf_r+0xe6>
 8004b62:	06d0      	lsls	r0, r2, #27
 8004b64:	bf44      	itt	mi
 8004b66:	2320      	movmi	r3, #32
 8004b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b6c:	0711      	lsls	r1, r2, #28
 8004b6e:	bf44      	itt	mi
 8004b70:	232b      	movmi	r3, #43	; 0x2b
 8004b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b76:	f89a 3000 	ldrb.w	r3, [sl]
 8004b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b7c:	d015      	beq.n	8004baa <_svfiprintf_r+0xf6>
 8004b7e:	9a07      	ldr	r2, [sp, #28]
 8004b80:	4654      	mov	r4, sl
 8004b82:	2000      	movs	r0, #0
 8004b84:	f04f 0c0a 	mov.w	ip, #10
 8004b88:	4621      	mov	r1, r4
 8004b8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b8e:	3b30      	subs	r3, #48	; 0x30
 8004b90:	2b09      	cmp	r3, #9
 8004b92:	d94e      	bls.n	8004c32 <_svfiprintf_r+0x17e>
 8004b94:	b1b0      	cbz	r0, 8004bc4 <_svfiprintf_r+0x110>
 8004b96:	9207      	str	r2, [sp, #28]
 8004b98:	e014      	b.n	8004bc4 <_svfiprintf_r+0x110>
 8004b9a:	eba0 0308 	sub.w	r3, r0, r8
 8004b9e:	fa09 f303 	lsl.w	r3, r9, r3
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	9304      	str	r3, [sp, #16]
 8004ba6:	46a2      	mov	sl, r4
 8004ba8:	e7d2      	b.n	8004b50 <_svfiprintf_r+0x9c>
 8004baa:	9b03      	ldr	r3, [sp, #12]
 8004bac:	1d19      	adds	r1, r3, #4
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	9103      	str	r1, [sp, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	bfbb      	ittet	lt
 8004bb6:	425b      	neglt	r3, r3
 8004bb8:	f042 0202 	orrlt.w	r2, r2, #2
 8004bbc:	9307      	strge	r3, [sp, #28]
 8004bbe:	9307      	strlt	r3, [sp, #28]
 8004bc0:	bfb8      	it	lt
 8004bc2:	9204      	strlt	r2, [sp, #16]
 8004bc4:	7823      	ldrb	r3, [r4, #0]
 8004bc6:	2b2e      	cmp	r3, #46	; 0x2e
 8004bc8:	d10c      	bne.n	8004be4 <_svfiprintf_r+0x130>
 8004bca:	7863      	ldrb	r3, [r4, #1]
 8004bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8004bce:	d135      	bne.n	8004c3c <_svfiprintf_r+0x188>
 8004bd0:	9b03      	ldr	r3, [sp, #12]
 8004bd2:	1d1a      	adds	r2, r3, #4
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	9203      	str	r2, [sp, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	bfb8      	it	lt
 8004bdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004be0:	3402      	adds	r4, #2
 8004be2:	9305      	str	r3, [sp, #20]
 8004be4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004cb0 <_svfiprintf_r+0x1fc>
 8004be8:	7821      	ldrb	r1, [r4, #0]
 8004bea:	2203      	movs	r2, #3
 8004bec:	4650      	mov	r0, sl
 8004bee:	f7fb faff 	bl	80001f0 <memchr>
 8004bf2:	b140      	cbz	r0, 8004c06 <_svfiprintf_r+0x152>
 8004bf4:	2340      	movs	r3, #64	; 0x40
 8004bf6:	eba0 000a 	sub.w	r0, r0, sl
 8004bfa:	fa03 f000 	lsl.w	r0, r3, r0
 8004bfe:	9b04      	ldr	r3, [sp, #16]
 8004c00:	4303      	orrs	r3, r0
 8004c02:	3401      	adds	r4, #1
 8004c04:	9304      	str	r3, [sp, #16]
 8004c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c0a:	4826      	ldr	r0, [pc, #152]	; (8004ca4 <_svfiprintf_r+0x1f0>)
 8004c0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c10:	2206      	movs	r2, #6
 8004c12:	f7fb faed 	bl	80001f0 <memchr>
 8004c16:	2800      	cmp	r0, #0
 8004c18:	d038      	beq.n	8004c8c <_svfiprintf_r+0x1d8>
 8004c1a:	4b23      	ldr	r3, [pc, #140]	; (8004ca8 <_svfiprintf_r+0x1f4>)
 8004c1c:	bb1b      	cbnz	r3, 8004c66 <_svfiprintf_r+0x1b2>
 8004c1e:	9b03      	ldr	r3, [sp, #12]
 8004c20:	3307      	adds	r3, #7
 8004c22:	f023 0307 	bic.w	r3, r3, #7
 8004c26:	3308      	adds	r3, #8
 8004c28:	9303      	str	r3, [sp, #12]
 8004c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c2c:	4433      	add	r3, r6
 8004c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c30:	e767      	b.n	8004b02 <_svfiprintf_r+0x4e>
 8004c32:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c36:	460c      	mov	r4, r1
 8004c38:	2001      	movs	r0, #1
 8004c3a:	e7a5      	b.n	8004b88 <_svfiprintf_r+0xd4>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	3401      	adds	r4, #1
 8004c40:	9305      	str	r3, [sp, #20]
 8004c42:	4619      	mov	r1, r3
 8004c44:	f04f 0c0a 	mov.w	ip, #10
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c4e:	3a30      	subs	r2, #48	; 0x30
 8004c50:	2a09      	cmp	r2, #9
 8004c52:	d903      	bls.n	8004c5c <_svfiprintf_r+0x1a8>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0c5      	beq.n	8004be4 <_svfiprintf_r+0x130>
 8004c58:	9105      	str	r1, [sp, #20]
 8004c5a:	e7c3      	b.n	8004be4 <_svfiprintf_r+0x130>
 8004c5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c60:	4604      	mov	r4, r0
 8004c62:	2301      	movs	r3, #1
 8004c64:	e7f0      	b.n	8004c48 <_svfiprintf_r+0x194>
 8004c66:	ab03      	add	r3, sp, #12
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	462a      	mov	r2, r5
 8004c6c:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <_svfiprintf_r+0x1f8>)
 8004c6e:	a904      	add	r1, sp, #16
 8004c70:	4638      	mov	r0, r7
 8004c72:	f3af 8000 	nop.w
 8004c76:	1c42      	adds	r2, r0, #1
 8004c78:	4606      	mov	r6, r0
 8004c7a:	d1d6      	bne.n	8004c2a <_svfiprintf_r+0x176>
 8004c7c:	89ab      	ldrh	r3, [r5, #12]
 8004c7e:	065b      	lsls	r3, r3, #25
 8004c80:	f53f af2c 	bmi.w	8004adc <_svfiprintf_r+0x28>
 8004c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c86:	b01d      	add	sp, #116	; 0x74
 8004c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c8c:	ab03      	add	r3, sp, #12
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	462a      	mov	r2, r5
 8004c92:	4b06      	ldr	r3, [pc, #24]	; (8004cac <_svfiprintf_r+0x1f8>)
 8004c94:	a904      	add	r1, sp, #16
 8004c96:	4638      	mov	r0, r7
 8004c98:	f000 f87a 	bl	8004d90 <_printf_i>
 8004c9c:	e7eb      	b.n	8004c76 <_svfiprintf_r+0x1c2>
 8004c9e:	bf00      	nop
 8004ca0:	08006968 	.word	0x08006968
 8004ca4:	08006972 	.word	0x08006972
 8004ca8:	00000000 	.word	0x00000000
 8004cac:	080049fd 	.word	0x080049fd
 8004cb0:	0800696e 	.word	0x0800696e

08004cb4 <_printf_common>:
 8004cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb8:	4616      	mov	r6, r2
 8004cba:	4699      	mov	r9, r3
 8004cbc:	688a      	ldr	r2, [r1, #8]
 8004cbe:	690b      	ldr	r3, [r1, #16]
 8004cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	bfb8      	it	lt
 8004cc8:	4613      	movlt	r3, r2
 8004cca:	6033      	str	r3, [r6, #0]
 8004ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cd0:	4607      	mov	r7, r0
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	b10a      	cbz	r2, 8004cda <_printf_common+0x26>
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	6033      	str	r3, [r6, #0]
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	0699      	lsls	r1, r3, #26
 8004cde:	bf42      	ittt	mi
 8004ce0:	6833      	ldrmi	r3, [r6, #0]
 8004ce2:	3302      	addmi	r3, #2
 8004ce4:	6033      	strmi	r3, [r6, #0]
 8004ce6:	6825      	ldr	r5, [r4, #0]
 8004ce8:	f015 0506 	ands.w	r5, r5, #6
 8004cec:	d106      	bne.n	8004cfc <_printf_common+0x48>
 8004cee:	f104 0a19 	add.w	sl, r4, #25
 8004cf2:	68e3      	ldr	r3, [r4, #12]
 8004cf4:	6832      	ldr	r2, [r6, #0]
 8004cf6:	1a9b      	subs	r3, r3, r2
 8004cf8:	42ab      	cmp	r3, r5
 8004cfa:	dc26      	bgt.n	8004d4a <_printf_common+0x96>
 8004cfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d00:	1e13      	subs	r3, r2, #0
 8004d02:	6822      	ldr	r2, [r4, #0]
 8004d04:	bf18      	it	ne
 8004d06:	2301      	movne	r3, #1
 8004d08:	0692      	lsls	r2, r2, #26
 8004d0a:	d42b      	bmi.n	8004d64 <_printf_common+0xb0>
 8004d0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d10:	4649      	mov	r1, r9
 8004d12:	4638      	mov	r0, r7
 8004d14:	47c0      	blx	r8
 8004d16:	3001      	adds	r0, #1
 8004d18:	d01e      	beq.n	8004d58 <_printf_common+0xa4>
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	68e5      	ldr	r5, [r4, #12]
 8004d1e:	6832      	ldr	r2, [r6, #0]
 8004d20:	f003 0306 	and.w	r3, r3, #6
 8004d24:	2b04      	cmp	r3, #4
 8004d26:	bf08      	it	eq
 8004d28:	1aad      	subeq	r5, r5, r2
 8004d2a:	68a3      	ldr	r3, [r4, #8]
 8004d2c:	6922      	ldr	r2, [r4, #16]
 8004d2e:	bf0c      	ite	eq
 8004d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d34:	2500      	movne	r5, #0
 8004d36:	4293      	cmp	r3, r2
 8004d38:	bfc4      	itt	gt
 8004d3a:	1a9b      	subgt	r3, r3, r2
 8004d3c:	18ed      	addgt	r5, r5, r3
 8004d3e:	2600      	movs	r6, #0
 8004d40:	341a      	adds	r4, #26
 8004d42:	42b5      	cmp	r5, r6
 8004d44:	d11a      	bne.n	8004d7c <_printf_common+0xc8>
 8004d46:	2000      	movs	r0, #0
 8004d48:	e008      	b.n	8004d5c <_printf_common+0xa8>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	4652      	mov	r2, sl
 8004d4e:	4649      	mov	r1, r9
 8004d50:	4638      	mov	r0, r7
 8004d52:	47c0      	blx	r8
 8004d54:	3001      	adds	r0, #1
 8004d56:	d103      	bne.n	8004d60 <_printf_common+0xac>
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d60:	3501      	adds	r5, #1
 8004d62:	e7c6      	b.n	8004cf2 <_printf_common+0x3e>
 8004d64:	18e1      	adds	r1, r4, r3
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	2030      	movs	r0, #48	; 0x30
 8004d6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d6e:	4422      	add	r2, r4
 8004d70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d78:	3302      	adds	r3, #2
 8004d7a:	e7c7      	b.n	8004d0c <_printf_common+0x58>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	4622      	mov	r2, r4
 8004d80:	4649      	mov	r1, r9
 8004d82:	4638      	mov	r0, r7
 8004d84:	47c0      	blx	r8
 8004d86:	3001      	adds	r0, #1
 8004d88:	d0e6      	beq.n	8004d58 <_printf_common+0xa4>
 8004d8a:	3601      	adds	r6, #1
 8004d8c:	e7d9      	b.n	8004d42 <_printf_common+0x8e>
	...

08004d90 <_printf_i>:
 8004d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d94:	7e0f      	ldrb	r7, [r1, #24]
 8004d96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d98:	2f78      	cmp	r7, #120	; 0x78
 8004d9a:	4691      	mov	r9, r2
 8004d9c:	4680      	mov	r8, r0
 8004d9e:	460c      	mov	r4, r1
 8004da0:	469a      	mov	sl, r3
 8004da2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004da6:	d807      	bhi.n	8004db8 <_printf_i+0x28>
 8004da8:	2f62      	cmp	r7, #98	; 0x62
 8004daa:	d80a      	bhi.n	8004dc2 <_printf_i+0x32>
 8004dac:	2f00      	cmp	r7, #0
 8004dae:	f000 80d8 	beq.w	8004f62 <_printf_i+0x1d2>
 8004db2:	2f58      	cmp	r7, #88	; 0x58
 8004db4:	f000 80a3 	beq.w	8004efe <_printf_i+0x16e>
 8004db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004dc0:	e03a      	b.n	8004e38 <_printf_i+0xa8>
 8004dc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004dc6:	2b15      	cmp	r3, #21
 8004dc8:	d8f6      	bhi.n	8004db8 <_printf_i+0x28>
 8004dca:	a101      	add	r1, pc, #4	; (adr r1, 8004dd0 <_printf_i+0x40>)
 8004dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004dd0:	08004e29 	.word	0x08004e29
 8004dd4:	08004e3d 	.word	0x08004e3d
 8004dd8:	08004db9 	.word	0x08004db9
 8004ddc:	08004db9 	.word	0x08004db9
 8004de0:	08004db9 	.word	0x08004db9
 8004de4:	08004db9 	.word	0x08004db9
 8004de8:	08004e3d 	.word	0x08004e3d
 8004dec:	08004db9 	.word	0x08004db9
 8004df0:	08004db9 	.word	0x08004db9
 8004df4:	08004db9 	.word	0x08004db9
 8004df8:	08004db9 	.word	0x08004db9
 8004dfc:	08004f49 	.word	0x08004f49
 8004e00:	08004e6d 	.word	0x08004e6d
 8004e04:	08004f2b 	.word	0x08004f2b
 8004e08:	08004db9 	.word	0x08004db9
 8004e0c:	08004db9 	.word	0x08004db9
 8004e10:	08004f6b 	.word	0x08004f6b
 8004e14:	08004db9 	.word	0x08004db9
 8004e18:	08004e6d 	.word	0x08004e6d
 8004e1c:	08004db9 	.word	0x08004db9
 8004e20:	08004db9 	.word	0x08004db9
 8004e24:	08004f33 	.word	0x08004f33
 8004e28:	682b      	ldr	r3, [r5, #0]
 8004e2a:	1d1a      	adds	r2, r3, #4
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	602a      	str	r2, [r5, #0]
 8004e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e0a3      	b.n	8004f84 <_printf_i+0x1f4>
 8004e3c:	6820      	ldr	r0, [r4, #0]
 8004e3e:	6829      	ldr	r1, [r5, #0]
 8004e40:	0606      	lsls	r6, r0, #24
 8004e42:	f101 0304 	add.w	r3, r1, #4
 8004e46:	d50a      	bpl.n	8004e5e <_printf_i+0xce>
 8004e48:	680e      	ldr	r6, [r1, #0]
 8004e4a:	602b      	str	r3, [r5, #0]
 8004e4c:	2e00      	cmp	r6, #0
 8004e4e:	da03      	bge.n	8004e58 <_printf_i+0xc8>
 8004e50:	232d      	movs	r3, #45	; 0x2d
 8004e52:	4276      	negs	r6, r6
 8004e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e58:	485e      	ldr	r0, [pc, #376]	; (8004fd4 <_printf_i+0x244>)
 8004e5a:	230a      	movs	r3, #10
 8004e5c:	e019      	b.n	8004e92 <_printf_i+0x102>
 8004e5e:	680e      	ldr	r6, [r1, #0]
 8004e60:	602b      	str	r3, [r5, #0]
 8004e62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e66:	bf18      	it	ne
 8004e68:	b236      	sxthne	r6, r6
 8004e6a:	e7ef      	b.n	8004e4c <_printf_i+0xbc>
 8004e6c:	682b      	ldr	r3, [r5, #0]
 8004e6e:	6820      	ldr	r0, [r4, #0]
 8004e70:	1d19      	adds	r1, r3, #4
 8004e72:	6029      	str	r1, [r5, #0]
 8004e74:	0601      	lsls	r1, r0, #24
 8004e76:	d501      	bpl.n	8004e7c <_printf_i+0xec>
 8004e78:	681e      	ldr	r6, [r3, #0]
 8004e7a:	e002      	b.n	8004e82 <_printf_i+0xf2>
 8004e7c:	0646      	lsls	r6, r0, #25
 8004e7e:	d5fb      	bpl.n	8004e78 <_printf_i+0xe8>
 8004e80:	881e      	ldrh	r6, [r3, #0]
 8004e82:	4854      	ldr	r0, [pc, #336]	; (8004fd4 <_printf_i+0x244>)
 8004e84:	2f6f      	cmp	r7, #111	; 0x6f
 8004e86:	bf0c      	ite	eq
 8004e88:	2308      	moveq	r3, #8
 8004e8a:	230a      	movne	r3, #10
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e92:	6865      	ldr	r5, [r4, #4]
 8004e94:	60a5      	str	r5, [r4, #8]
 8004e96:	2d00      	cmp	r5, #0
 8004e98:	bfa2      	ittt	ge
 8004e9a:	6821      	ldrge	r1, [r4, #0]
 8004e9c:	f021 0104 	bicge.w	r1, r1, #4
 8004ea0:	6021      	strge	r1, [r4, #0]
 8004ea2:	b90e      	cbnz	r6, 8004ea8 <_printf_i+0x118>
 8004ea4:	2d00      	cmp	r5, #0
 8004ea6:	d04d      	beq.n	8004f44 <_printf_i+0x1b4>
 8004ea8:	4615      	mov	r5, r2
 8004eaa:	fbb6 f1f3 	udiv	r1, r6, r3
 8004eae:	fb03 6711 	mls	r7, r3, r1, r6
 8004eb2:	5dc7      	ldrb	r7, [r0, r7]
 8004eb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004eb8:	4637      	mov	r7, r6
 8004eba:	42bb      	cmp	r3, r7
 8004ebc:	460e      	mov	r6, r1
 8004ebe:	d9f4      	bls.n	8004eaa <_printf_i+0x11a>
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d10b      	bne.n	8004edc <_printf_i+0x14c>
 8004ec4:	6823      	ldr	r3, [r4, #0]
 8004ec6:	07de      	lsls	r6, r3, #31
 8004ec8:	d508      	bpl.n	8004edc <_printf_i+0x14c>
 8004eca:	6923      	ldr	r3, [r4, #16]
 8004ecc:	6861      	ldr	r1, [r4, #4]
 8004ece:	4299      	cmp	r1, r3
 8004ed0:	bfde      	ittt	le
 8004ed2:	2330      	movle	r3, #48	; 0x30
 8004ed4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ed8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004edc:	1b52      	subs	r2, r2, r5
 8004ede:	6122      	str	r2, [r4, #16]
 8004ee0:	f8cd a000 	str.w	sl, [sp]
 8004ee4:	464b      	mov	r3, r9
 8004ee6:	aa03      	add	r2, sp, #12
 8004ee8:	4621      	mov	r1, r4
 8004eea:	4640      	mov	r0, r8
 8004eec:	f7ff fee2 	bl	8004cb4 <_printf_common>
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d14c      	bne.n	8004f8e <_printf_i+0x1fe>
 8004ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef8:	b004      	add	sp, #16
 8004efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004efe:	4835      	ldr	r0, [pc, #212]	; (8004fd4 <_printf_i+0x244>)
 8004f00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f04:	6829      	ldr	r1, [r5, #0]
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f0c:	6029      	str	r1, [r5, #0]
 8004f0e:	061d      	lsls	r5, r3, #24
 8004f10:	d514      	bpl.n	8004f3c <_printf_i+0x1ac>
 8004f12:	07df      	lsls	r7, r3, #31
 8004f14:	bf44      	itt	mi
 8004f16:	f043 0320 	orrmi.w	r3, r3, #32
 8004f1a:	6023      	strmi	r3, [r4, #0]
 8004f1c:	b91e      	cbnz	r6, 8004f26 <_printf_i+0x196>
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	f023 0320 	bic.w	r3, r3, #32
 8004f24:	6023      	str	r3, [r4, #0]
 8004f26:	2310      	movs	r3, #16
 8004f28:	e7b0      	b.n	8004e8c <_printf_i+0xfc>
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	f043 0320 	orr.w	r3, r3, #32
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	2378      	movs	r3, #120	; 0x78
 8004f34:	4828      	ldr	r0, [pc, #160]	; (8004fd8 <_printf_i+0x248>)
 8004f36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f3a:	e7e3      	b.n	8004f04 <_printf_i+0x174>
 8004f3c:	0659      	lsls	r1, r3, #25
 8004f3e:	bf48      	it	mi
 8004f40:	b2b6      	uxthmi	r6, r6
 8004f42:	e7e6      	b.n	8004f12 <_printf_i+0x182>
 8004f44:	4615      	mov	r5, r2
 8004f46:	e7bb      	b.n	8004ec0 <_printf_i+0x130>
 8004f48:	682b      	ldr	r3, [r5, #0]
 8004f4a:	6826      	ldr	r6, [r4, #0]
 8004f4c:	6961      	ldr	r1, [r4, #20]
 8004f4e:	1d18      	adds	r0, r3, #4
 8004f50:	6028      	str	r0, [r5, #0]
 8004f52:	0635      	lsls	r5, r6, #24
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	d501      	bpl.n	8004f5c <_printf_i+0x1cc>
 8004f58:	6019      	str	r1, [r3, #0]
 8004f5a:	e002      	b.n	8004f62 <_printf_i+0x1d2>
 8004f5c:	0670      	lsls	r0, r6, #25
 8004f5e:	d5fb      	bpl.n	8004f58 <_printf_i+0x1c8>
 8004f60:	8019      	strh	r1, [r3, #0]
 8004f62:	2300      	movs	r3, #0
 8004f64:	6123      	str	r3, [r4, #16]
 8004f66:	4615      	mov	r5, r2
 8004f68:	e7ba      	b.n	8004ee0 <_printf_i+0x150>
 8004f6a:	682b      	ldr	r3, [r5, #0]
 8004f6c:	1d1a      	adds	r2, r3, #4
 8004f6e:	602a      	str	r2, [r5, #0]
 8004f70:	681d      	ldr	r5, [r3, #0]
 8004f72:	6862      	ldr	r2, [r4, #4]
 8004f74:	2100      	movs	r1, #0
 8004f76:	4628      	mov	r0, r5
 8004f78:	f7fb f93a 	bl	80001f0 <memchr>
 8004f7c:	b108      	cbz	r0, 8004f82 <_printf_i+0x1f2>
 8004f7e:	1b40      	subs	r0, r0, r5
 8004f80:	6060      	str	r0, [r4, #4]
 8004f82:	6863      	ldr	r3, [r4, #4]
 8004f84:	6123      	str	r3, [r4, #16]
 8004f86:	2300      	movs	r3, #0
 8004f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f8c:	e7a8      	b.n	8004ee0 <_printf_i+0x150>
 8004f8e:	6923      	ldr	r3, [r4, #16]
 8004f90:	462a      	mov	r2, r5
 8004f92:	4649      	mov	r1, r9
 8004f94:	4640      	mov	r0, r8
 8004f96:	47d0      	blx	sl
 8004f98:	3001      	adds	r0, #1
 8004f9a:	d0ab      	beq.n	8004ef4 <_printf_i+0x164>
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	079b      	lsls	r3, r3, #30
 8004fa0:	d413      	bmi.n	8004fca <_printf_i+0x23a>
 8004fa2:	68e0      	ldr	r0, [r4, #12]
 8004fa4:	9b03      	ldr	r3, [sp, #12]
 8004fa6:	4298      	cmp	r0, r3
 8004fa8:	bfb8      	it	lt
 8004faa:	4618      	movlt	r0, r3
 8004fac:	e7a4      	b.n	8004ef8 <_printf_i+0x168>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	4632      	mov	r2, r6
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	4640      	mov	r0, r8
 8004fb6:	47d0      	blx	sl
 8004fb8:	3001      	adds	r0, #1
 8004fba:	d09b      	beq.n	8004ef4 <_printf_i+0x164>
 8004fbc:	3501      	adds	r5, #1
 8004fbe:	68e3      	ldr	r3, [r4, #12]
 8004fc0:	9903      	ldr	r1, [sp, #12]
 8004fc2:	1a5b      	subs	r3, r3, r1
 8004fc4:	42ab      	cmp	r3, r5
 8004fc6:	dcf2      	bgt.n	8004fae <_printf_i+0x21e>
 8004fc8:	e7eb      	b.n	8004fa2 <_printf_i+0x212>
 8004fca:	2500      	movs	r5, #0
 8004fcc:	f104 0619 	add.w	r6, r4, #25
 8004fd0:	e7f5      	b.n	8004fbe <_printf_i+0x22e>
 8004fd2:	bf00      	nop
 8004fd4:	08006979 	.word	0x08006979
 8004fd8:	0800698a 	.word	0x0800698a

08004fdc <memcpy>:
 8004fdc:	440a      	add	r2, r1
 8004fde:	4291      	cmp	r1, r2
 8004fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fe4:	d100      	bne.n	8004fe8 <memcpy+0xc>
 8004fe6:	4770      	bx	lr
 8004fe8:	b510      	push	{r4, lr}
 8004fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ff2:	4291      	cmp	r1, r2
 8004ff4:	d1f9      	bne.n	8004fea <memcpy+0xe>
 8004ff6:	bd10      	pop	{r4, pc}

08004ff8 <memmove>:
 8004ff8:	4288      	cmp	r0, r1
 8004ffa:	b510      	push	{r4, lr}
 8004ffc:	eb01 0402 	add.w	r4, r1, r2
 8005000:	d902      	bls.n	8005008 <memmove+0x10>
 8005002:	4284      	cmp	r4, r0
 8005004:	4623      	mov	r3, r4
 8005006:	d807      	bhi.n	8005018 <memmove+0x20>
 8005008:	1e43      	subs	r3, r0, #1
 800500a:	42a1      	cmp	r1, r4
 800500c:	d008      	beq.n	8005020 <memmove+0x28>
 800500e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005012:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005016:	e7f8      	b.n	800500a <memmove+0x12>
 8005018:	4402      	add	r2, r0
 800501a:	4601      	mov	r1, r0
 800501c:	428a      	cmp	r2, r1
 800501e:	d100      	bne.n	8005022 <memmove+0x2a>
 8005020:	bd10      	pop	{r4, pc}
 8005022:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005026:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800502a:	e7f7      	b.n	800501c <memmove+0x24>

0800502c <_free_r>:
 800502c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800502e:	2900      	cmp	r1, #0
 8005030:	d044      	beq.n	80050bc <_free_r+0x90>
 8005032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005036:	9001      	str	r0, [sp, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	f1a1 0404 	sub.w	r4, r1, #4
 800503e:	bfb8      	it	lt
 8005040:	18e4      	addlt	r4, r4, r3
 8005042:	f000 f913 	bl	800526c <__malloc_lock>
 8005046:	4a1e      	ldr	r2, [pc, #120]	; (80050c0 <_free_r+0x94>)
 8005048:	9801      	ldr	r0, [sp, #4]
 800504a:	6813      	ldr	r3, [r2, #0]
 800504c:	b933      	cbnz	r3, 800505c <_free_r+0x30>
 800504e:	6063      	str	r3, [r4, #4]
 8005050:	6014      	str	r4, [r2, #0]
 8005052:	b003      	add	sp, #12
 8005054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005058:	f000 b90e 	b.w	8005278 <__malloc_unlock>
 800505c:	42a3      	cmp	r3, r4
 800505e:	d908      	bls.n	8005072 <_free_r+0x46>
 8005060:	6825      	ldr	r5, [r4, #0]
 8005062:	1961      	adds	r1, r4, r5
 8005064:	428b      	cmp	r3, r1
 8005066:	bf01      	itttt	eq
 8005068:	6819      	ldreq	r1, [r3, #0]
 800506a:	685b      	ldreq	r3, [r3, #4]
 800506c:	1949      	addeq	r1, r1, r5
 800506e:	6021      	streq	r1, [r4, #0]
 8005070:	e7ed      	b.n	800504e <_free_r+0x22>
 8005072:	461a      	mov	r2, r3
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	b10b      	cbz	r3, 800507c <_free_r+0x50>
 8005078:	42a3      	cmp	r3, r4
 800507a:	d9fa      	bls.n	8005072 <_free_r+0x46>
 800507c:	6811      	ldr	r1, [r2, #0]
 800507e:	1855      	adds	r5, r2, r1
 8005080:	42a5      	cmp	r5, r4
 8005082:	d10b      	bne.n	800509c <_free_r+0x70>
 8005084:	6824      	ldr	r4, [r4, #0]
 8005086:	4421      	add	r1, r4
 8005088:	1854      	adds	r4, r2, r1
 800508a:	42a3      	cmp	r3, r4
 800508c:	6011      	str	r1, [r2, #0]
 800508e:	d1e0      	bne.n	8005052 <_free_r+0x26>
 8005090:	681c      	ldr	r4, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	6053      	str	r3, [r2, #4]
 8005096:	4421      	add	r1, r4
 8005098:	6011      	str	r1, [r2, #0]
 800509a:	e7da      	b.n	8005052 <_free_r+0x26>
 800509c:	d902      	bls.n	80050a4 <_free_r+0x78>
 800509e:	230c      	movs	r3, #12
 80050a0:	6003      	str	r3, [r0, #0]
 80050a2:	e7d6      	b.n	8005052 <_free_r+0x26>
 80050a4:	6825      	ldr	r5, [r4, #0]
 80050a6:	1961      	adds	r1, r4, r5
 80050a8:	428b      	cmp	r3, r1
 80050aa:	bf04      	itt	eq
 80050ac:	6819      	ldreq	r1, [r3, #0]
 80050ae:	685b      	ldreq	r3, [r3, #4]
 80050b0:	6063      	str	r3, [r4, #4]
 80050b2:	bf04      	itt	eq
 80050b4:	1949      	addeq	r1, r1, r5
 80050b6:	6021      	streq	r1, [r4, #0]
 80050b8:	6054      	str	r4, [r2, #4]
 80050ba:	e7ca      	b.n	8005052 <_free_r+0x26>
 80050bc:	b003      	add	sp, #12
 80050be:	bd30      	pop	{r4, r5, pc}
 80050c0:	20000194 	.word	0x20000194

080050c4 <sbrk_aligned>:
 80050c4:	b570      	push	{r4, r5, r6, lr}
 80050c6:	4e0e      	ldr	r6, [pc, #56]	; (8005100 <sbrk_aligned+0x3c>)
 80050c8:	460c      	mov	r4, r1
 80050ca:	6831      	ldr	r1, [r6, #0]
 80050cc:	4605      	mov	r5, r0
 80050ce:	b911      	cbnz	r1, 80050d6 <sbrk_aligned+0x12>
 80050d0:	f000 f8bc 	bl	800524c <_sbrk_r>
 80050d4:	6030      	str	r0, [r6, #0]
 80050d6:	4621      	mov	r1, r4
 80050d8:	4628      	mov	r0, r5
 80050da:	f000 f8b7 	bl	800524c <_sbrk_r>
 80050de:	1c43      	adds	r3, r0, #1
 80050e0:	d00a      	beq.n	80050f8 <sbrk_aligned+0x34>
 80050e2:	1cc4      	adds	r4, r0, #3
 80050e4:	f024 0403 	bic.w	r4, r4, #3
 80050e8:	42a0      	cmp	r0, r4
 80050ea:	d007      	beq.n	80050fc <sbrk_aligned+0x38>
 80050ec:	1a21      	subs	r1, r4, r0
 80050ee:	4628      	mov	r0, r5
 80050f0:	f000 f8ac 	bl	800524c <_sbrk_r>
 80050f4:	3001      	adds	r0, #1
 80050f6:	d101      	bne.n	80050fc <sbrk_aligned+0x38>
 80050f8:	f04f 34ff 	mov.w	r4, #4294967295
 80050fc:	4620      	mov	r0, r4
 80050fe:	bd70      	pop	{r4, r5, r6, pc}
 8005100:	20000198 	.word	0x20000198

08005104 <_malloc_r>:
 8005104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005108:	1ccd      	adds	r5, r1, #3
 800510a:	f025 0503 	bic.w	r5, r5, #3
 800510e:	3508      	adds	r5, #8
 8005110:	2d0c      	cmp	r5, #12
 8005112:	bf38      	it	cc
 8005114:	250c      	movcc	r5, #12
 8005116:	2d00      	cmp	r5, #0
 8005118:	4607      	mov	r7, r0
 800511a:	db01      	blt.n	8005120 <_malloc_r+0x1c>
 800511c:	42a9      	cmp	r1, r5
 800511e:	d905      	bls.n	800512c <_malloc_r+0x28>
 8005120:	230c      	movs	r3, #12
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	2600      	movs	r6, #0
 8005126:	4630      	mov	r0, r6
 8005128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800512c:	4e2e      	ldr	r6, [pc, #184]	; (80051e8 <_malloc_r+0xe4>)
 800512e:	f000 f89d 	bl	800526c <__malloc_lock>
 8005132:	6833      	ldr	r3, [r6, #0]
 8005134:	461c      	mov	r4, r3
 8005136:	bb34      	cbnz	r4, 8005186 <_malloc_r+0x82>
 8005138:	4629      	mov	r1, r5
 800513a:	4638      	mov	r0, r7
 800513c:	f7ff ffc2 	bl	80050c4 <sbrk_aligned>
 8005140:	1c43      	adds	r3, r0, #1
 8005142:	4604      	mov	r4, r0
 8005144:	d14d      	bne.n	80051e2 <_malloc_r+0xde>
 8005146:	6834      	ldr	r4, [r6, #0]
 8005148:	4626      	mov	r6, r4
 800514a:	2e00      	cmp	r6, #0
 800514c:	d140      	bne.n	80051d0 <_malloc_r+0xcc>
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	4631      	mov	r1, r6
 8005152:	4638      	mov	r0, r7
 8005154:	eb04 0803 	add.w	r8, r4, r3
 8005158:	f000 f878 	bl	800524c <_sbrk_r>
 800515c:	4580      	cmp	r8, r0
 800515e:	d13a      	bne.n	80051d6 <_malloc_r+0xd2>
 8005160:	6821      	ldr	r1, [r4, #0]
 8005162:	3503      	adds	r5, #3
 8005164:	1a6d      	subs	r5, r5, r1
 8005166:	f025 0503 	bic.w	r5, r5, #3
 800516a:	3508      	adds	r5, #8
 800516c:	2d0c      	cmp	r5, #12
 800516e:	bf38      	it	cc
 8005170:	250c      	movcc	r5, #12
 8005172:	4629      	mov	r1, r5
 8005174:	4638      	mov	r0, r7
 8005176:	f7ff ffa5 	bl	80050c4 <sbrk_aligned>
 800517a:	3001      	adds	r0, #1
 800517c:	d02b      	beq.n	80051d6 <_malloc_r+0xd2>
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	442b      	add	r3, r5
 8005182:	6023      	str	r3, [r4, #0]
 8005184:	e00e      	b.n	80051a4 <_malloc_r+0xa0>
 8005186:	6822      	ldr	r2, [r4, #0]
 8005188:	1b52      	subs	r2, r2, r5
 800518a:	d41e      	bmi.n	80051ca <_malloc_r+0xc6>
 800518c:	2a0b      	cmp	r2, #11
 800518e:	d916      	bls.n	80051be <_malloc_r+0xba>
 8005190:	1961      	adds	r1, r4, r5
 8005192:	42a3      	cmp	r3, r4
 8005194:	6025      	str	r5, [r4, #0]
 8005196:	bf18      	it	ne
 8005198:	6059      	strne	r1, [r3, #4]
 800519a:	6863      	ldr	r3, [r4, #4]
 800519c:	bf08      	it	eq
 800519e:	6031      	streq	r1, [r6, #0]
 80051a0:	5162      	str	r2, [r4, r5]
 80051a2:	604b      	str	r3, [r1, #4]
 80051a4:	4638      	mov	r0, r7
 80051a6:	f104 060b 	add.w	r6, r4, #11
 80051aa:	f000 f865 	bl	8005278 <__malloc_unlock>
 80051ae:	f026 0607 	bic.w	r6, r6, #7
 80051b2:	1d23      	adds	r3, r4, #4
 80051b4:	1af2      	subs	r2, r6, r3
 80051b6:	d0b6      	beq.n	8005126 <_malloc_r+0x22>
 80051b8:	1b9b      	subs	r3, r3, r6
 80051ba:	50a3      	str	r3, [r4, r2]
 80051bc:	e7b3      	b.n	8005126 <_malloc_r+0x22>
 80051be:	6862      	ldr	r2, [r4, #4]
 80051c0:	42a3      	cmp	r3, r4
 80051c2:	bf0c      	ite	eq
 80051c4:	6032      	streq	r2, [r6, #0]
 80051c6:	605a      	strne	r2, [r3, #4]
 80051c8:	e7ec      	b.n	80051a4 <_malloc_r+0xa0>
 80051ca:	4623      	mov	r3, r4
 80051cc:	6864      	ldr	r4, [r4, #4]
 80051ce:	e7b2      	b.n	8005136 <_malloc_r+0x32>
 80051d0:	4634      	mov	r4, r6
 80051d2:	6876      	ldr	r6, [r6, #4]
 80051d4:	e7b9      	b.n	800514a <_malloc_r+0x46>
 80051d6:	230c      	movs	r3, #12
 80051d8:	603b      	str	r3, [r7, #0]
 80051da:	4638      	mov	r0, r7
 80051dc:	f000 f84c 	bl	8005278 <__malloc_unlock>
 80051e0:	e7a1      	b.n	8005126 <_malloc_r+0x22>
 80051e2:	6025      	str	r5, [r4, #0]
 80051e4:	e7de      	b.n	80051a4 <_malloc_r+0xa0>
 80051e6:	bf00      	nop
 80051e8:	20000194 	.word	0x20000194

080051ec <_realloc_r>:
 80051ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051f0:	4680      	mov	r8, r0
 80051f2:	4614      	mov	r4, r2
 80051f4:	460e      	mov	r6, r1
 80051f6:	b921      	cbnz	r1, 8005202 <_realloc_r+0x16>
 80051f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051fc:	4611      	mov	r1, r2
 80051fe:	f7ff bf81 	b.w	8005104 <_malloc_r>
 8005202:	b92a      	cbnz	r2, 8005210 <_realloc_r+0x24>
 8005204:	f7ff ff12 	bl	800502c <_free_r>
 8005208:	4625      	mov	r5, r4
 800520a:	4628      	mov	r0, r5
 800520c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005210:	f000 f838 	bl	8005284 <_malloc_usable_size_r>
 8005214:	4284      	cmp	r4, r0
 8005216:	4607      	mov	r7, r0
 8005218:	d802      	bhi.n	8005220 <_realloc_r+0x34>
 800521a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800521e:	d812      	bhi.n	8005246 <_realloc_r+0x5a>
 8005220:	4621      	mov	r1, r4
 8005222:	4640      	mov	r0, r8
 8005224:	f7ff ff6e 	bl	8005104 <_malloc_r>
 8005228:	4605      	mov	r5, r0
 800522a:	2800      	cmp	r0, #0
 800522c:	d0ed      	beq.n	800520a <_realloc_r+0x1e>
 800522e:	42bc      	cmp	r4, r7
 8005230:	4622      	mov	r2, r4
 8005232:	4631      	mov	r1, r6
 8005234:	bf28      	it	cs
 8005236:	463a      	movcs	r2, r7
 8005238:	f7ff fed0 	bl	8004fdc <memcpy>
 800523c:	4631      	mov	r1, r6
 800523e:	4640      	mov	r0, r8
 8005240:	f7ff fef4 	bl	800502c <_free_r>
 8005244:	e7e1      	b.n	800520a <_realloc_r+0x1e>
 8005246:	4635      	mov	r5, r6
 8005248:	e7df      	b.n	800520a <_realloc_r+0x1e>
	...

0800524c <_sbrk_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	4d06      	ldr	r5, [pc, #24]	; (8005268 <_sbrk_r+0x1c>)
 8005250:	2300      	movs	r3, #0
 8005252:	4604      	mov	r4, r0
 8005254:	4608      	mov	r0, r1
 8005256:	602b      	str	r3, [r5, #0]
 8005258:	f7fc ff0e 	bl	8002078 <_sbrk>
 800525c:	1c43      	adds	r3, r0, #1
 800525e:	d102      	bne.n	8005266 <_sbrk_r+0x1a>
 8005260:	682b      	ldr	r3, [r5, #0]
 8005262:	b103      	cbz	r3, 8005266 <_sbrk_r+0x1a>
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	bd38      	pop	{r3, r4, r5, pc}
 8005268:	2000019c 	.word	0x2000019c

0800526c <__malloc_lock>:
 800526c:	4801      	ldr	r0, [pc, #4]	; (8005274 <__malloc_lock+0x8>)
 800526e:	f000 b811 	b.w	8005294 <__retarget_lock_acquire_recursive>
 8005272:	bf00      	nop
 8005274:	200001a0 	.word	0x200001a0

08005278 <__malloc_unlock>:
 8005278:	4801      	ldr	r0, [pc, #4]	; (8005280 <__malloc_unlock+0x8>)
 800527a:	f000 b80c 	b.w	8005296 <__retarget_lock_release_recursive>
 800527e:	bf00      	nop
 8005280:	200001a0 	.word	0x200001a0

08005284 <_malloc_usable_size_r>:
 8005284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005288:	1f18      	subs	r0, r3, #4
 800528a:	2b00      	cmp	r3, #0
 800528c:	bfbc      	itt	lt
 800528e:	580b      	ldrlt	r3, [r1, r0]
 8005290:	18c0      	addlt	r0, r0, r3
 8005292:	4770      	bx	lr

08005294 <__retarget_lock_acquire_recursive>:
 8005294:	4770      	bx	lr

08005296 <__retarget_lock_release_recursive>:
 8005296:	4770      	bx	lr

08005298 <pow>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	ed2d 8b02 	vpush	{d8}
 800529e:	eeb0 8a40 	vmov.f32	s16, s0
 80052a2:	eef0 8a60 	vmov.f32	s17, s1
 80052a6:	ec55 4b11 	vmov	r4, r5, d1
 80052aa:	f000 f8bd 	bl	8005428 <__ieee754_pow>
 80052ae:	4622      	mov	r2, r4
 80052b0:	462b      	mov	r3, r5
 80052b2:	4620      	mov	r0, r4
 80052b4:	4629      	mov	r1, r5
 80052b6:	ec57 6b10 	vmov	r6, r7, d0
 80052ba:	f7fb fc3f 	bl	8000b3c <__aeabi_dcmpun>
 80052be:	2800      	cmp	r0, #0
 80052c0:	d13b      	bne.n	800533a <pow+0xa2>
 80052c2:	ec51 0b18 	vmov	r0, r1, d8
 80052c6:	2200      	movs	r2, #0
 80052c8:	2300      	movs	r3, #0
 80052ca:	f7fb fc05 	bl	8000ad8 <__aeabi_dcmpeq>
 80052ce:	b1b8      	cbz	r0, 8005300 <pow+0x68>
 80052d0:	2200      	movs	r2, #0
 80052d2:	2300      	movs	r3, #0
 80052d4:	4620      	mov	r0, r4
 80052d6:	4629      	mov	r1, r5
 80052d8:	f7fb fbfe 	bl	8000ad8 <__aeabi_dcmpeq>
 80052dc:	2800      	cmp	r0, #0
 80052de:	d146      	bne.n	800536e <pow+0xd6>
 80052e0:	ec45 4b10 	vmov	d0, r4, r5
 80052e4:	f001 f9ad 	bl	8006642 <finite>
 80052e8:	b338      	cbz	r0, 800533a <pow+0xa2>
 80052ea:	2200      	movs	r2, #0
 80052ec:	2300      	movs	r3, #0
 80052ee:	4620      	mov	r0, r4
 80052f0:	4629      	mov	r1, r5
 80052f2:	f7fb fbfb 	bl	8000aec <__aeabi_dcmplt>
 80052f6:	b300      	cbz	r0, 800533a <pow+0xa2>
 80052f8:	f7ff fb26 	bl	8004948 <__errno>
 80052fc:	2322      	movs	r3, #34	; 0x22
 80052fe:	e01b      	b.n	8005338 <pow+0xa0>
 8005300:	ec47 6b10 	vmov	d0, r6, r7
 8005304:	f001 f99d 	bl	8006642 <finite>
 8005308:	b9e0      	cbnz	r0, 8005344 <pow+0xac>
 800530a:	eeb0 0a48 	vmov.f32	s0, s16
 800530e:	eef0 0a68 	vmov.f32	s1, s17
 8005312:	f001 f996 	bl	8006642 <finite>
 8005316:	b1a8      	cbz	r0, 8005344 <pow+0xac>
 8005318:	ec45 4b10 	vmov	d0, r4, r5
 800531c:	f001 f991 	bl	8006642 <finite>
 8005320:	b180      	cbz	r0, 8005344 <pow+0xac>
 8005322:	4632      	mov	r2, r6
 8005324:	463b      	mov	r3, r7
 8005326:	4630      	mov	r0, r6
 8005328:	4639      	mov	r1, r7
 800532a:	f7fb fc07 	bl	8000b3c <__aeabi_dcmpun>
 800532e:	2800      	cmp	r0, #0
 8005330:	d0e2      	beq.n	80052f8 <pow+0x60>
 8005332:	f7ff fb09 	bl	8004948 <__errno>
 8005336:	2321      	movs	r3, #33	; 0x21
 8005338:	6003      	str	r3, [r0, #0]
 800533a:	ecbd 8b02 	vpop	{d8}
 800533e:	ec47 6b10 	vmov	d0, r6, r7
 8005342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005344:	2200      	movs	r2, #0
 8005346:	2300      	movs	r3, #0
 8005348:	4630      	mov	r0, r6
 800534a:	4639      	mov	r1, r7
 800534c:	f7fb fbc4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005350:	2800      	cmp	r0, #0
 8005352:	d0f2      	beq.n	800533a <pow+0xa2>
 8005354:	eeb0 0a48 	vmov.f32	s0, s16
 8005358:	eef0 0a68 	vmov.f32	s1, s17
 800535c:	f001 f971 	bl	8006642 <finite>
 8005360:	2800      	cmp	r0, #0
 8005362:	d0ea      	beq.n	800533a <pow+0xa2>
 8005364:	ec45 4b10 	vmov	d0, r4, r5
 8005368:	f001 f96b 	bl	8006642 <finite>
 800536c:	e7c3      	b.n	80052f6 <pow+0x5e>
 800536e:	4f01      	ldr	r7, [pc, #4]	; (8005374 <pow+0xdc>)
 8005370:	2600      	movs	r6, #0
 8005372:	e7e2      	b.n	800533a <pow+0xa2>
 8005374:	3ff00000 	.word	0x3ff00000

08005378 <powf>:
 8005378:	b508      	push	{r3, lr}
 800537a:	ed2d 8b04 	vpush	{d8-d9}
 800537e:	eeb0 8a60 	vmov.f32	s16, s1
 8005382:	eeb0 9a40 	vmov.f32	s18, s0
 8005386:	f000 fe2f 	bl	8005fe8 <__ieee754_powf>
 800538a:	eeb4 8a48 	vcmp.f32	s16, s16
 800538e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005392:	eef0 8a40 	vmov.f32	s17, s0
 8005396:	d63e      	bvs.n	8005416 <powf+0x9e>
 8005398:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800539c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a0:	d112      	bne.n	80053c8 <powf+0x50>
 80053a2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80053a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053aa:	d039      	beq.n	8005420 <powf+0xa8>
 80053ac:	eeb0 0a48 	vmov.f32	s0, s16
 80053b0:	f001 f9df 	bl	8006772 <finitef>
 80053b4:	b378      	cbz	r0, 8005416 <powf+0x9e>
 80053b6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80053ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053be:	d52a      	bpl.n	8005416 <powf+0x9e>
 80053c0:	f7ff fac2 	bl	8004948 <__errno>
 80053c4:	2322      	movs	r3, #34	; 0x22
 80053c6:	e014      	b.n	80053f2 <powf+0x7a>
 80053c8:	f001 f9d3 	bl	8006772 <finitef>
 80053cc:	b998      	cbnz	r0, 80053f6 <powf+0x7e>
 80053ce:	eeb0 0a49 	vmov.f32	s0, s18
 80053d2:	f001 f9ce 	bl	8006772 <finitef>
 80053d6:	b170      	cbz	r0, 80053f6 <powf+0x7e>
 80053d8:	eeb0 0a48 	vmov.f32	s0, s16
 80053dc:	f001 f9c9 	bl	8006772 <finitef>
 80053e0:	b148      	cbz	r0, 80053f6 <powf+0x7e>
 80053e2:	eef4 8a68 	vcmp.f32	s17, s17
 80053e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ea:	d7e9      	bvc.n	80053c0 <powf+0x48>
 80053ec:	f7ff faac 	bl	8004948 <__errno>
 80053f0:	2321      	movs	r3, #33	; 0x21
 80053f2:	6003      	str	r3, [r0, #0]
 80053f4:	e00f      	b.n	8005416 <powf+0x9e>
 80053f6:	eef5 8a40 	vcmp.f32	s17, #0.0
 80053fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053fe:	d10a      	bne.n	8005416 <powf+0x9e>
 8005400:	eeb0 0a49 	vmov.f32	s0, s18
 8005404:	f001 f9b5 	bl	8006772 <finitef>
 8005408:	b128      	cbz	r0, 8005416 <powf+0x9e>
 800540a:	eeb0 0a48 	vmov.f32	s0, s16
 800540e:	f001 f9b0 	bl	8006772 <finitef>
 8005412:	2800      	cmp	r0, #0
 8005414:	d1d4      	bne.n	80053c0 <powf+0x48>
 8005416:	eeb0 0a68 	vmov.f32	s0, s17
 800541a:	ecbd 8b04 	vpop	{d8-d9}
 800541e:	bd08      	pop	{r3, pc}
 8005420:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8005424:	e7f7      	b.n	8005416 <powf+0x9e>
	...

08005428 <__ieee754_pow>:
 8005428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542c:	ed2d 8b06 	vpush	{d8-d10}
 8005430:	b089      	sub	sp, #36	; 0x24
 8005432:	ed8d 1b00 	vstr	d1, [sp]
 8005436:	e9dd 2900 	ldrd	r2, r9, [sp]
 800543a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800543e:	ea58 0102 	orrs.w	r1, r8, r2
 8005442:	ec57 6b10 	vmov	r6, r7, d0
 8005446:	d115      	bne.n	8005474 <__ieee754_pow+0x4c>
 8005448:	19b3      	adds	r3, r6, r6
 800544a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800544e:	4152      	adcs	r2, r2
 8005450:	4299      	cmp	r1, r3
 8005452:	4b89      	ldr	r3, [pc, #548]	; (8005678 <__ieee754_pow+0x250>)
 8005454:	4193      	sbcs	r3, r2
 8005456:	f080 84d2 	bcs.w	8005dfe <__ieee754_pow+0x9d6>
 800545a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800545e:	4630      	mov	r0, r6
 8005460:	4639      	mov	r1, r7
 8005462:	f7fa ff1b 	bl	800029c <__adddf3>
 8005466:	ec41 0b10 	vmov	d0, r0, r1
 800546a:	b009      	add	sp, #36	; 0x24
 800546c:	ecbd 8b06 	vpop	{d8-d10}
 8005470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005474:	4b81      	ldr	r3, [pc, #516]	; (800567c <__ieee754_pow+0x254>)
 8005476:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800547a:	429c      	cmp	r4, r3
 800547c:	ee10 aa10 	vmov	sl, s0
 8005480:	463d      	mov	r5, r7
 8005482:	dc06      	bgt.n	8005492 <__ieee754_pow+0x6a>
 8005484:	d101      	bne.n	800548a <__ieee754_pow+0x62>
 8005486:	2e00      	cmp	r6, #0
 8005488:	d1e7      	bne.n	800545a <__ieee754_pow+0x32>
 800548a:	4598      	cmp	r8, r3
 800548c:	dc01      	bgt.n	8005492 <__ieee754_pow+0x6a>
 800548e:	d10f      	bne.n	80054b0 <__ieee754_pow+0x88>
 8005490:	b172      	cbz	r2, 80054b0 <__ieee754_pow+0x88>
 8005492:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005496:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800549a:	ea55 050a 	orrs.w	r5, r5, sl
 800549e:	d1dc      	bne.n	800545a <__ieee754_pow+0x32>
 80054a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80054a4:	18db      	adds	r3, r3, r3
 80054a6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80054aa:	4152      	adcs	r2, r2
 80054ac:	429d      	cmp	r5, r3
 80054ae:	e7d0      	b.n	8005452 <__ieee754_pow+0x2a>
 80054b0:	2d00      	cmp	r5, #0
 80054b2:	da3b      	bge.n	800552c <__ieee754_pow+0x104>
 80054b4:	4b72      	ldr	r3, [pc, #456]	; (8005680 <__ieee754_pow+0x258>)
 80054b6:	4598      	cmp	r8, r3
 80054b8:	dc51      	bgt.n	800555e <__ieee754_pow+0x136>
 80054ba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80054be:	4598      	cmp	r8, r3
 80054c0:	f340 84ac 	ble.w	8005e1c <__ieee754_pow+0x9f4>
 80054c4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80054c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80054cc:	2b14      	cmp	r3, #20
 80054ce:	dd0f      	ble.n	80054f0 <__ieee754_pow+0xc8>
 80054d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80054d4:	fa22 f103 	lsr.w	r1, r2, r3
 80054d8:	fa01 f303 	lsl.w	r3, r1, r3
 80054dc:	4293      	cmp	r3, r2
 80054de:	f040 849d 	bne.w	8005e1c <__ieee754_pow+0x9f4>
 80054e2:	f001 0101 	and.w	r1, r1, #1
 80054e6:	f1c1 0302 	rsb	r3, r1, #2
 80054ea:	9304      	str	r3, [sp, #16]
 80054ec:	b182      	cbz	r2, 8005510 <__ieee754_pow+0xe8>
 80054ee:	e05f      	b.n	80055b0 <__ieee754_pow+0x188>
 80054f0:	2a00      	cmp	r2, #0
 80054f2:	d15b      	bne.n	80055ac <__ieee754_pow+0x184>
 80054f4:	f1c3 0314 	rsb	r3, r3, #20
 80054f8:	fa48 f103 	asr.w	r1, r8, r3
 80054fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005500:	4543      	cmp	r3, r8
 8005502:	f040 8488 	bne.w	8005e16 <__ieee754_pow+0x9ee>
 8005506:	f001 0101 	and.w	r1, r1, #1
 800550a:	f1c1 0302 	rsb	r3, r1, #2
 800550e:	9304      	str	r3, [sp, #16]
 8005510:	4b5c      	ldr	r3, [pc, #368]	; (8005684 <__ieee754_pow+0x25c>)
 8005512:	4598      	cmp	r8, r3
 8005514:	d132      	bne.n	800557c <__ieee754_pow+0x154>
 8005516:	f1b9 0f00 	cmp.w	r9, #0
 800551a:	f280 8478 	bge.w	8005e0e <__ieee754_pow+0x9e6>
 800551e:	4959      	ldr	r1, [pc, #356]	; (8005684 <__ieee754_pow+0x25c>)
 8005520:	4632      	mov	r2, r6
 8005522:	463b      	mov	r3, r7
 8005524:	2000      	movs	r0, #0
 8005526:	f7fb f999 	bl	800085c <__aeabi_ddiv>
 800552a:	e79c      	b.n	8005466 <__ieee754_pow+0x3e>
 800552c:	2300      	movs	r3, #0
 800552e:	9304      	str	r3, [sp, #16]
 8005530:	2a00      	cmp	r2, #0
 8005532:	d13d      	bne.n	80055b0 <__ieee754_pow+0x188>
 8005534:	4b51      	ldr	r3, [pc, #324]	; (800567c <__ieee754_pow+0x254>)
 8005536:	4598      	cmp	r8, r3
 8005538:	d1ea      	bne.n	8005510 <__ieee754_pow+0xe8>
 800553a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800553e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005542:	ea53 030a 	orrs.w	r3, r3, sl
 8005546:	f000 845a 	beq.w	8005dfe <__ieee754_pow+0x9d6>
 800554a:	4b4f      	ldr	r3, [pc, #316]	; (8005688 <__ieee754_pow+0x260>)
 800554c:	429c      	cmp	r4, r3
 800554e:	dd08      	ble.n	8005562 <__ieee754_pow+0x13a>
 8005550:	f1b9 0f00 	cmp.w	r9, #0
 8005554:	f2c0 8457 	blt.w	8005e06 <__ieee754_pow+0x9de>
 8005558:	e9dd 0100 	ldrd	r0, r1, [sp]
 800555c:	e783      	b.n	8005466 <__ieee754_pow+0x3e>
 800555e:	2302      	movs	r3, #2
 8005560:	e7e5      	b.n	800552e <__ieee754_pow+0x106>
 8005562:	f1b9 0f00 	cmp.w	r9, #0
 8005566:	f04f 0000 	mov.w	r0, #0
 800556a:	f04f 0100 	mov.w	r1, #0
 800556e:	f6bf af7a 	bge.w	8005466 <__ieee754_pow+0x3e>
 8005572:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005576:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800557a:	e774      	b.n	8005466 <__ieee754_pow+0x3e>
 800557c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005580:	d106      	bne.n	8005590 <__ieee754_pow+0x168>
 8005582:	4632      	mov	r2, r6
 8005584:	463b      	mov	r3, r7
 8005586:	4630      	mov	r0, r6
 8005588:	4639      	mov	r1, r7
 800558a:	f7fb f83d 	bl	8000608 <__aeabi_dmul>
 800558e:	e76a      	b.n	8005466 <__ieee754_pow+0x3e>
 8005590:	4b3e      	ldr	r3, [pc, #248]	; (800568c <__ieee754_pow+0x264>)
 8005592:	4599      	cmp	r9, r3
 8005594:	d10c      	bne.n	80055b0 <__ieee754_pow+0x188>
 8005596:	2d00      	cmp	r5, #0
 8005598:	db0a      	blt.n	80055b0 <__ieee754_pow+0x188>
 800559a:	ec47 6b10 	vmov	d0, r6, r7
 800559e:	b009      	add	sp, #36	; 0x24
 80055a0:	ecbd 8b06 	vpop	{d8-d10}
 80055a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a8:	f000 bc6c 	b.w	8005e84 <__ieee754_sqrt>
 80055ac:	2300      	movs	r3, #0
 80055ae:	9304      	str	r3, [sp, #16]
 80055b0:	ec47 6b10 	vmov	d0, r6, r7
 80055b4:	f001 f83c 	bl	8006630 <fabs>
 80055b8:	ec51 0b10 	vmov	r0, r1, d0
 80055bc:	f1ba 0f00 	cmp.w	sl, #0
 80055c0:	d129      	bne.n	8005616 <__ieee754_pow+0x1ee>
 80055c2:	b124      	cbz	r4, 80055ce <__ieee754_pow+0x1a6>
 80055c4:	4b2f      	ldr	r3, [pc, #188]	; (8005684 <__ieee754_pow+0x25c>)
 80055c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d123      	bne.n	8005616 <__ieee754_pow+0x1ee>
 80055ce:	f1b9 0f00 	cmp.w	r9, #0
 80055d2:	da05      	bge.n	80055e0 <__ieee754_pow+0x1b8>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	2000      	movs	r0, #0
 80055da:	492a      	ldr	r1, [pc, #168]	; (8005684 <__ieee754_pow+0x25c>)
 80055dc:	f7fb f93e 	bl	800085c <__aeabi_ddiv>
 80055e0:	2d00      	cmp	r5, #0
 80055e2:	f6bf af40 	bge.w	8005466 <__ieee754_pow+0x3e>
 80055e6:	9b04      	ldr	r3, [sp, #16]
 80055e8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80055ec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80055f0:	4323      	orrs	r3, r4
 80055f2:	d108      	bne.n	8005606 <__ieee754_pow+0x1de>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4610      	mov	r0, r2
 80055fa:	4619      	mov	r1, r3
 80055fc:	f7fa fe4c 	bl	8000298 <__aeabi_dsub>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	e78f      	b.n	8005526 <__ieee754_pow+0xfe>
 8005606:	9b04      	ldr	r3, [sp, #16]
 8005608:	2b01      	cmp	r3, #1
 800560a:	f47f af2c 	bne.w	8005466 <__ieee754_pow+0x3e>
 800560e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005612:	4619      	mov	r1, r3
 8005614:	e727      	b.n	8005466 <__ieee754_pow+0x3e>
 8005616:	0feb      	lsrs	r3, r5, #31
 8005618:	3b01      	subs	r3, #1
 800561a:	9306      	str	r3, [sp, #24]
 800561c:	9a06      	ldr	r2, [sp, #24]
 800561e:	9b04      	ldr	r3, [sp, #16]
 8005620:	4313      	orrs	r3, r2
 8005622:	d102      	bne.n	800562a <__ieee754_pow+0x202>
 8005624:	4632      	mov	r2, r6
 8005626:	463b      	mov	r3, r7
 8005628:	e7e6      	b.n	80055f8 <__ieee754_pow+0x1d0>
 800562a:	4b19      	ldr	r3, [pc, #100]	; (8005690 <__ieee754_pow+0x268>)
 800562c:	4598      	cmp	r8, r3
 800562e:	f340 80fb 	ble.w	8005828 <__ieee754_pow+0x400>
 8005632:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005636:	4598      	cmp	r8, r3
 8005638:	4b13      	ldr	r3, [pc, #76]	; (8005688 <__ieee754_pow+0x260>)
 800563a:	dd0c      	ble.n	8005656 <__ieee754_pow+0x22e>
 800563c:	429c      	cmp	r4, r3
 800563e:	dc0f      	bgt.n	8005660 <__ieee754_pow+0x238>
 8005640:	f1b9 0f00 	cmp.w	r9, #0
 8005644:	da0f      	bge.n	8005666 <__ieee754_pow+0x23e>
 8005646:	2000      	movs	r0, #0
 8005648:	b009      	add	sp, #36	; 0x24
 800564a:	ecbd 8b06 	vpop	{d8-d10}
 800564e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005652:	f000 bfc1 	b.w	80065d8 <__math_oflow>
 8005656:	429c      	cmp	r4, r3
 8005658:	dbf2      	blt.n	8005640 <__ieee754_pow+0x218>
 800565a:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <__ieee754_pow+0x25c>)
 800565c:	429c      	cmp	r4, r3
 800565e:	dd19      	ble.n	8005694 <__ieee754_pow+0x26c>
 8005660:	f1b9 0f00 	cmp.w	r9, #0
 8005664:	dcef      	bgt.n	8005646 <__ieee754_pow+0x21e>
 8005666:	2000      	movs	r0, #0
 8005668:	b009      	add	sp, #36	; 0x24
 800566a:	ecbd 8b06 	vpop	{d8-d10}
 800566e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005672:	f000 bfa8 	b.w	80065c6 <__math_uflow>
 8005676:	bf00      	nop
 8005678:	fff00000 	.word	0xfff00000
 800567c:	7ff00000 	.word	0x7ff00000
 8005680:	433fffff 	.word	0x433fffff
 8005684:	3ff00000 	.word	0x3ff00000
 8005688:	3fefffff 	.word	0x3fefffff
 800568c:	3fe00000 	.word	0x3fe00000
 8005690:	41e00000 	.word	0x41e00000
 8005694:	4b60      	ldr	r3, [pc, #384]	; (8005818 <__ieee754_pow+0x3f0>)
 8005696:	2200      	movs	r2, #0
 8005698:	f7fa fdfe 	bl	8000298 <__aeabi_dsub>
 800569c:	a354      	add	r3, pc, #336	; (adr r3, 80057f0 <__ieee754_pow+0x3c8>)
 800569e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a2:	4604      	mov	r4, r0
 80056a4:	460d      	mov	r5, r1
 80056a6:	f7fa ffaf 	bl	8000608 <__aeabi_dmul>
 80056aa:	a353      	add	r3, pc, #332	; (adr r3, 80057f8 <__ieee754_pow+0x3d0>)
 80056ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b0:	4606      	mov	r6, r0
 80056b2:	460f      	mov	r7, r1
 80056b4:	4620      	mov	r0, r4
 80056b6:	4629      	mov	r1, r5
 80056b8:	f7fa ffa6 	bl	8000608 <__aeabi_dmul>
 80056bc:	4b57      	ldr	r3, [pc, #348]	; (800581c <__ieee754_pow+0x3f4>)
 80056be:	4682      	mov	sl, r0
 80056c0:	468b      	mov	fp, r1
 80056c2:	2200      	movs	r2, #0
 80056c4:	4620      	mov	r0, r4
 80056c6:	4629      	mov	r1, r5
 80056c8:	f7fa ff9e 	bl	8000608 <__aeabi_dmul>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	a14b      	add	r1, pc, #300	; (adr r1, 8005800 <__ieee754_pow+0x3d8>)
 80056d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056d6:	f7fa fddf 	bl	8000298 <__aeabi_dsub>
 80056da:	4622      	mov	r2, r4
 80056dc:	462b      	mov	r3, r5
 80056de:	f7fa ff93 	bl	8000608 <__aeabi_dmul>
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	2000      	movs	r0, #0
 80056e8:	494d      	ldr	r1, [pc, #308]	; (8005820 <__ieee754_pow+0x3f8>)
 80056ea:	f7fa fdd5 	bl	8000298 <__aeabi_dsub>
 80056ee:	4622      	mov	r2, r4
 80056f0:	4680      	mov	r8, r0
 80056f2:	4689      	mov	r9, r1
 80056f4:	462b      	mov	r3, r5
 80056f6:	4620      	mov	r0, r4
 80056f8:	4629      	mov	r1, r5
 80056fa:	f7fa ff85 	bl	8000608 <__aeabi_dmul>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	4640      	mov	r0, r8
 8005704:	4649      	mov	r1, r9
 8005706:	f7fa ff7f 	bl	8000608 <__aeabi_dmul>
 800570a:	a33f      	add	r3, pc, #252	; (adr r3, 8005808 <__ieee754_pow+0x3e0>)
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f7fa ff7a 	bl	8000608 <__aeabi_dmul>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4650      	mov	r0, sl
 800571a:	4659      	mov	r1, fp
 800571c:	f7fa fdbc 	bl	8000298 <__aeabi_dsub>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	4680      	mov	r8, r0
 8005726:	4689      	mov	r9, r1
 8005728:	4630      	mov	r0, r6
 800572a:	4639      	mov	r1, r7
 800572c:	f7fa fdb6 	bl	800029c <__adddf3>
 8005730:	2000      	movs	r0, #0
 8005732:	4632      	mov	r2, r6
 8005734:	463b      	mov	r3, r7
 8005736:	4604      	mov	r4, r0
 8005738:	460d      	mov	r5, r1
 800573a:	f7fa fdad 	bl	8000298 <__aeabi_dsub>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	4640      	mov	r0, r8
 8005744:	4649      	mov	r1, r9
 8005746:	f7fa fda7 	bl	8000298 <__aeabi_dsub>
 800574a:	9b04      	ldr	r3, [sp, #16]
 800574c:	9a06      	ldr	r2, [sp, #24]
 800574e:	3b01      	subs	r3, #1
 8005750:	4313      	orrs	r3, r2
 8005752:	4682      	mov	sl, r0
 8005754:	468b      	mov	fp, r1
 8005756:	f040 81e7 	bne.w	8005b28 <__ieee754_pow+0x700>
 800575a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005810 <__ieee754_pow+0x3e8>
 800575e:	eeb0 8a47 	vmov.f32	s16, s14
 8005762:	eef0 8a67 	vmov.f32	s17, s15
 8005766:	e9dd 6700 	ldrd	r6, r7, [sp]
 800576a:	2600      	movs	r6, #0
 800576c:	4632      	mov	r2, r6
 800576e:	463b      	mov	r3, r7
 8005770:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005774:	f7fa fd90 	bl	8000298 <__aeabi_dsub>
 8005778:	4622      	mov	r2, r4
 800577a:	462b      	mov	r3, r5
 800577c:	f7fa ff44 	bl	8000608 <__aeabi_dmul>
 8005780:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005784:	4680      	mov	r8, r0
 8005786:	4689      	mov	r9, r1
 8005788:	4650      	mov	r0, sl
 800578a:	4659      	mov	r1, fp
 800578c:	f7fa ff3c 	bl	8000608 <__aeabi_dmul>
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4640      	mov	r0, r8
 8005796:	4649      	mov	r1, r9
 8005798:	f7fa fd80 	bl	800029c <__adddf3>
 800579c:	4632      	mov	r2, r6
 800579e:	463b      	mov	r3, r7
 80057a0:	4680      	mov	r8, r0
 80057a2:	4689      	mov	r9, r1
 80057a4:	4620      	mov	r0, r4
 80057a6:	4629      	mov	r1, r5
 80057a8:	f7fa ff2e 	bl	8000608 <__aeabi_dmul>
 80057ac:	460b      	mov	r3, r1
 80057ae:	4604      	mov	r4, r0
 80057b0:	460d      	mov	r5, r1
 80057b2:	4602      	mov	r2, r0
 80057b4:	4649      	mov	r1, r9
 80057b6:	4640      	mov	r0, r8
 80057b8:	f7fa fd70 	bl	800029c <__adddf3>
 80057bc:	4b19      	ldr	r3, [pc, #100]	; (8005824 <__ieee754_pow+0x3fc>)
 80057be:	4299      	cmp	r1, r3
 80057c0:	ec45 4b19 	vmov	d9, r4, r5
 80057c4:	4606      	mov	r6, r0
 80057c6:	460f      	mov	r7, r1
 80057c8:	468b      	mov	fp, r1
 80057ca:	f340 82f1 	ble.w	8005db0 <__ieee754_pow+0x988>
 80057ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80057d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80057d6:	4303      	orrs	r3, r0
 80057d8:	f000 81e4 	beq.w	8005ba4 <__ieee754_pow+0x77c>
 80057dc:	ec51 0b18 	vmov	r0, r1, d8
 80057e0:	2200      	movs	r2, #0
 80057e2:	2300      	movs	r3, #0
 80057e4:	f7fb f982 	bl	8000aec <__aeabi_dcmplt>
 80057e8:	3800      	subs	r0, #0
 80057ea:	bf18      	it	ne
 80057ec:	2001      	movne	r0, #1
 80057ee:	e72b      	b.n	8005648 <__ieee754_pow+0x220>
 80057f0:	60000000 	.word	0x60000000
 80057f4:	3ff71547 	.word	0x3ff71547
 80057f8:	f85ddf44 	.word	0xf85ddf44
 80057fc:	3e54ae0b 	.word	0x3e54ae0b
 8005800:	55555555 	.word	0x55555555
 8005804:	3fd55555 	.word	0x3fd55555
 8005808:	652b82fe 	.word	0x652b82fe
 800580c:	3ff71547 	.word	0x3ff71547
 8005810:	00000000 	.word	0x00000000
 8005814:	bff00000 	.word	0xbff00000
 8005818:	3ff00000 	.word	0x3ff00000
 800581c:	3fd00000 	.word	0x3fd00000
 8005820:	3fe00000 	.word	0x3fe00000
 8005824:	408fffff 	.word	0x408fffff
 8005828:	4bd5      	ldr	r3, [pc, #852]	; (8005b80 <__ieee754_pow+0x758>)
 800582a:	402b      	ands	r3, r5
 800582c:	2200      	movs	r2, #0
 800582e:	b92b      	cbnz	r3, 800583c <__ieee754_pow+0x414>
 8005830:	4bd4      	ldr	r3, [pc, #848]	; (8005b84 <__ieee754_pow+0x75c>)
 8005832:	f7fa fee9 	bl	8000608 <__aeabi_dmul>
 8005836:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800583a:	460c      	mov	r4, r1
 800583c:	1523      	asrs	r3, r4, #20
 800583e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005842:	4413      	add	r3, r2
 8005844:	9305      	str	r3, [sp, #20]
 8005846:	4bd0      	ldr	r3, [pc, #832]	; (8005b88 <__ieee754_pow+0x760>)
 8005848:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800584c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005850:	429c      	cmp	r4, r3
 8005852:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005856:	dd08      	ble.n	800586a <__ieee754_pow+0x442>
 8005858:	4bcc      	ldr	r3, [pc, #816]	; (8005b8c <__ieee754_pow+0x764>)
 800585a:	429c      	cmp	r4, r3
 800585c:	f340 8162 	ble.w	8005b24 <__ieee754_pow+0x6fc>
 8005860:	9b05      	ldr	r3, [sp, #20]
 8005862:	3301      	adds	r3, #1
 8005864:	9305      	str	r3, [sp, #20]
 8005866:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800586a:	2400      	movs	r4, #0
 800586c:	00e3      	lsls	r3, r4, #3
 800586e:	9307      	str	r3, [sp, #28]
 8005870:	4bc7      	ldr	r3, [pc, #796]	; (8005b90 <__ieee754_pow+0x768>)
 8005872:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005876:	ed93 7b00 	vldr	d7, [r3]
 800587a:	4629      	mov	r1, r5
 800587c:	ec53 2b17 	vmov	r2, r3, d7
 8005880:	eeb0 9a47 	vmov.f32	s18, s14
 8005884:	eef0 9a67 	vmov.f32	s19, s15
 8005888:	4682      	mov	sl, r0
 800588a:	f7fa fd05 	bl	8000298 <__aeabi_dsub>
 800588e:	4652      	mov	r2, sl
 8005890:	4606      	mov	r6, r0
 8005892:	460f      	mov	r7, r1
 8005894:	462b      	mov	r3, r5
 8005896:	ec51 0b19 	vmov	r0, r1, d9
 800589a:	f7fa fcff 	bl	800029c <__adddf3>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	2000      	movs	r0, #0
 80058a4:	49bb      	ldr	r1, [pc, #748]	; (8005b94 <__ieee754_pow+0x76c>)
 80058a6:	f7fa ffd9 	bl	800085c <__aeabi_ddiv>
 80058aa:	ec41 0b1a 	vmov	d10, r0, r1
 80058ae:	4602      	mov	r2, r0
 80058b0:	460b      	mov	r3, r1
 80058b2:	4630      	mov	r0, r6
 80058b4:	4639      	mov	r1, r7
 80058b6:	f7fa fea7 	bl	8000608 <__aeabi_dmul>
 80058ba:	2300      	movs	r3, #0
 80058bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058c0:	9302      	str	r3, [sp, #8]
 80058c2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80058c6:	46ab      	mov	fp, r5
 80058c8:	106d      	asrs	r5, r5, #1
 80058ca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80058ce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80058d2:	ec41 0b18 	vmov	d8, r0, r1
 80058d6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80058da:	2200      	movs	r2, #0
 80058dc:	4640      	mov	r0, r8
 80058de:	4649      	mov	r1, r9
 80058e0:	4614      	mov	r4, r2
 80058e2:	461d      	mov	r5, r3
 80058e4:	f7fa fe90 	bl	8000608 <__aeabi_dmul>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4630      	mov	r0, r6
 80058ee:	4639      	mov	r1, r7
 80058f0:	f7fa fcd2 	bl	8000298 <__aeabi_dsub>
 80058f4:	ec53 2b19 	vmov	r2, r3, d9
 80058f8:	4606      	mov	r6, r0
 80058fa:	460f      	mov	r7, r1
 80058fc:	4620      	mov	r0, r4
 80058fe:	4629      	mov	r1, r5
 8005900:	f7fa fcca 	bl	8000298 <__aeabi_dsub>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	4650      	mov	r0, sl
 800590a:	4659      	mov	r1, fp
 800590c:	f7fa fcc4 	bl	8000298 <__aeabi_dsub>
 8005910:	4642      	mov	r2, r8
 8005912:	464b      	mov	r3, r9
 8005914:	f7fa fe78 	bl	8000608 <__aeabi_dmul>
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	4630      	mov	r0, r6
 800591e:	4639      	mov	r1, r7
 8005920:	f7fa fcba 	bl	8000298 <__aeabi_dsub>
 8005924:	ec53 2b1a 	vmov	r2, r3, d10
 8005928:	f7fa fe6e 	bl	8000608 <__aeabi_dmul>
 800592c:	ec53 2b18 	vmov	r2, r3, d8
 8005930:	ec41 0b19 	vmov	d9, r0, r1
 8005934:	ec51 0b18 	vmov	r0, r1, d8
 8005938:	f7fa fe66 	bl	8000608 <__aeabi_dmul>
 800593c:	a37c      	add	r3, pc, #496	; (adr r3, 8005b30 <__ieee754_pow+0x708>)
 800593e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005942:	4604      	mov	r4, r0
 8005944:	460d      	mov	r5, r1
 8005946:	f7fa fe5f 	bl	8000608 <__aeabi_dmul>
 800594a:	a37b      	add	r3, pc, #492	; (adr r3, 8005b38 <__ieee754_pow+0x710>)
 800594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005950:	f7fa fca4 	bl	800029c <__adddf3>
 8005954:	4622      	mov	r2, r4
 8005956:	462b      	mov	r3, r5
 8005958:	f7fa fe56 	bl	8000608 <__aeabi_dmul>
 800595c:	a378      	add	r3, pc, #480	; (adr r3, 8005b40 <__ieee754_pow+0x718>)
 800595e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005962:	f7fa fc9b 	bl	800029c <__adddf3>
 8005966:	4622      	mov	r2, r4
 8005968:	462b      	mov	r3, r5
 800596a:	f7fa fe4d 	bl	8000608 <__aeabi_dmul>
 800596e:	a376      	add	r3, pc, #472	; (adr r3, 8005b48 <__ieee754_pow+0x720>)
 8005970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005974:	f7fa fc92 	bl	800029c <__adddf3>
 8005978:	4622      	mov	r2, r4
 800597a:	462b      	mov	r3, r5
 800597c:	f7fa fe44 	bl	8000608 <__aeabi_dmul>
 8005980:	a373      	add	r3, pc, #460	; (adr r3, 8005b50 <__ieee754_pow+0x728>)
 8005982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005986:	f7fa fc89 	bl	800029c <__adddf3>
 800598a:	4622      	mov	r2, r4
 800598c:	462b      	mov	r3, r5
 800598e:	f7fa fe3b 	bl	8000608 <__aeabi_dmul>
 8005992:	a371      	add	r3, pc, #452	; (adr r3, 8005b58 <__ieee754_pow+0x730>)
 8005994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005998:	f7fa fc80 	bl	800029c <__adddf3>
 800599c:	4622      	mov	r2, r4
 800599e:	4606      	mov	r6, r0
 80059a0:	460f      	mov	r7, r1
 80059a2:	462b      	mov	r3, r5
 80059a4:	4620      	mov	r0, r4
 80059a6:	4629      	mov	r1, r5
 80059a8:	f7fa fe2e 	bl	8000608 <__aeabi_dmul>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	4630      	mov	r0, r6
 80059b2:	4639      	mov	r1, r7
 80059b4:	f7fa fe28 	bl	8000608 <__aeabi_dmul>
 80059b8:	4642      	mov	r2, r8
 80059ba:	4604      	mov	r4, r0
 80059bc:	460d      	mov	r5, r1
 80059be:	464b      	mov	r3, r9
 80059c0:	ec51 0b18 	vmov	r0, r1, d8
 80059c4:	f7fa fc6a 	bl	800029c <__adddf3>
 80059c8:	ec53 2b19 	vmov	r2, r3, d9
 80059cc:	f7fa fe1c 	bl	8000608 <__aeabi_dmul>
 80059d0:	4622      	mov	r2, r4
 80059d2:	462b      	mov	r3, r5
 80059d4:	f7fa fc62 	bl	800029c <__adddf3>
 80059d8:	4642      	mov	r2, r8
 80059da:	4682      	mov	sl, r0
 80059dc:	468b      	mov	fp, r1
 80059de:	464b      	mov	r3, r9
 80059e0:	4640      	mov	r0, r8
 80059e2:	4649      	mov	r1, r9
 80059e4:	f7fa fe10 	bl	8000608 <__aeabi_dmul>
 80059e8:	4b6b      	ldr	r3, [pc, #428]	; (8005b98 <__ieee754_pow+0x770>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	4606      	mov	r6, r0
 80059ee:	460f      	mov	r7, r1
 80059f0:	f7fa fc54 	bl	800029c <__adddf3>
 80059f4:	4652      	mov	r2, sl
 80059f6:	465b      	mov	r3, fp
 80059f8:	f7fa fc50 	bl	800029c <__adddf3>
 80059fc:	2000      	movs	r0, #0
 80059fe:	4604      	mov	r4, r0
 8005a00:	460d      	mov	r5, r1
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	4640      	mov	r0, r8
 8005a08:	4649      	mov	r1, r9
 8005a0a:	f7fa fdfd 	bl	8000608 <__aeabi_dmul>
 8005a0e:	4b62      	ldr	r3, [pc, #392]	; (8005b98 <__ieee754_pow+0x770>)
 8005a10:	4680      	mov	r8, r0
 8005a12:	4689      	mov	r9, r1
 8005a14:	2200      	movs	r2, #0
 8005a16:	4620      	mov	r0, r4
 8005a18:	4629      	mov	r1, r5
 8005a1a:	f7fa fc3d 	bl	8000298 <__aeabi_dsub>
 8005a1e:	4632      	mov	r2, r6
 8005a20:	463b      	mov	r3, r7
 8005a22:	f7fa fc39 	bl	8000298 <__aeabi_dsub>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4650      	mov	r0, sl
 8005a2c:	4659      	mov	r1, fp
 8005a2e:	f7fa fc33 	bl	8000298 <__aeabi_dsub>
 8005a32:	ec53 2b18 	vmov	r2, r3, d8
 8005a36:	f7fa fde7 	bl	8000608 <__aeabi_dmul>
 8005a3a:	4622      	mov	r2, r4
 8005a3c:	4606      	mov	r6, r0
 8005a3e:	460f      	mov	r7, r1
 8005a40:	462b      	mov	r3, r5
 8005a42:	ec51 0b19 	vmov	r0, r1, d9
 8005a46:	f7fa fddf 	bl	8000608 <__aeabi_dmul>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4630      	mov	r0, r6
 8005a50:	4639      	mov	r1, r7
 8005a52:	f7fa fc23 	bl	800029c <__adddf3>
 8005a56:	4606      	mov	r6, r0
 8005a58:	460f      	mov	r7, r1
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4640      	mov	r0, r8
 8005a60:	4649      	mov	r1, r9
 8005a62:	f7fa fc1b 	bl	800029c <__adddf3>
 8005a66:	a33e      	add	r3, pc, #248	; (adr r3, 8005b60 <__ieee754_pow+0x738>)
 8005a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	4604      	mov	r4, r0
 8005a70:	460d      	mov	r5, r1
 8005a72:	f7fa fdc9 	bl	8000608 <__aeabi_dmul>
 8005a76:	4642      	mov	r2, r8
 8005a78:	ec41 0b18 	vmov	d8, r0, r1
 8005a7c:	464b      	mov	r3, r9
 8005a7e:	4620      	mov	r0, r4
 8005a80:	4629      	mov	r1, r5
 8005a82:	f7fa fc09 	bl	8000298 <__aeabi_dsub>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	4639      	mov	r1, r7
 8005a8e:	f7fa fc03 	bl	8000298 <__aeabi_dsub>
 8005a92:	a335      	add	r3, pc, #212	; (adr r3, 8005b68 <__ieee754_pow+0x740>)
 8005a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a98:	f7fa fdb6 	bl	8000608 <__aeabi_dmul>
 8005a9c:	a334      	add	r3, pc, #208	; (adr r3, 8005b70 <__ieee754_pow+0x748>)
 8005a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa2:	4606      	mov	r6, r0
 8005aa4:	460f      	mov	r7, r1
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	f7fa fdad 	bl	8000608 <__aeabi_dmul>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	4639      	mov	r1, r7
 8005ab6:	f7fa fbf1 	bl	800029c <__adddf3>
 8005aba:	9a07      	ldr	r2, [sp, #28]
 8005abc:	4b37      	ldr	r3, [pc, #220]	; (8005b9c <__ieee754_pow+0x774>)
 8005abe:	4413      	add	r3, r2
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	f7fa fbea 	bl	800029c <__adddf3>
 8005ac8:	4682      	mov	sl, r0
 8005aca:	9805      	ldr	r0, [sp, #20]
 8005acc:	468b      	mov	fp, r1
 8005ace:	f7fa fd31 	bl	8000534 <__aeabi_i2d>
 8005ad2:	9a07      	ldr	r2, [sp, #28]
 8005ad4:	4b32      	ldr	r3, [pc, #200]	; (8005ba0 <__ieee754_pow+0x778>)
 8005ad6:	4413      	add	r3, r2
 8005ad8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005adc:	4606      	mov	r6, r0
 8005ade:	460f      	mov	r7, r1
 8005ae0:	4652      	mov	r2, sl
 8005ae2:	465b      	mov	r3, fp
 8005ae4:	ec51 0b18 	vmov	r0, r1, d8
 8005ae8:	f7fa fbd8 	bl	800029c <__adddf3>
 8005aec:	4642      	mov	r2, r8
 8005aee:	464b      	mov	r3, r9
 8005af0:	f7fa fbd4 	bl	800029c <__adddf3>
 8005af4:	4632      	mov	r2, r6
 8005af6:	463b      	mov	r3, r7
 8005af8:	f7fa fbd0 	bl	800029c <__adddf3>
 8005afc:	2000      	movs	r0, #0
 8005afe:	4632      	mov	r2, r6
 8005b00:	463b      	mov	r3, r7
 8005b02:	4604      	mov	r4, r0
 8005b04:	460d      	mov	r5, r1
 8005b06:	f7fa fbc7 	bl	8000298 <__aeabi_dsub>
 8005b0a:	4642      	mov	r2, r8
 8005b0c:	464b      	mov	r3, r9
 8005b0e:	f7fa fbc3 	bl	8000298 <__aeabi_dsub>
 8005b12:	ec53 2b18 	vmov	r2, r3, d8
 8005b16:	f7fa fbbf 	bl	8000298 <__aeabi_dsub>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	4650      	mov	r0, sl
 8005b20:	4659      	mov	r1, fp
 8005b22:	e610      	b.n	8005746 <__ieee754_pow+0x31e>
 8005b24:	2401      	movs	r4, #1
 8005b26:	e6a1      	b.n	800586c <__ieee754_pow+0x444>
 8005b28:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005b78 <__ieee754_pow+0x750>
 8005b2c:	e617      	b.n	800575e <__ieee754_pow+0x336>
 8005b2e:	bf00      	nop
 8005b30:	4a454eef 	.word	0x4a454eef
 8005b34:	3fca7e28 	.word	0x3fca7e28
 8005b38:	93c9db65 	.word	0x93c9db65
 8005b3c:	3fcd864a 	.word	0x3fcd864a
 8005b40:	a91d4101 	.word	0xa91d4101
 8005b44:	3fd17460 	.word	0x3fd17460
 8005b48:	518f264d 	.word	0x518f264d
 8005b4c:	3fd55555 	.word	0x3fd55555
 8005b50:	db6fabff 	.word	0xdb6fabff
 8005b54:	3fdb6db6 	.word	0x3fdb6db6
 8005b58:	33333303 	.word	0x33333303
 8005b5c:	3fe33333 	.word	0x3fe33333
 8005b60:	e0000000 	.word	0xe0000000
 8005b64:	3feec709 	.word	0x3feec709
 8005b68:	dc3a03fd 	.word	0xdc3a03fd
 8005b6c:	3feec709 	.word	0x3feec709
 8005b70:	145b01f5 	.word	0x145b01f5
 8005b74:	be3e2fe0 	.word	0xbe3e2fe0
 8005b78:	00000000 	.word	0x00000000
 8005b7c:	3ff00000 	.word	0x3ff00000
 8005b80:	7ff00000 	.word	0x7ff00000
 8005b84:	43400000 	.word	0x43400000
 8005b88:	0003988e 	.word	0x0003988e
 8005b8c:	000bb679 	.word	0x000bb679
 8005b90:	080069a0 	.word	0x080069a0
 8005b94:	3ff00000 	.word	0x3ff00000
 8005b98:	40080000 	.word	0x40080000
 8005b9c:	080069c0 	.word	0x080069c0
 8005ba0:	080069b0 	.word	0x080069b0
 8005ba4:	a3b5      	add	r3, pc, #724	; (adr r3, 8005e7c <__ieee754_pow+0xa54>)
 8005ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005baa:	4640      	mov	r0, r8
 8005bac:	4649      	mov	r1, r9
 8005bae:	f7fa fb75 	bl	800029c <__adddf3>
 8005bb2:	4622      	mov	r2, r4
 8005bb4:	ec41 0b1a 	vmov	d10, r0, r1
 8005bb8:	462b      	mov	r3, r5
 8005bba:	4630      	mov	r0, r6
 8005bbc:	4639      	mov	r1, r7
 8005bbe:	f7fa fb6b 	bl	8000298 <__aeabi_dsub>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	ec51 0b1a 	vmov	r0, r1, d10
 8005bca:	f7fa ffad 	bl	8000b28 <__aeabi_dcmpgt>
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	f47f ae04 	bne.w	80057dc <__ieee754_pow+0x3b4>
 8005bd4:	4aa4      	ldr	r2, [pc, #656]	; (8005e68 <__ieee754_pow+0xa40>)
 8005bd6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	f340 8108 	ble.w	8005df0 <__ieee754_pow+0x9c8>
 8005be0:	151b      	asrs	r3, r3, #20
 8005be2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005be6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005bea:	fa4a f303 	asr.w	r3, sl, r3
 8005bee:	445b      	add	r3, fp
 8005bf0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005bf4:	4e9d      	ldr	r6, [pc, #628]	; (8005e6c <__ieee754_pow+0xa44>)
 8005bf6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005bfa:	4116      	asrs	r6, r2
 8005bfc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005c00:	2000      	movs	r0, #0
 8005c02:	ea23 0106 	bic.w	r1, r3, r6
 8005c06:	f1c2 0214 	rsb	r2, r2, #20
 8005c0a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005c0e:	fa4a fa02 	asr.w	sl, sl, r2
 8005c12:	f1bb 0f00 	cmp.w	fp, #0
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	bfb8      	it	lt
 8005c20:	f1ca 0a00 	rsblt	sl, sl, #0
 8005c24:	f7fa fb38 	bl	8000298 <__aeabi_dsub>
 8005c28:	ec41 0b19 	vmov	d9, r0, r1
 8005c2c:	4642      	mov	r2, r8
 8005c2e:	464b      	mov	r3, r9
 8005c30:	ec51 0b19 	vmov	r0, r1, d9
 8005c34:	f7fa fb32 	bl	800029c <__adddf3>
 8005c38:	a37b      	add	r3, pc, #492	; (adr r3, 8005e28 <__ieee754_pow+0xa00>)
 8005c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3e:	2000      	movs	r0, #0
 8005c40:	4604      	mov	r4, r0
 8005c42:	460d      	mov	r5, r1
 8005c44:	f7fa fce0 	bl	8000608 <__aeabi_dmul>
 8005c48:	ec53 2b19 	vmov	r2, r3, d9
 8005c4c:	4606      	mov	r6, r0
 8005c4e:	460f      	mov	r7, r1
 8005c50:	4620      	mov	r0, r4
 8005c52:	4629      	mov	r1, r5
 8005c54:	f7fa fb20 	bl	8000298 <__aeabi_dsub>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4640      	mov	r0, r8
 8005c5e:	4649      	mov	r1, r9
 8005c60:	f7fa fb1a 	bl	8000298 <__aeabi_dsub>
 8005c64:	a372      	add	r3, pc, #456	; (adr r3, 8005e30 <__ieee754_pow+0xa08>)
 8005c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6a:	f7fa fccd 	bl	8000608 <__aeabi_dmul>
 8005c6e:	a372      	add	r3, pc, #456	; (adr r3, 8005e38 <__ieee754_pow+0xa10>)
 8005c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c74:	4680      	mov	r8, r0
 8005c76:	4689      	mov	r9, r1
 8005c78:	4620      	mov	r0, r4
 8005c7a:	4629      	mov	r1, r5
 8005c7c:	f7fa fcc4 	bl	8000608 <__aeabi_dmul>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	4640      	mov	r0, r8
 8005c86:	4649      	mov	r1, r9
 8005c88:	f7fa fb08 	bl	800029c <__adddf3>
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	460d      	mov	r5, r1
 8005c90:	4602      	mov	r2, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	4630      	mov	r0, r6
 8005c96:	4639      	mov	r1, r7
 8005c98:	f7fa fb00 	bl	800029c <__adddf3>
 8005c9c:	4632      	mov	r2, r6
 8005c9e:	463b      	mov	r3, r7
 8005ca0:	4680      	mov	r8, r0
 8005ca2:	4689      	mov	r9, r1
 8005ca4:	f7fa faf8 	bl	8000298 <__aeabi_dsub>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	4620      	mov	r0, r4
 8005cae:	4629      	mov	r1, r5
 8005cb0:	f7fa faf2 	bl	8000298 <__aeabi_dsub>
 8005cb4:	4642      	mov	r2, r8
 8005cb6:	4606      	mov	r6, r0
 8005cb8:	460f      	mov	r7, r1
 8005cba:	464b      	mov	r3, r9
 8005cbc:	4640      	mov	r0, r8
 8005cbe:	4649      	mov	r1, r9
 8005cc0:	f7fa fca2 	bl	8000608 <__aeabi_dmul>
 8005cc4:	a35e      	add	r3, pc, #376	; (adr r3, 8005e40 <__ieee754_pow+0xa18>)
 8005cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cca:	4604      	mov	r4, r0
 8005ccc:	460d      	mov	r5, r1
 8005cce:	f7fa fc9b 	bl	8000608 <__aeabi_dmul>
 8005cd2:	a35d      	add	r3, pc, #372	; (adr r3, 8005e48 <__ieee754_pow+0xa20>)
 8005cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd8:	f7fa fade 	bl	8000298 <__aeabi_dsub>
 8005cdc:	4622      	mov	r2, r4
 8005cde:	462b      	mov	r3, r5
 8005ce0:	f7fa fc92 	bl	8000608 <__aeabi_dmul>
 8005ce4:	a35a      	add	r3, pc, #360	; (adr r3, 8005e50 <__ieee754_pow+0xa28>)
 8005ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cea:	f7fa fad7 	bl	800029c <__adddf3>
 8005cee:	4622      	mov	r2, r4
 8005cf0:	462b      	mov	r3, r5
 8005cf2:	f7fa fc89 	bl	8000608 <__aeabi_dmul>
 8005cf6:	a358      	add	r3, pc, #352	; (adr r3, 8005e58 <__ieee754_pow+0xa30>)
 8005cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfc:	f7fa facc 	bl	8000298 <__aeabi_dsub>
 8005d00:	4622      	mov	r2, r4
 8005d02:	462b      	mov	r3, r5
 8005d04:	f7fa fc80 	bl	8000608 <__aeabi_dmul>
 8005d08:	a355      	add	r3, pc, #340	; (adr r3, 8005e60 <__ieee754_pow+0xa38>)
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	f7fa fac5 	bl	800029c <__adddf3>
 8005d12:	4622      	mov	r2, r4
 8005d14:	462b      	mov	r3, r5
 8005d16:	f7fa fc77 	bl	8000608 <__aeabi_dmul>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	4640      	mov	r0, r8
 8005d20:	4649      	mov	r1, r9
 8005d22:	f7fa fab9 	bl	8000298 <__aeabi_dsub>
 8005d26:	4604      	mov	r4, r0
 8005d28:	460d      	mov	r5, r1
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4640      	mov	r0, r8
 8005d30:	4649      	mov	r1, r9
 8005d32:	f7fa fc69 	bl	8000608 <__aeabi_dmul>
 8005d36:	2200      	movs	r2, #0
 8005d38:	ec41 0b19 	vmov	d9, r0, r1
 8005d3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d40:	4620      	mov	r0, r4
 8005d42:	4629      	mov	r1, r5
 8005d44:	f7fa faa8 	bl	8000298 <__aeabi_dsub>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	ec51 0b19 	vmov	r0, r1, d9
 8005d50:	f7fa fd84 	bl	800085c <__aeabi_ddiv>
 8005d54:	4632      	mov	r2, r6
 8005d56:	4604      	mov	r4, r0
 8005d58:	460d      	mov	r5, r1
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	4640      	mov	r0, r8
 8005d5e:	4649      	mov	r1, r9
 8005d60:	f7fa fc52 	bl	8000608 <__aeabi_dmul>
 8005d64:	4632      	mov	r2, r6
 8005d66:	463b      	mov	r3, r7
 8005d68:	f7fa fa98 	bl	800029c <__adddf3>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4620      	mov	r0, r4
 8005d72:	4629      	mov	r1, r5
 8005d74:	f7fa fa90 	bl	8000298 <__aeabi_dsub>
 8005d78:	4642      	mov	r2, r8
 8005d7a:	464b      	mov	r3, r9
 8005d7c:	f7fa fa8c 	bl	8000298 <__aeabi_dsub>
 8005d80:	460b      	mov	r3, r1
 8005d82:	4602      	mov	r2, r0
 8005d84:	493a      	ldr	r1, [pc, #232]	; (8005e70 <__ieee754_pow+0xa48>)
 8005d86:	2000      	movs	r0, #0
 8005d88:	f7fa fa86 	bl	8000298 <__aeabi_dsub>
 8005d8c:	ec41 0b10 	vmov	d0, r0, r1
 8005d90:	ee10 3a90 	vmov	r3, s1
 8005d94:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005d98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d9c:	da2b      	bge.n	8005df6 <__ieee754_pow+0x9ce>
 8005d9e:	4650      	mov	r0, sl
 8005da0:	f000 fc5a 	bl	8006658 <scalbn>
 8005da4:	ec51 0b10 	vmov	r0, r1, d0
 8005da8:	ec53 2b18 	vmov	r2, r3, d8
 8005dac:	f7ff bbed 	b.w	800558a <__ieee754_pow+0x162>
 8005db0:	4b30      	ldr	r3, [pc, #192]	; (8005e74 <__ieee754_pow+0xa4c>)
 8005db2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005db6:	429e      	cmp	r6, r3
 8005db8:	f77f af0c 	ble.w	8005bd4 <__ieee754_pow+0x7ac>
 8005dbc:	4b2e      	ldr	r3, [pc, #184]	; (8005e78 <__ieee754_pow+0xa50>)
 8005dbe:	440b      	add	r3, r1
 8005dc0:	4303      	orrs	r3, r0
 8005dc2:	d009      	beq.n	8005dd8 <__ieee754_pow+0x9b0>
 8005dc4:	ec51 0b18 	vmov	r0, r1, d8
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f7fa fe8e 	bl	8000aec <__aeabi_dcmplt>
 8005dd0:	3800      	subs	r0, #0
 8005dd2:	bf18      	it	ne
 8005dd4:	2001      	movne	r0, #1
 8005dd6:	e447      	b.n	8005668 <__ieee754_pow+0x240>
 8005dd8:	4622      	mov	r2, r4
 8005dda:	462b      	mov	r3, r5
 8005ddc:	f7fa fa5c 	bl	8000298 <__aeabi_dsub>
 8005de0:	4642      	mov	r2, r8
 8005de2:	464b      	mov	r3, r9
 8005de4:	f7fa fe96 	bl	8000b14 <__aeabi_dcmpge>
 8005de8:	2800      	cmp	r0, #0
 8005dea:	f43f aef3 	beq.w	8005bd4 <__ieee754_pow+0x7ac>
 8005dee:	e7e9      	b.n	8005dc4 <__ieee754_pow+0x99c>
 8005df0:	f04f 0a00 	mov.w	sl, #0
 8005df4:	e71a      	b.n	8005c2c <__ieee754_pow+0x804>
 8005df6:	ec51 0b10 	vmov	r0, r1, d0
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	e7d4      	b.n	8005da8 <__ieee754_pow+0x980>
 8005dfe:	491c      	ldr	r1, [pc, #112]	; (8005e70 <__ieee754_pow+0xa48>)
 8005e00:	2000      	movs	r0, #0
 8005e02:	f7ff bb30 	b.w	8005466 <__ieee754_pow+0x3e>
 8005e06:	2000      	movs	r0, #0
 8005e08:	2100      	movs	r1, #0
 8005e0a:	f7ff bb2c 	b.w	8005466 <__ieee754_pow+0x3e>
 8005e0e:	4630      	mov	r0, r6
 8005e10:	4639      	mov	r1, r7
 8005e12:	f7ff bb28 	b.w	8005466 <__ieee754_pow+0x3e>
 8005e16:	9204      	str	r2, [sp, #16]
 8005e18:	f7ff bb7a 	b.w	8005510 <__ieee754_pow+0xe8>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	f7ff bb64 	b.w	80054ea <__ieee754_pow+0xc2>
 8005e22:	bf00      	nop
 8005e24:	f3af 8000 	nop.w
 8005e28:	00000000 	.word	0x00000000
 8005e2c:	3fe62e43 	.word	0x3fe62e43
 8005e30:	fefa39ef 	.word	0xfefa39ef
 8005e34:	3fe62e42 	.word	0x3fe62e42
 8005e38:	0ca86c39 	.word	0x0ca86c39
 8005e3c:	be205c61 	.word	0xbe205c61
 8005e40:	72bea4d0 	.word	0x72bea4d0
 8005e44:	3e663769 	.word	0x3e663769
 8005e48:	c5d26bf1 	.word	0xc5d26bf1
 8005e4c:	3ebbbd41 	.word	0x3ebbbd41
 8005e50:	af25de2c 	.word	0xaf25de2c
 8005e54:	3f11566a 	.word	0x3f11566a
 8005e58:	16bebd93 	.word	0x16bebd93
 8005e5c:	3f66c16c 	.word	0x3f66c16c
 8005e60:	5555553e 	.word	0x5555553e
 8005e64:	3fc55555 	.word	0x3fc55555
 8005e68:	3fe00000 	.word	0x3fe00000
 8005e6c:	000fffff 	.word	0x000fffff
 8005e70:	3ff00000 	.word	0x3ff00000
 8005e74:	4090cbff 	.word	0x4090cbff
 8005e78:	3f6f3400 	.word	0x3f6f3400
 8005e7c:	652b82fe 	.word	0x652b82fe
 8005e80:	3c971547 	.word	0x3c971547

08005e84 <__ieee754_sqrt>:
 8005e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e88:	ec55 4b10 	vmov	r4, r5, d0
 8005e8c:	4e55      	ldr	r6, [pc, #340]	; (8005fe4 <__ieee754_sqrt+0x160>)
 8005e8e:	43ae      	bics	r6, r5
 8005e90:	ee10 0a10 	vmov	r0, s0
 8005e94:	ee10 3a10 	vmov	r3, s0
 8005e98:	462a      	mov	r2, r5
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	d110      	bne.n	8005ec0 <__ieee754_sqrt+0x3c>
 8005e9e:	ee10 2a10 	vmov	r2, s0
 8005ea2:	462b      	mov	r3, r5
 8005ea4:	f7fa fbb0 	bl	8000608 <__aeabi_dmul>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4620      	mov	r0, r4
 8005eae:	4629      	mov	r1, r5
 8005eb0:	f7fa f9f4 	bl	800029c <__adddf3>
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	460d      	mov	r5, r1
 8005eb8:	ec45 4b10 	vmov	d0, r4, r5
 8005ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ec0:	2d00      	cmp	r5, #0
 8005ec2:	dc10      	bgt.n	8005ee6 <__ieee754_sqrt+0x62>
 8005ec4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005ec8:	4330      	orrs	r0, r6
 8005eca:	d0f5      	beq.n	8005eb8 <__ieee754_sqrt+0x34>
 8005ecc:	b15d      	cbz	r5, 8005ee6 <__ieee754_sqrt+0x62>
 8005ece:	ee10 2a10 	vmov	r2, s0
 8005ed2:	462b      	mov	r3, r5
 8005ed4:	ee10 0a10 	vmov	r0, s0
 8005ed8:	f7fa f9de 	bl	8000298 <__aeabi_dsub>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	f7fa fcbc 	bl	800085c <__aeabi_ddiv>
 8005ee4:	e7e6      	b.n	8005eb4 <__ieee754_sqrt+0x30>
 8005ee6:	1512      	asrs	r2, r2, #20
 8005ee8:	d074      	beq.n	8005fd4 <__ieee754_sqrt+0x150>
 8005eea:	07d4      	lsls	r4, r2, #31
 8005eec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005ef0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005ef4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005ef8:	bf5e      	ittt	pl
 8005efa:	0fda      	lsrpl	r2, r3, #31
 8005efc:	005b      	lslpl	r3, r3, #1
 8005efe:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005f02:	2400      	movs	r4, #0
 8005f04:	0fda      	lsrs	r2, r3, #31
 8005f06:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005f0a:	107f      	asrs	r7, r7, #1
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	2516      	movs	r5, #22
 8005f10:	4620      	mov	r0, r4
 8005f12:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005f16:	1886      	adds	r6, r0, r2
 8005f18:	428e      	cmp	r6, r1
 8005f1a:	bfde      	ittt	le
 8005f1c:	1b89      	suble	r1, r1, r6
 8005f1e:	18b0      	addle	r0, r6, r2
 8005f20:	18a4      	addle	r4, r4, r2
 8005f22:	0049      	lsls	r1, r1, #1
 8005f24:	3d01      	subs	r5, #1
 8005f26:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005f2a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005f2e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005f32:	d1f0      	bne.n	8005f16 <__ieee754_sqrt+0x92>
 8005f34:	462a      	mov	r2, r5
 8005f36:	f04f 0e20 	mov.w	lr, #32
 8005f3a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005f3e:	4281      	cmp	r1, r0
 8005f40:	eb06 0c05 	add.w	ip, r6, r5
 8005f44:	dc02      	bgt.n	8005f4c <__ieee754_sqrt+0xc8>
 8005f46:	d113      	bne.n	8005f70 <__ieee754_sqrt+0xec>
 8005f48:	459c      	cmp	ip, r3
 8005f4a:	d811      	bhi.n	8005f70 <__ieee754_sqrt+0xec>
 8005f4c:	f1bc 0f00 	cmp.w	ip, #0
 8005f50:	eb0c 0506 	add.w	r5, ip, r6
 8005f54:	da43      	bge.n	8005fde <__ieee754_sqrt+0x15a>
 8005f56:	2d00      	cmp	r5, #0
 8005f58:	db41      	blt.n	8005fde <__ieee754_sqrt+0x15a>
 8005f5a:	f100 0801 	add.w	r8, r0, #1
 8005f5e:	1a09      	subs	r1, r1, r0
 8005f60:	459c      	cmp	ip, r3
 8005f62:	bf88      	it	hi
 8005f64:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8005f68:	eba3 030c 	sub.w	r3, r3, ip
 8005f6c:	4432      	add	r2, r6
 8005f6e:	4640      	mov	r0, r8
 8005f70:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005f74:	f1be 0e01 	subs.w	lr, lr, #1
 8005f78:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8005f7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005f80:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005f84:	d1db      	bne.n	8005f3e <__ieee754_sqrt+0xba>
 8005f86:	430b      	orrs	r3, r1
 8005f88:	d006      	beq.n	8005f98 <__ieee754_sqrt+0x114>
 8005f8a:	1c50      	adds	r0, r2, #1
 8005f8c:	bf13      	iteet	ne
 8005f8e:	3201      	addne	r2, #1
 8005f90:	3401      	addeq	r4, #1
 8005f92:	4672      	moveq	r2, lr
 8005f94:	f022 0201 	bicne.w	r2, r2, #1
 8005f98:	1063      	asrs	r3, r4, #1
 8005f9a:	0852      	lsrs	r2, r2, #1
 8005f9c:	07e1      	lsls	r1, r4, #31
 8005f9e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005fa2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005fa6:	bf48      	it	mi
 8005fa8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005fac:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005fb0:	4614      	mov	r4, r2
 8005fb2:	e781      	b.n	8005eb8 <__ieee754_sqrt+0x34>
 8005fb4:	0ad9      	lsrs	r1, r3, #11
 8005fb6:	3815      	subs	r0, #21
 8005fb8:	055b      	lsls	r3, r3, #21
 8005fba:	2900      	cmp	r1, #0
 8005fbc:	d0fa      	beq.n	8005fb4 <__ieee754_sqrt+0x130>
 8005fbe:	02cd      	lsls	r5, r1, #11
 8005fc0:	d50a      	bpl.n	8005fd8 <__ieee754_sqrt+0x154>
 8005fc2:	f1c2 0420 	rsb	r4, r2, #32
 8005fc6:	fa23 f404 	lsr.w	r4, r3, r4
 8005fca:	1e55      	subs	r5, r2, #1
 8005fcc:	4093      	lsls	r3, r2
 8005fce:	4321      	orrs	r1, r4
 8005fd0:	1b42      	subs	r2, r0, r5
 8005fd2:	e78a      	b.n	8005eea <__ieee754_sqrt+0x66>
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	e7f0      	b.n	8005fba <__ieee754_sqrt+0x136>
 8005fd8:	0049      	lsls	r1, r1, #1
 8005fda:	3201      	adds	r2, #1
 8005fdc:	e7ef      	b.n	8005fbe <__ieee754_sqrt+0x13a>
 8005fde:	4680      	mov	r8, r0
 8005fe0:	e7bd      	b.n	8005f5e <__ieee754_sqrt+0xda>
 8005fe2:	bf00      	nop
 8005fe4:	7ff00000 	.word	0x7ff00000

08005fe8 <__ieee754_powf>:
 8005fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fec:	ee10 4a90 	vmov	r4, s1
 8005ff0:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8005ff4:	ed2d 8b02 	vpush	{d8}
 8005ff8:	ee10 6a10 	vmov	r6, s0
 8005ffc:	eeb0 8a40 	vmov.f32	s16, s0
 8006000:	eef0 8a60 	vmov.f32	s17, s1
 8006004:	d10c      	bne.n	8006020 <__ieee754_powf+0x38>
 8006006:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800600a:	0076      	lsls	r6, r6, #1
 800600c:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8006010:	f240 8296 	bls.w	8006540 <__ieee754_powf+0x558>
 8006014:	ee38 0a28 	vadd.f32	s0, s16, s17
 8006018:	ecbd 8b02 	vpop	{d8}
 800601c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006020:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8006024:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8006028:	dcf4      	bgt.n	8006014 <__ieee754_powf+0x2c>
 800602a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800602e:	dd08      	ble.n	8006042 <__ieee754_powf+0x5a>
 8006030:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8006034:	d1ee      	bne.n	8006014 <__ieee754_powf+0x2c>
 8006036:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800603a:	0064      	lsls	r4, r4, #1
 800603c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8006040:	e7e6      	b.n	8006010 <__ieee754_powf+0x28>
 8006042:	2e00      	cmp	r6, #0
 8006044:	da20      	bge.n	8006088 <__ieee754_powf+0xa0>
 8006046:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800604a:	da2d      	bge.n	80060a8 <__ieee754_powf+0xc0>
 800604c:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8006050:	f2c0 827f 	blt.w	8006552 <__ieee754_powf+0x56a>
 8006054:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8006058:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800605c:	fa48 f703 	asr.w	r7, r8, r3
 8006060:	fa07 f303 	lsl.w	r3, r7, r3
 8006064:	4543      	cmp	r3, r8
 8006066:	f040 8274 	bne.w	8006552 <__ieee754_powf+0x56a>
 800606a:	f007 0701 	and.w	r7, r7, #1
 800606e:	f1c7 0702 	rsb	r7, r7, #2
 8006072:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8006076:	d11f      	bne.n	80060b8 <__ieee754_powf+0xd0>
 8006078:	2c00      	cmp	r4, #0
 800607a:	f280 8267 	bge.w	800654c <__ieee754_powf+0x564>
 800607e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006082:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8006086:	e7c7      	b.n	8006018 <__ieee754_powf+0x30>
 8006088:	2700      	movs	r7, #0
 800608a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800608e:	d1f0      	bne.n	8006072 <__ieee754_powf+0x8a>
 8006090:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8006094:	f000 8254 	beq.w	8006540 <__ieee754_powf+0x558>
 8006098:	dd08      	ble.n	80060ac <__ieee754_powf+0xc4>
 800609a:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 80063a4 <__ieee754_powf+0x3bc>
 800609e:	2c00      	cmp	r4, #0
 80060a0:	bfa8      	it	ge
 80060a2:	eeb0 0a68 	vmovge.f32	s0, s17
 80060a6:	e7b7      	b.n	8006018 <__ieee754_powf+0x30>
 80060a8:	2702      	movs	r7, #2
 80060aa:	e7ee      	b.n	800608a <__ieee754_powf+0xa2>
 80060ac:	2c00      	cmp	r4, #0
 80060ae:	f280 824a 	bge.w	8006546 <__ieee754_powf+0x55e>
 80060b2:	eeb1 0a68 	vneg.f32	s0, s17
 80060b6:	e7af      	b.n	8006018 <__ieee754_powf+0x30>
 80060b8:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80060bc:	d102      	bne.n	80060c4 <__ieee754_powf+0xdc>
 80060be:	ee28 0a08 	vmul.f32	s0, s16, s16
 80060c2:	e7a9      	b.n	8006018 <__ieee754_powf+0x30>
 80060c4:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80060c8:	eeb0 0a48 	vmov.f32	s0, s16
 80060cc:	d107      	bne.n	80060de <__ieee754_powf+0xf6>
 80060ce:	2e00      	cmp	r6, #0
 80060d0:	db05      	blt.n	80060de <__ieee754_powf+0xf6>
 80060d2:	ecbd 8b02 	vpop	{d8}
 80060d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060da:	f000 ba53 	b.w	8006584 <__ieee754_sqrtf>
 80060de:	f000 fb41 	bl	8006764 <fabsf>
 80060e2:	b125      	cbz	r5, 80060ee <__ieee754_powf+0x106>
 80060e4:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 80060e8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80060ec:	d116      	bne.n	800611c <__ieee754_powf+0x134>
 80060ee:	2c00      	cmp	r4, #0
 80060f0:	bfbc      	itt	lt
 80060f2:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80060f6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80060fa:	2e00      	cmp	r6, #0
 80060fc:	da8c      	bge.n	8006018 <__ieee754_powf+0x30>
 80060fe:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8006102:	ea55 0307 	orrs.w	r3, r5, r7
 8006106:	d104      	bne.n	8006112 <__ieee754_powf+0x12a>
 8006108:	ee70 7a40 	vsub.f32	s15, s0, s0
 800610c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006110:	e782      	b.n	8006018 <__ieee754_powf+0x30>
 8006112:	2f01      	cmp	r7, #1
 8006114:	d180      	bne.n	8006018 <__ieee754_powf+0x30>
 8006116:	eeb1 0a40 	vneg.f32	s0, s0
 800611a:	e77d      	b.n	8006018 <__ieee754_powf+0x30>
 800611c:	0ff0      	lsrs	r0, r6, #31
 800611e:	3801      	subs	r0, #1
 8006120:	ea57 0300 	orrs.w	r3, r7, r0
 8006124:	d104      	bne.n	8006130 <__ieee754_powf+0x148>
 8006126:	ee38 8a48 	vsub.f32	s16, s16, s16
 800612a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800612e:	e773      	b.n	8006018 <__ieee754_powf+0x30>
 8006130:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8006134:	dd74      	ble.n	8006220 <__ieee754_powf+0x238>
 8006136:	4b9c      	ldr	r3, [pc, #624]	; (80063a8 <__ieee754_powf+0x3c0>)
 8006138:	429d      	cmp	r5, r3
 800613a:	dc08      	bgt.n	800614e <__ieee754_powf+0x166>
 800613c:	2c00      	cmp	r4, #0
 800613e:	da0b      	bge.n	8006158 <__ieee754_powf+0x170>
 8006140:	2000      	movs	r0, #0
 8006142:	ecbd 8b02 	vpop	{d8}
 8006146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800614a:	f000 ba6b 	b.w	8006624 <__math_oflowf>
 800614e:	4b97      	ldr	r3, [pc, #604]	; (80063ac <__ieee754_powf+0x3c4>)
 8006150:	429d      	cmp	r5, r3
 8006152:	dd08      	ble.n	8006166 <__ieee754_powf+0x17e>
 8006154:	2c00      	cmp	r4, #0
 8006156:	dcf3      	bgt.n	8006140 <__ieee754_powf+0x158>
 8006158:	2000      	movs	r0, #0
 800615a:	ecbd 8b02 	vpop	{d8}
 800615e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006162:	f000 ba59 	b.w	8006618 <__math_uflowf>
 8006166:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800616a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800616e:	eddf 6a90 	vldr	s13, [pc, #576]	; 80063b0 <__ieee754_powf+0x3c8>
 8006172:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8006176:	eee0 6a67 	vfms.f32	s13, s0, s15
 800617a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800617e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8006182:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800618a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80063b4 <__ieee754_powf+0x3cc>
 800618e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8006192:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80063b8 <__ieee754_powf+0x3d0>
 8006196:	eee0 7a07 	vfma.f32	s15, s0, s14
 800619a:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80063bc <__ieee754_powf+0x3d4>
 800619e:	eef0 6a67 	vmov.f32	s13, s15
 80061a2:	eee0 6a07 	vfma.f32	s13, s0, s14
 80061a6:	ee16 3a90 	vmov	r3, s13
 80061aa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80061ae:	f023 030f 	bic.w	r3, r3, #15
 80061b2:	ee00 3a90 	vmov	s1, r3
 80061b6:	eee0 0a47 	vfms.f32	s1, s0, s14
 80061ba:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80061be:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80061c2:	f024 040f 	bic.w	r4, r4, #15
 80061c6:	ee07 4a10 	vmov	s14, r4
 80061ca:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80061ce:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80061d2:	ee07 3a90 	vmov	s15, r3
 80061d6:	eee7 0a27 	vfma.f32	s1, s14, s15
 80061da:	3f01      	subs	r7, #1
 80061dc:	ea57 0200 	orrs.w	r2, r7, r0
 80061e0:	ee07 4a10 	vmov	s14, r4
 80061e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061e8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80061ec:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80061f0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80061f4:	ee17 4a10 	vmov	r4, s14
 80061f8:	bf08      	it	eq
 80061fa:	eeb0 8a40 	vmoveq.f32	s16, s0
 80061fe:	2c00      	cmp	r4, #0
 8006200:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006204:	f340 817e 	ble.w	8006504 <__ieee754_powf+0x51c>
 8006208:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800620c:	f340 80f8 	ble.w	8006400 <__ieee754_powf+0x418>
 8006210:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006218:	bf4c      	ite	mi
 800621a:	2001      	movmi	r0, #1
 800621c:	2000      	movpl	r0, #0
 800621e:	e790      	b.n	8006142 <__ieee754_powf+0x15a>
 8006220:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8006224:	bf01      	itttt	eq
 8006226:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80063c0 <__ieee754_powf+0x3d8>
 800622a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800622e:	f06f 0217 	mvneq.w	r2, #23
 8006232:	ee17 5a90 	vmoveq	r5, s15
 8006236:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800623a:	bf18      	it	ne
 800623c:	2200      	movne	r2, #0
 800623e:	3b7f      	subs	r3, #127	; 0x7f
 8006240:	4413      	add	r3, r2
 8006242:	4a60      	ldr	r2, [pc, #384]	; (80063c4 <__ieee754_powf+0x3dc>)
 8006244:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8006248:	4295      	cmp	r5, r2
 800624a:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800624e:	dd06      	ble.n	800625e <__ieee754_powf+0x276>
 8006250:	4a5d      	ldr	r2, [pc, #372]	; (80063c8 <__ieee754_powf+0x3e0>)
 8006252:	4295      	cmp	r5, r2
 8006254:	f340 80a4 	ble.w	80063a0 <__ieee754_powf+0x3b8>
 8006258:	3301      	adds	r3, #1
 800625a:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800625e:	2500      	movs	r5, #0
 8006260:	4a5a      	ldr	r2, [pc, #360]	; (80063cc <__ieee754_powf+0x3e4>)
 8006262:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8006266:	ee07 1a90 	vmov	s15, r1
 800626a:	ed92 7a00 	vldr	s14, [r2]
 800626e:	4a58      	ldr	r2, [pc, #352]	; (80063d0 <__ieee754_powf+0x3e8>)
 8006270:	ee37 6a27 	vadd.f32	s12, s14, s15
 8006274:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006278:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800627c:	1049      	asrs	r1, r1, #1
 800627e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8006282:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8006286:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800628a:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800628e:	ee06 1a10 	vmov	s12, r1
 8006292:	ee65 4a26 	vmul.f32	s9, s10, s13
 8006296:	ee36 7a47 	vsub.f32	s14, s12, s14
 800629a:	ee14 6a90 	vmov	r6, s9
 800629e:	4016      	ands	r6, r2
 80062a0:	ee05 6a90 	vmov	s11, r6
 80062a4:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80062a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80062ac:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80063d4 <__ieee754_powf+0x3ec>
 80062b0:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80062b4:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80062b8:	ee25 6a26 	vmul.f32	s12, s10, s13
 80062bc:	eddf 6a46 	vldr	s13, [pc, #280]	; 80063d8 <__ieee754_powf+0x3f0>
 80062c0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80062c4:	eddf 6a45 	vldr	s13, [pc, #276]	; 80063dc <__ieee754_powf+0x3f4>
 80062c8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80062cc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80063b0 <__ieee754_powf+0x3c8>
 80062d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80062d4:	eddf 6a42 	vldr	s13, [pc, #264]	; 80063e0 <__ieee754_powf+0x3f8>
 80062d8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80062dc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80063e4 <__ieee754_powf+0x3fc>
 80062e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80062e4:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80062e8:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80062ec:	ee66 6a86 	vmul.f32	s13, s13, s12
 80062f0:	eee5 6a07 	vfma.f32	s13, s10, s14
 80062f4:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80062f8:	eef0 7a45 	vmov.f32	s15, s10
 80062fc:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8006300:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006304:	ee17 1a90 	vmov	r1, s15
 8006308:	4011      	ands	r1, r2
 800630a:	ee07 1a90 	vmov	s15, r1
 800630e:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8006312:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8006316:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800631a:	ee27 7a24 	vmul.f32	s14, s14, s9
 800631e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8006322:	eeb0 6a47 	vmov.f32	s12, s14
 8006326:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800632a:	ee16 1a10 	vmov	r1, s12
 800632e:	4011      	ands	r1, r2
 8006330:	ee06 1a90 	vmov	s13, r1
 8006334:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8006338:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80063e8 <__ieee754_powf+0x400>
 800633c:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80063ec <__ieee754_powf+0x404>
 8006340:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006344:	ee06 1a10 	vmov	s12, r1
 8006348:	ee27 7a27 	vmul.f32	s14, s14, s15
 800634c:	eddf 7a28 	vldr	s15, [pc, #160]	; 80063f0 <__ieee754_powf+0x408>
 8006350:	4928      	ldr	r1, [pc, #160]	; (80063f4 <__ieee754_powf+0x40c>)
 8006352:	eea6 7a27 	vfma.f32	s14, s12, s15
 8006356:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800635a:	edd1 7a00 	vldr	s15, [r1]
 800635e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006362:	ee07 3a90 	vmov	s15, r3
 8006366:	4b24      	ldr	r3, [pc, #144]	; (80063f8 <__ieee754_powf+0x410>)
 8006368:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800636c:	eef0 7a47 	vmov.f32	s15, s14
 8006370:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006374:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8006378:	edd5 0a00 	vldr	s1, [r5]
 800637c:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8006380:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006384:	ee17 3a90 	vmov	r3, s15
 8006388:	4013      	ands	r3, r2
 800638a:	ee07 3a90 	vmov	s15, r3
 800638e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8006392:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8006396:	eee6 6a65 	vfms.f32	s13, s12, s11
 800639a:	ee77 7a66 	vsub.f32	s15, s14, s13
 800639e:	e70e      	b.n	80061be <__ieee754_powf+0x1d6>
 80063a0:	2501      	movs	r5, #1
 80063a2:	e75d      	b.n	8006260 <__ieee754_powf+0x278>
 80063a4:	00000000 	.word	0x00000000
 80063a8:	3f7ffff3 	.word	0x3f7ffff3
 80063ac:	3f800007 	.word	0x3f800007
 80063b0:	3eaaaaab 	.word	0x3eaaaaab
 80063b4:	3fb8aa3b 	.word	0x3fb8aa3b
 80063b8:	36eca570 	.word	0x36eca570
 80063bc:	3fb8aa00 	.word	0x3fb8aa00
 80063c0:	4b800000 	.word	0x4b800000
 80063c4:	001cc471 	.word	0x001cc471
 80063c8:	005db3d6 	.word	0x005db3d6
 80063cc:	080069d0 	.word	0x080069d0
 80063d0:	fffff000 	.word	0xfffff000
 80063d4:	3e6c3255 	.word	0x3e6c3255
 80063d8:	3e53f142 	.word	0x3e53f142
 80063dc:	3e8ba305 	.word	0x3e8ba305
 80063e0:	3edb6db7 	.word	0x3edb6db7
 80063e4:	3f19999a 	.word	0x3f19999a
 80063e8:	3f76384f 	.word	0x3f76384f
 80063ec:	3f763800 	.word	0x3f763800
 80063f0:	369dc3a0 	.word	0x369dc3a0
 80063f4:	080069e0 	.word	0x080069e0
 80063f8:	080069d8 	.word	0x080069d8
 80063fc:	3338aa3c 	.word	0x3338aa3c
 8006400:	f040 8095 	bne.w	800652e <__ieee754_powf+0x546>
 8006404:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80063fc <__ieee754_powf+0x414>
 8006408:	ee37 7a67 	vsub.f32	s14, s14, s15
 800640c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8006410:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006418:	f73f aefa 	bgt.w	8006210 <__ieee754_powf+0x228>
 800641c:	15db      	asrs	r3, r3, #23
 800641e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8006422:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006426:	4103      	asrs	r3, r0
 8006428:	4423      	add	r3, r4
 800642a:	494b      	ldr	r1, [pc, #300]	; (8006558 <__ieee754_powf+0x570>)
 800642c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006430:	3a7f      	subs	r2, #127	; 0x7f
 8006432:	4111      	asrs	r1, r2
 8006434:	ea23 0101 	bic.w	r1, r3, r1
 8006438:	ee07 1a10 	vmov	s14, r1
 800643c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006440:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006444:	f1c2 0217 	rsb	r2, r2, #23
 8006448:	4110      	asrs	r0, r2
 800644a:	2c00      	cmp	r4, #0
 800644c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006450:	bfb8      	it	lt
 8006452:	4240      	neglt	r0, r0
 8006454:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8006458:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800655c <__ieee754_powf+0x574>
 800645c:	eddf 6a40 	vldr	s13, [pc, #256]	; 8006560 <__ieee754_powf+0x578>
 8006460:	ee17 3a10 	vmov	r3, s14
 8006464:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006468:	f023 030f 	bic.w	r3, r3, #15
 800646c:	ee07 3a10 	vmov	s14, r3
 8006470:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006474:	ee27 0a00 	vmul.f32	s0, s14, s0
 8006478:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800647c:	eddf 7a39 	vldr	s15, [pc, #228]	; 8006564 <__ieee754_powf+0x57c>
 8006480:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8006484:	eef0 7a40 	vmov.f32	s15, s0
 8006488:	eee7 7a26 	vfma.f32	s15, s14, s13
 800648c:	eeb0 6a67 	vmov.f32	s12, s15
 8006490:	eea7 6a66 	vfms.f32	s12, s14, s13
 8006494:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006498:	ee30 0a46 	vsub.f32	s0, s0, s12
 800649c:	eddf 6a32 	vldr	s13, [pc, #200]	; 8006568 <__ieee754_powf+0x580>
 80064a0:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800656c <__ieee754_powf+0x584>
 80064a4:	eee7 6a06 	vfma.f32	s13, s14, s12
 80064a8:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8006570 <__ieee754_powf+0x588>
 80064ac:	eea6 6a87 	vfma.f32	s12, s13, s14
 80064b0:	eddf 6a30 	vldr	s13, [pc, #192]	; 8006574 <__ieee754_powf+0x58c>
 80064b4:	eee6 6a07 	vfma.f32	s13, s12, s14
 80064b8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8006578 <__ieee754_powf+0x590>
 80064bc:	eea6 6a87 	vfma.f32	s12, s13, s14
 80064c0:	eef0 6a67 	vmov.f32	s13, s15
 80064c4:	eee6 6a47 	vfms.f32	s13, s12, s14
 80064c8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80064cc:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80064d0:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80064d4:	eea7 0a80 	vfma.f32	s0, s15, s0
 80064d8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80064dc:	ee37 0a40 	vsub.f32	s0, s14, s0
 80064e0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80064e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80064e8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80064ec:	ee10 3a10 	vmov	r3, s0
 80064f0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80064f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064f8:	da1f      	bge.n	800653a <__ieee754_powf+0x552>
 80064fa:	f000 f947 	bl	800678c <scalbnf>
 80064fe:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006502:	e589      	b.n	8006018 <__ieee754_powf+0x30>
 8006504:	4a1d      	ldr	r2, [pc, #116]	; (800657c <__ieee754_powf+0x594>)
 8006506:	4293      	cmp	r3, r2
 8006508:	dd07      	ble.n	800651a <__ieee754_powf+0x532>
 800650a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800650e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006512:	bf4c      	ite	mi
 8006514:	2001      	movmi	r0, #1
 8006516:	2000      	movpl	r0, #0
 8006518:	e61f      	b.n	800615a <__ieee754_powf+0x172>
 800651a:	d108      	bne.n	800652e <__ieee754_powf+0x546>
 800651c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006520:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8006524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006528:	f6ff af78 	blt.w	800641c <__ieee754_powf+0x434>
 800652c:	e7ed      	b.n	800650a <__ieee754_powf+0x522>
 800652e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8006532:	f73f af73 	bgt.w	800641c <__ieee754_powf+0x434>
 8006536:	2000      	movs	r0, #0
 8006538:	e78c      	b.n	8006454 <__ieee754_powf+0x46c>
 800653a:	ee00 3a10 	vmov	s0, r3
 800653e:	e7de      	b.n	80064fe <__ieee754_powf+0x516>
 8006540:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006544:	e568      	b.n	8006018 <__ieee754_powf+0x30>
 8006546:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8006580 <__ieee754_powf+0x598>
 800654a:	e565      	b.n	8006018 <__ieee754_powf+0x30>
 800654c:	eeb0 0a48 	vmov.f32	s0, s16
 8006550:	e562      	b.n	8006018 <__ieee754_powf+0x30>
 8006552:	2700      	movs	r7, #0
 8006554:	e58d      	b.n	8006072 <__ieee754_powf+0x8a>
 8006556:	bf00      	nop
 8006558:	007fffff 	.word	0x007fffff
 800655c:	35bfbe8c 	.word	0x35bfbe8c
 8006560:	3f317200 	.word	0x3f317200
 8006564:	3f317218 	.word	0x3f317218
 8006568:	b5ddea0e 	.word	0xb5ddea0e
 800656c:	3331bb4c 	.word	0x3331bb4c
 8006570:	388ab355 	.word	0x388ab355
 8006574:	bb360b61 	.word	0xbb360b61
 8006578:	3e2aaaab 	.word	0x3e2aaaab
 800657c:	43160000 	.word	0x43160000
 8006580:	00000000 	.word	0x00000000

08006584 <__ieee754_sqrtf>:
 8006584:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006588:	4770      	bx	lr

0800658a <with_errno>:
 800658a:	b570      	push	{r4, r5, r6, lr}
 800658c:	4604      	mov	r4, r0
 800658e:	460d      	mov	r5, r1
 8006590:	4616      	mov	r6, r2
 8006592:	f7fe f9d9 	bl	8004948 <__errno>
 8006596:	4629      	mov	r1, r5
 8006598:	6006      	str	r6, [r0, #0]
 800659a:	4620      	mov	r0, r4
 800659c:	bd70      	pop	{r4, r5, r6, pc}

0800659e <xflow>:
 800659e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065a0:	4614      	mov	r4, r2
 80065a2:	461d      	mov	r5, r3
 80065a4:	b108      	cbz	r0, 80065aa <xflow+0xc>
 80065a6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80065aa:	e9cd 2300 	strd	r2, r3, [sp]
 80065ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065b2:	4620      	mov	r0, r4
 80065b4:	4629      	mov	r1, r5
 80065b6:	f7fa f827 	bl	8000608 <__aeabi_dmul>
 80065ba:	2222      	movs	r2, #34	; 0x22
 80065bc:	b003      	add	sp, #12
 80065be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065c2:	f7ff bfe2 	b.w	800658a <with_errno>

080065c6 <__math_uflow>:
 80065c6:	b508      	push	{r3, lr}
 80065c8:	2200      	movs	r2, #0
 80065ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80065ce:	f7ff ffe6 	bl	800659e <xflow>
 80065d2:	ec41 0b10 	vmov	d0, r0, r1
 80065d6:	bd08      	pop	{r3, pc}

080065d8 <__math_oflow>:
 80065d8:	b508      	push	{r3, lr}
 80065da:	2200      	movs	r2, #0
 80065dc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80065e0:	f7ff ffdd 	bl	800659e <xflow>
 80065e4:	ec41 0b10 	vmov	d0, r0, r1
 80065e8:	bd08      	pop	{r3, pc}

080065ea <with_errnof>:
 80065ea:	b513      	push	{r0, r1, r4, lr}
 80065ec:	4604      	mov	r4, r0
 80065ee:	ed8d 0a01 	vstr	s0, [sp, #4]
 80065f2:	f7fe f9a9 	bl	8004948 <__errno>
 80065f6:	ed9d 0a01 	vldr	s0, [sp, #4]
 80065fa:	6004      	str	r4, [r0, #0]
 80065fc:	b002      	add	sp, #8
 80065fe:	bd10      	pop	{r4, pc}

08006600 <xflowf>:
 8006600:	b130      	cbz	r0, 8006610 <xflowf+0x10>
 8006602:	eef1 7a40 	vneg.f32	s15, s0
 8006606:	ee27 0a80 	vmul.f32	s0, s15, s0
 800660a:	2022      	movs	r0, #34	; 0x22
 800660c:	f7ff bfed 	b.w	80065ea <with_errnof>
 8006610:	eef0 7a40 	vmov.f32	s15, s0
 8006614:	e7f7      	b.n	8006606 <xflowf+0x6>
	...

08006618 <__math_uflowf>:
 8006618:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006620 <__math_uflowf+0x8>
 800661c:	f7ff bff0 	b.w	8006600 <xflowf>
 8006620:	10000000 	.word	0x10000000

08006624 <__math_oflowf>:
 8006624:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800662c <__math_oflowf+0x8>
 8006628:	f7ff bfea 	b.w	8006600 <xflowf>
 800662c:	70000000 	.word	0x70000000

08006630 <fabs>:
 8006630:	ec51 0b10 	vmov	r0, r1, d0
 8006634:	ee10 2a10 	vmov	r2, s0
 8006638:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800663c:	ec43 2b10 	vmov	d0, r2, r3
 8006640:	4770      	bx	lr

08006642 <finite>:
 8006642:	b082      	sub	sp, #8
 8006644:	ed8d 0b00 	vstr	d0, [sp]
 8006648:	9801      	ldr	r0, [sp, #4]
 800664a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800664e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006652:	0fc0      	lsrs	r0, r0, #31
 8006654:	b002      	add	sp, #8
 8006656:	4770      	bx	lr

08006658 <scalbn>:
 8006658:	b570      	push	{r4, r5, r6, lr}
 800665a:	ec55 4b10 	vmov	r4, r5, d0
 800665e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006662:	4606      	mov	r6, r0
 8006664:	462b      	mov	r3, r5
 8006666:	b99a      	cbnz	r2, 8006690 <scalbn+0x38>
 8006668:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800666c:	4323      	orrs	r3, r4
 800666e:	d036      	beq.n	80066de <scalbn+0x86>
 8006670:	4b39      	ldr	r3, [pc, #228]	; (8006758 <scalbn+0x100>)
 8006672:	4629      	mov	r1, r5
 8006674:	ee10 0a10 	vmov	r0, s0
 8006678:	2200      	movs	r2, #0
 800667a:	f7f9 ffc5 	bl	8000608 <__aeabi_dmul>
 800667e:	4b37      	ldr	r3, [pc, #220]	; (800675c <scalbn+0x104>)
 8006680:	429e      	cmp	r6, r3
 8006682:	4604      	mov	r4, r0
 8006684:	460d      	mov	r5, r1
 8006686:	da10      	bge.n	80066aa <scalbn+0x52>
 8006688:	a32b      	add	r3, pc, #172	; (adr r3, 8006738 <scalbn+0xe0>)
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	e03a      	b.n	8006706 <scalbn+0xae>
 8006690:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006694:	428a      	cmp	r2, r1
 8006696:	d10c      	bne.n	80066b2 <scalbn+0x5a>
 8006698:	ee10 2a10 	vmov	r2, s0
 800669c:	4620      	mov	r0, r4
 800669e:	4629      	mov	r1, r5
 80066a0:	f7f9 fdfc 	bl	800029c <__adddf3>
 80066a4:	4604      	mov	r4, r0
 80066a6:	460d      	mov	r5, r1
 80066a8:	e019      	b.n	80066de <scalbn+0x86>
 80066aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80066ae:	460b      	mov	r3, r1
 80066b0:	3a36      	subs	r2, #54	; 0x36
 80066b2:	4432      	add	r2, r6
 80066b4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80066b8:	428a      	cmp	r2, r1
 80066ba:	dd08      	ble.n	80066ce <scalbn+0x76>
 80066bc:	2d00      	cmp	r5, #0
 80066be:	a120      	add	r1, pc, #128	; (adr r1, 8006740 <scalbn+0xe8>)
 80066c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066c4:	da1c      	bge.n	8006700 <scalbn+0xa8>
 80066c6:	a120      	add	r1, pc, #128	; (adr r1, 8006748 <scalbn+0xf0>)
 80066c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066cc:	e018      	b.n	8006700 <scalbn+0xa8>
 80066ce:	2a00      	cmp	r2, #0
 80066d0:	dd08      	ble.n	80066e4 <scalbn+0x8c>
 80066d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80066d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80066de:	ec45 4b10 	vmov	d0, r4, r5
 80066e2:	bd70      	pop	{r4, r5, r6, pc}
 80066e4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80066e8:	da19      	bge.n	800671e <scalbn+0xc6>
 80066ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 80066ee:	429e      	cmp	r6, r3
 80066f0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80066f4:	dd0a      	ble.n	800670c <scalbn+0xb4>
 80066f6:	a112      	add	r1, pc, #72	; (adr r1, 8006740 <scalbn+0xe8>)
 80066f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e2      	bne.n	80066c6 <scalbn+0x6e>
 8006700:	a30f      	add	r3, pc, #60	; (adr r3, 8006740 <scalbn+0xe8>)
 8006702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006706:	f7f9 ff7f 	bl	8000608 <__aeabi_dmul>
 800670a:	e7cb      	b.n	80066a4 <scalbn+0x4c>
 800670c:	a10a      	add	r1, pc, #40	; (adr r1, 8006738 <scalbn+0xe0>)
 800670e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0b8      	beq.n	8006688 <scalbn+0x30>
 8006716:	a10e      	add	r1, pc, #56	; (adr r1, 8006750 <scalbn+0xf8>)
 8006718:	e9d1 0100 	ldrd	r0, r1, [r1]
 800671c:	e7b4      	b.n	8006688 <scalbn+0x30>
 800671e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006722:	3236      	adds	r2, #54	; 0x36
 8006724:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006728:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800672c:	4620      	mov	r0, r4
 800672e:	4b0c      	ldr	r3, [pc, #48]	; (8006760 <scalbn+0x108>)
 8006730:	2200      	movs	r2, #0
 8006732:	e7e8      	b.n	8006706 <scalbn+0xae>
 8006734:	f3af 8000 	nop.w
 8006738:	c2f8f359 	.word	0xc2f8f359
 800673c:	01a56e1f 	.word	0x01a56e1f
 8006740:	8800759c 	.word	0x8800759c
 8006744:	7e37e43c 	.word	0x7e37e43c
 8006748:	8800759c 	.word	0x8800759c
 800674c:	fe37e43c 	.word	0xfe37e43c
 8006750:	c2f8f359 	.word	0xc2f8f359
 8006754:	81a56e1f 	.word	0x81a56e1f
 8006758:	43500000 	.word	0x43500000
 800675c:	ffff3cb0 	.word	0xffff3cb0
 8006760:	3c900000 	.word	0x3c900000

08006764 <fabsf>:
 8006764:	ee10 3a10 	vmov	r3, s0
 8006768:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800676c:	ee00 3a10 	vmov	s0, r3
 8006770:	4770      	bx	lr

08006772 <finitef>:
 8006772:	b082      	sub	sp, #8
 8006774:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006778:	9801      	ldr	r0, [sp, #4]
 800677a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800677e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006782:	bfac      	ite	ge
 8006784:	2000      	movge	r0, #0
 8006786:	2001      	movlt	r0, #1
 8006788:	b002      	add	sp, #8
 800678a:	4770      	bx	lr

0800678c <scalbnf>:
 800678c:	ee10 3a10 	vmov	r3, s0
 8006790:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006794:	d025      	beq.n	80067e2 <scalbnf+0x56>
 8006796:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800679a:	d302      	bcc.n	80067a2 <scalbnf+0x16>
 800679c:	ee30 0a00 	vadd.f32	s0, s0, s0
 80067a0:	4770      	bx	lr
 80067a2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80067a6:	d122      	bne.n	80067ee <scalbnf+0x62>
 80067a8:	4b2a      	ldr	r3, [pc, #168]	; (8006854 <scalbnf+0xc8>)
 80067aa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8006858 <scalbnf+0xcc>
 80067ae:	4298      	cmp	r0, r3
 80067b0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80067b4:	db16      	blt.n	80067e4 <scalbnf+0x58>
 80067b6:	ee10 3a10 	vmov	r3, s0
 80067ba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80067be:	3a19      	subs	r2, #25
 80067c0:	4402      	add	r2, r0
 80067c2:	2afe      	cmp	r2, #254	; 0xfe
 80067c4:	dd15      	ble.n	80067f2 <scalbnf+0x66>
 80067c6:	ee10 3a10 	vmov	r3, s0
 80067ca:	eddf 7a24 	vldr	s15, [pc, #144]	; 800685c <scalbnf+0xd0>
 80067ce:	eddf 6a24 	vldr	s13, [pc, #144]	; 8006860 <scalbnf+0xd4>
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	eeb0 7a67 	vmov.f32	s14, s15
 80067d8:	bfb8      	it	lt
 80067da:	eef0 7a66 	vmovlt.f32	s15, s13
 80067de:	ee27 0a27 	vmul.f32	s0, s14, s15
 80067e2:	4770      	bx	lr
 80067e4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006864 <scalbnf+0xd8>
 80067e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80067ec:	4770      	bx	lr
 80067ee:	0dd2      	lsrs	r2, r2, #23
 80067f0:	e7e6      	b.n	80067c0 <scalbnf+0x34>
 80067f2:	2a00      	cmp	r2, #0
 80067f4:	dd06      	ble.n	8006804 <scalbnf+0x78>
 80067f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80067fa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80067fe:	ee00 3a10 	vmov	s0, r3
 8006802:	4770      	bx	lr
 8006804:	f112 0f16 	cmn.w	r2, #22
 8006808:	da1a      	bge.n	8006840 <scalbnf+0xb4>
 800680a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800680e:	4298      	cmp	r0, r3
 8006810:	ee10 3a10 	vmov	r3, s0
 8006814:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006818:	dd0a      	ble.n	8006830 <scalbnf+0xa4>
 800681a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800685c <scalbnf+0xd0>
 800681e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006860 <scalbnf+0xd4>
 8006822:	eef0 7a40 	vmov.f32	s15, s0
 8006826:	2b00      	cmp	r3, #0
 8006828:	bf18      	it	ne
 800682a:	eeb0 0a47 	vmovne.f32	s0, s14
 800682e:	e7db      	b.n	80067e8 <scalbnf+0x5c>
 8006830:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8006864 <scalbnf+0xd8>
 8006834:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006868 <scalbnf+0xdc>
 8006838:	eef0 7a40 	vmov.f32	s15, s0
 800683c:	2b00      	cmp	r3, #0
 800683e:	e7f3      	b.n	8006828 <scalbnf+0x9c>
 8006840:	3219      	adds	r2, #25
 8006842:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006846:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800684a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800686c <scalbnf+0xe0>
 800684e:	ee07 3a10 	vmov	s14, r3
 8006852:	e7c4      	b.n	80067de <scalbnf+0x52>
 8006854:	ffff3cb0 	.word	0xffff3cb0
 8006858:	4c000000 	.word	0x4c000000
 800685c:	7149f2ca 	.word	0x7149f2ca
 8006860:	f149f2ca 	.word	0xf149f2ca
 8006864:	0da24260 	.word	0x0da24260
 8006868:	8da24260 	.word	0x8da24260
 800686c:	33000000 	.word	0x33000000

08006870 <_init>:
 8006870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006872:	bf00      	nop
 8006874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006876:	bc08      	pop	{r3}
 8006878:	469e      	mov	lr, r3
 800687a:	4770      	bx	lr

0800687c <_fini>:
 800687c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687e:	bf00      	nop
 8006880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006882:	bc08      	pop	{r3}
 8006884:	469e      	mov	lr, r3
 8006886:	4770      	bx	lr
